
//gradle dist -x test ==> This will exclude [test]
//task dist(dependsOn: [compile, test]) << {
//    println "building the distribution"
//}

// gradle projects ===> List all Projects in Tree
// gradle tasks ===> List all tasks in Tree , same as tasks

// TASKSs for Game Development on JMonkey3

//
//task libDist(dependsOn: subprojects.build) << {
////    description "Builds and copies the engine binaries, sources and javadoc to build/libDist"
//    File libFolder = mkdir("$buildDir/libDist/lib")
//    File sourceFolder = mkdir("$buildDir/libDist/sources")
//    File javadocFolder = mkdir("$buildDir/libDist/javadoc")
//    subprojects.each {project ->
//        if(project.ext.mainClass == ""){
//            project.tasks.withType(Jar).each {archiveTask ->
//                if(archiveTask.classifier == "sources"){
//                    copy {
//                        from archiveTask.archivePath
//                        into sourceFolder
//                        rename {project.name + "-" + archiveTask.classifier +"."+ archiveTask.extension}
//                    }
//                } else if(archiveTask.classifier == "javadoc"){
//                    copy {
//                        from archiveTask.archivePath
//                        into javadocFolder
//                        rename {project.name + "-" + archiveTask.classifier +"."+ archiveTask.extension}
//                    }
//                } else{
//                    copy {
//                        from archiveTask.archivePath
//                        into libFolder
//                        rename {project.name + "." + archiveTask.extension}
//                    }
//                }
//            }
//        }
//    }
//}
//
//task createZipDistribution(type:Zip,dependsOn:["dist","libDist"], description:"Package the nightly zip distribution"){
//    archiveName "jME" + jmeFullVersion + ".zip"
//    into("/") {
//        from {"./dist"}
//    }
//    into("/sources") {
//        from {"$buildDir/libDist/sources"}
//    }
//}
//
//task copyLibs(type: Copy){
////    description "Copies the engine dependencies to build/libDist"
//    from {
//        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
//    }
//
//    into "$buildDir/libDist/lib-ext" //buildDir.path + "/" + libsDirName + "/lib"
//}
//
////task dist(dependsOn: [":jme3-examples:dist", "mergedJavadoc"]){
////    description "Creates a jME3 examples distribution with all jme3 binaries, sources, javadoc and external libraries under ./dist"
////}
//task dist(dependsOn: ["mergedJavadoc"]){
//    description "Creates a jME3 examples distribution with all jme3 binaries, sources, javadoc and external libraries under ./dist"
//}
//
//task mergedJavadoc(type: Javadoc, description: "Creates Javadoc from all the projects.") {
//    title = "jMonkeyEngine3"
//    destinationDir = mkdir("dist/javadoc")
//
//    options.encoding = "UTF-8"
//
//    // Allows Javadoc to be generated on Java 8 despite doclint errors.
//    if (JavaVersion.current().isJava8Compatible()) {
//        options.addStringOption("Xdoclint:none", "-quiet")
//    }
//
//    options.overview = file("javadoc-overview.html")
//    // Note: The closures below are executed lazily.
//    source subprojects.collect {project ->
//        project.sourceSets*.allJava
//    }
////    classpath = files(subprojects.collect {project ->
////            project.sourceSets*.compileClasspath})
//    //    source {
//    //        subprojects*.sourceSets*.main*.allSource
//    //    }
//    classpath.from {
//        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
//    }
//}
//
//task mergedSource(type: Copy){
//
//}
//
////task wrapper(type: Wrapper, description: "Creates and deploys the Gradle wrapper to the current directory.") {
////    gradleVersion = "3.4.1"
////}
//
//ext {
//    ndkCommandPath  = ""
//    ndkExists       = false
//}
//
//task configureAndroidNDK {
//    def ndkBuildFile = "ndk-build"
//    // if windows, use ndk-build.cmd instead
//    if (System.properties["os.name"].toLowerCase().contains("windows")) {
//        ndkBuildFile = "ndk-build.cmd"
//    }
//
//    // ndkPath is defined in the root project gradle.properties file
//    String ndkBuildPath = ndkPath + File.separator + ndkBuildFile
//    //Use the environment variable for the NDK location if defined
//    if (System.env.ANDROID_NDK != null) {
//        ndkBuildPath = System.env.ANDROID_NDK + File.separator + ndkBuildFile
//    }
//
//    if (new File(ndkBuildPath).exists()) {
//        ndkExists = true
//        ndkCommandPath = ndkBuildPath
//    }
//}

//xcodebuild {
//    version = "7.3.1"
//    target = "XCode-TARGET"
//    scheme = "Example"
//    configuration = "Test"
//    destination = ["iPhone 6s"]
//}

//j2objcConfig {
//    // Sets up libraries you depend on
//    autoConfigureDeps true
//    // Omit these two lines if you don"t configure your Xcode project with CocoaPods
//    xcodeProjectDir "../ios"  //  suggested directory name
//    xcodeTargetsIos "IOS-APP"  // greplace with your iOS targets
//    finalConfigure()          // Must be last call to configuration
//}
//