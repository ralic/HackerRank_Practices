/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __InspcJ2c_InspcDataExchangeAccess_Inspc_h__
#define __InspcJ2c_InspcDataExchangeAccess_Inspc_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/
#include "J1c/ByteDataAccessJc.h"  //superclass


/*@CLASS_C Datagram_InspcDataExchangeAccess_Inspc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct Datagram_InspcDataExchangeAccess_Inspc_t
{ 
  union { ObjectJc object; ByteDataAccessJc_s super;} base; 
} Datagram_InspcDataExchangeAccess_Inspc_s;
  

#define sizeof_Datagram_InspcDataExchangeAccess_Inspc_s sizeof(Datagram_InspcDataExchangeAccess_Inspc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef Datagram_InspcDataExchangeAccess_InspcREFDEF
  #define Datagram_InspcDataExchangeAccess_InspcREFDEF
  typedef struct Datagram_InspcDataExchangeAccess_InspcREF_t { ObjectRefValuesJc refbase; struct Datagram_InspcDataExchangeAccess_Inspc_t* ref; } Datagram_InspcDataExchangeAccess_InspcREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct Datagram_InspcDataExchangeAccess_Inspc_X_t { ObjectArrayJc head; Datagram_InspcDataExchangeAccess_InspcREF data[50]; } Datagram_InspcDataExchangeAccess_Inspc_X;
typedef struct Datagram_InspcDataExchangeAccess_Inspc_Y_t { ObjectArrayJc head; Datagram_InspcDataExchangeAccess_Inspc_s data[50]; } Datagram_InspcDataExchangeAccess_Inspc_Y;

 extern struct ClassJc_t const reflection_Datagram_InspcDataExchangeAccess_Inspc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_Datagram_InspcDataExchangeAccess_Inspc(OBJP) { CONST_ObjectJc(sizeof(Datagram_InspcDataExchangeAccess_Inspc_s), OBJP, &reflection_Datagram_InspcDataExchangeAccess_Inspc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_Datagram_InspcDataExchangeAccess_Inspc_F(ObjectJc* othis, ThCxt* _thCxt);


#define knrofBytes_Datagram_InspcDataExchangeAccess_Inspc 0
#define knEntrant_Datagram_InspcDataExchangeAccess_Inspc 2
#define kencryption_Datagram_InspcDataExchangeAccess_Inspc 4
#define kseqnr_Datagram_InspcDataExchangeAccess_Inspc 8
#define kanswerNr_Datagram_InspcDataExchangeAccess_Inspc 12
#define sizeofHead_Datagram_InspcDataExchangeAccess_Inspc 16


METHOD_C struct Datagram_InspcDataExchangeAccess_Inspc_t* ctorO_iY_Datagram_InspcDataExchangeAccess_Inspc(ObjectJc* othis, int8_Y* buffer, ThCxt* _thCxt);

METHOD_C struct Datagram_InspcDataExchangeAccess_Inspc_t* ctorO_Datagram_InspcDataExchangeAccess_Inspc(ObjectJc* othis, ThCxt* _thCxt);

METHOD_C void specifyEmptyDefaultData_Datagram_InspcDataExchangeAccess_Inspc(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);

METHOD_C int32 specifyLengthElement_Datagram_InspcDataExchangeAccess_Inspc(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);

METHOD_C int32 specifyLengthElementHead_Datagram_InspcDataExchangeAccess_Inspc(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);

METHOD_C void setLengthDatagram_Datagram_InspcDataExchangeAccess_Inspc(Datagram_InspcDataExchangeAccess_Inspc_s* ythis, int32 length, ThCxt* _thCxt);

METHOD_C int32 getLengthDatagram_Datagram_InspcDataExchangeAccess_Inspc(Datagram_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

METHOD_C void setHead_Datagram_InspcDataExchangeAccess_Inspc(Datagram_InspcDataExchangeAccess_Inspc_s* ythis, int32 entrant, int32 seqNr, int32 encryption, ThCxt* _thCxt);

METHOD_C void setEntrant_Datagram_InspcDataExchangeAccess_Inspc(Datagram_InspcDataExchangeAccess_Inspc_s* ythis, int32 nr, ThCxt* _thCxt);

METHOD_C int32 getEntrant_Datagram_InspcDataExchangeAccess_Inspc(Datagram_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

METHOD_C int32 getEncryption_Datagram_InspcDataExchangeAccess_Inspc(Datagram_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

METHOD_C void setSeqnr_Datagram_InspcDataExchangeAccess_Inspc(Datagram_InspcDataExchangeAccess_Inspc_s* ythis, int32 nr, ThCxt* _thCxt);

METHOD_C int32 getSeqnr_Datagram_InspcDataExchangeAccess_Inspc(Datagram_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

/**Mark the datagram as last answer. */
METHOD_C void markAnswerNrLast_Datagram_InspcDataExchangeAccess_Inspc(Datagram_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

/**Increments the number for the answer datagram. */
METHOD_C void incrAnswerNr_Datagram_InspcDataExchangeAccess_Inspc(Datagram_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_Datagram_InspcDataExchangeAccess_Inspc[]; //marker for methodTable check
typedef struct Mtbl_Datagram_InspcDataExchangeAccess_Inspc_t
{ MtblHeadJc head;
  Mtbl_ByteDataAccessJc ByteDataAccessJc;
} Mtbl_Datagram_InspcDataExchangeAccess_Inspc;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class Datagram_InspcDataExchangeAccess_Inspc : private Datagram_InspcDataExchangeAccess_Inspc_s
{ public:

  Datagram_InspcDataExchangeAccess_Inspc(){ init_ObjectJc(&this->base.object, sizeof(Datagram_InspcDataExchangeAccess_Inspc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_Datagram_InspcDataExchangeAccess_Inspc_s, 0); ctorO_Datagram_InspcDataExchangeAccess_Inspc(&this->base.object,  null/*_thCxt*/); }

  Datagram_InspcDataExchangeAccess_Inspc(int8_Y* buffer){ init_ObjectJc(&this->base.object, sizeof(Datagram_InspcDataExchangeAccess_Inspc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_Datagram_InspcDataExchangeAccess_Inspc_s, 0); ctorO_iY_Datagram_InspcDataExchangeAccess_Inspc(&this->base.object, buffer,  null/*_thCxt*/); }

  int32 getEncryption(){  return getEncryption_Datagram_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  int32 getEntrant(){  return getEntrant_Datagram_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  int32 getLengthDatagram(){  return getLengthDatagram_Datagram_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  int32 getSeqnr(){  return getSeqnr_Datagram_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  void incrAnswerNr(){ incrAnswerNr_Datagram_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  void markAnswerNrLast(){ markAnswerNrLast_Datagram_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  void setEntrant(int32 nr){ setEntrant_Datagram_InspcDataExchangeAccess_Inspc(this, nr,  null/*_thCxt*/); }

  void setHead(int32 entrant, int32 seqNr, int32 encryption){ setHead_Datagram_InspcDataExchangeAccess_Inspc(this, entrant, seqNr, encryption,  null/*_thCxt*/); }

  void setLengthDatagram(int32 length){ setLengthDatagram_Datagram_InspcDataExchangeAccess_Inspc(this, length,  null/*_thCxt*/); }

  void setSeqnr(int32 nr){ setSeqnr_Datagram_InspcDataExchangeAccess_Inspc(this, nr,  null/*_thCxt*/); }

  void specifyEmptyDefaultData(){ specifyEmptyDefaultData_Datagram_InspcDataExchangeAccess_Inspc(&this->base.super,  null/*_thCxt*/); }

  int32 specifyLengthElementHead(){  return specifyLengthElementHead_Datagram_InspcDataExchangeAccess_Inspc(&this->base.super,  null/*_thCxt*/); }

  int32 specifyLengthElement(){  return specifyLengthElement_Datagram_InspcDataExchangeAccess_Inspc(&this->base.super,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C Info_InspcDataExchangeAccess_Inspc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct Info_InspcDataExchangeAccess_Inspc_t
{ 
  union { ObjectJc object; ByteDataAccessJc_s super;} base; 
} Info_InspcDataExchangeAccess_Inspc_s;
  

#define sizeof_Info_InspcDataExchangeAccess_Inspc_s sizeof(Info_InspcDataExchangeAccess_Inspc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef Info_InspcDataExchangeAccess_InspcREFDEF
  #define Info_InspcDataExchangeAccess_InspcREFDEF
  typedef struct Info_InspcDataExchangeAccess_InspcREF_t { ObjectRefValuesJc refbase; struct Info_InspcDataExchangeAccess_Inspc_t* ref; } Info_InspcDataExchangeAccess_InspcREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct Info_InspcDataExchangeAccess_Inspc_X_t { ObjectArrayJc head; Info_InspcDataExchangeAccess_InspcREF data[50]; } Info_InspcDataExchangeAccess_Inspc_X;
typedef struct Info_InspcDataExchangeAccess_Inspc_Y_t { ObjectArrayJc head; Info_InspcDataExchangeAccess_Inspc_s data[50]; } Info_InspcDataExchangeAccess_Inspc_Y;

 extern struct ClassJc_t const reflection_Info_InspcDataExchangeAccess_Inspc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_Info_InspcDataExchangeAccess_Inspc(OBJP) { CONST_ObjectJc(sizeof(Info_InspcDataExchangeAccess_Inspc_s), OBJP, &reflection_Info_InspcDataExchangeAccess_Inspc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_Info_InspcDataExchangeAccess_Inspc_F(ObjectJc* othis, ThCxt* _thCxt);


#define sizeofHead_Info_InspcDataExchangeAccess_Inspc 8
#define kGetFields_Info_InspcDataExchangeAccess_Inspc 0x10  /*Aufforderung zur Rückgabe einer Liste aller Attribute und Assoziationen des adressierten Objektes.*/
#define kGetFieldsFurther_Info_InspcDataExchangeAccess_Inspc 0x12  /**/
#define kAnswerFieldMethod_Info_InspcDataExchangeAccess_Inspc 0x14  /*Antwort auf Aufforderung zur Rückgabe einer Liste von Attributen, Assoziationen oder Methoden.*/
#define kRegisterRepeat_Info_InspcDataExchangeAccess_Inspc 0x23
#define kAnswerRegisterRepeat_Info_InspcDataExchangeAccess_Inspc 0x123
#define kFailedRegisterRepeat_Info_InspcDataExchangeAccess_Inspc 0x124
#define kGetValueByIndex_Info_InspcDataExchangeAccess_Inspc 0x25
#define kAnswerValue_Info_InspcDataExchangeAccess_Inspc 0x26
#define kFailedValue_Info_InspcDataExchangeAccess_Inspc 0x27
#define kGetValueByPath_Info_InspcDataExchangeAccess_Inspc 0x30
#define kGetAddressByPath_Info_InspcDataExchangeAccess_Inspc 0x32
#define kSetValueByPath_Info_InspcDataExchangeAccess_Inspc 0x35
#define kFailedCommand_Info_InspcDataExchangeAccess_Inspc 0xff


/**Default constructor. */
METHOD_C struct Info_InspcDataExchangeAccess_Inspc_t* ctorO_Info_InspcDataExchangeAccess_Inspc(ObjectJc* othis, ThCxt* _thCxt);

METHOD_C void specifyEmptyDefaultData_Info_InspcDataExchangeAccess_Inspc(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);

METHOD_C int32 specifyLengthElement_Info_InspcDataExchangeAccess_Inspc(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);

METHOD_C int32 specifyLengthElementHead_Info_InspcDataExchangeAccess_Inspc(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);

METHOD_C void setInfoHead_Info_InspcDataExchangeAccess_Inspc(Info_InspcDataExchangeAccess_Inspc_s* ythis, int32 length, int32 cmd, int32 order, ThCxt* _thCxt);

METHOD_C void setLength_Info_InspcDataExchangeAccess_Inspc(Info_InspcDataExchangeAccess_Inspc_s* ythis, int32 length, ThCxt* _thCxt);

METHOD_C int32 getCmd_Info_InspcDataExchangeAccess_Inspc(Info_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

METHOD_C int32 getLenInfo_Info_InspcDataExchangeAccess_Inspc(Info_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

METHOD_C int32 getOrder_Info_InspcDataExchangeAccess_Inspc(Info_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_Info_InspcDataExchangeAccess_Inspc[]; //marker for methodTable check
typedef struct Mtbl_Info_InspcDataExchangeAccess_Inspc_t
{ MtblHeadJc head;
  Mtbl_ByteDataAccessJc ByteDataAccessJc;
} Mtbl_Info_InspcDataExchangeAccess_Inspc;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class Info_InspcDataExchangeAccess_Inspc : private Info_InspcDataExchangeAccess_Inspc_s
{ public:

  Info_InspcDataExchangeAccess_Inspc(){ init_ObjectJc(&this->base.object, sizeof(Info_InspcDataExchangeAccess_Inspc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_Info_InspcDataExchangeAccess_Inspc_s, 0); ctorO_Info_InspcDataExchangeAccess_Inspc(&this->base.object,  null/*_thCxt*/); }

  int32 getCmd(){  return getCmd_Info_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  int32 getLenInfo(){  return getLenInfo_Info_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  int32 getOrder(){  return getOrder_Info_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  void setInfoHead(int32 length, int32 cmd, int32 order){ setInfoHead_Info_InspcDataExchangeAccess_Inspc(this, length, cmd, order,  null/*_thCxt*/); }

  void setLength(int32 length){ setLength_Info_InspcDataExchangeAccess_Inspc(this, length,  null/*_thCxt*/); }

  void specifyEmptyDefaultData(){ specifyEmptyDefaultData_Info_InspcDataExchangeAccess_Inspc(&this->base.super,  null/*_thCxt*/); }

  int32 specifyLengthElementHead(){  return specifyLengthElementHead_Info_InspcDataExchangeAccess_Inspc(&this->base.super,  null/*_thCxt*/); }

  int32 specifyLengthElement(){  return specifyLengthElement_Info_InspcDataExchangeAccess_Inspc(&this->base.super,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C SetValue_InspcDataExchangeAccess_Inspc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct SetValue_InspcDataExchangeAccess_Inspc_t
{ 
  union { ObjectJc object; ByteDataAccessJc_s super;} base; 
} SetValue_InspcDataExchangeAccess_Inspc_s;
  

#define sizeof_SetValue_InspcDataExchangeAccess_Inspc_s sizeof(SetValue_InspcDataExchangeAccess_Inspc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef SetValue_InspcDataExchangeAccess_InspcREFDEF
  #define SetValue_InspcDataExchangeAccess_InspcREFDEF
  typedef struct SetValue_InspcDataExchangeAccess_InspcREF_t { ObjectRefValuesJc refbase; struct SetValue_InspcDataExchangeAccess_Inspc_t* ref; } SetValue_InspcDataExchangeAccess_InspcREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct SetValue_InspcDataExchangeAccess_Inspc_X_t { ObjectArrayJc head; SetValue_InspcDataExchangeAccess_InspcREF data[50]; } SetValue_InspcDataExchangeAccess_Inspc_X;
typedef struct SetValue_InspcDataExchangeAccess_Inspc_Y_t { ObjectArrayJc head; SetValue_InspcDataExchangeAccess_Inspc_s data[50]; } SetValue_InspcDataExchangeAccess_Inspc_Y;

 extern struct ClassJc_t const reflection_SetValue_InspcDataExchangeAccess_Inspc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_SetValue_InspcDataExchangeAccess_Inspc(OBJP) { CONST_ObjectJc(sizeof(SetValue_InspcDataExchangeAccess_Inspc_s), OBJP, &reflection_SetValue_InspcDataExchangeAccess_Inspc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_SetValue_InspcDataExchangeAccess_Inspc_F(ObjectJc* othis, ThCxt* _thCxt);


#define sizeofElement_SetValue_InspcDataExchangeAccess_Inspc 16


METHOD_C struct SetValue_InspcDataExchangeAccess_Inspc_t* ctorO_SetValue_InspcDataExchangeAccess_Inspc(ObjectJc* othis, ThCxt* _thCxt);

/**Gets a password for access control.*/
METHOD_C int32 getPwdLo_SetValue_InspcDataExchangeAccess_Inspc(SetValue_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

/**Gets a password for access control.*/
METHOD_C int32 getPwdHi_SetValue_InspcDataExchangeAccess_Inspc(SetValue_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

METHOD_C void setPwdLo_SetValue_InspcDataExchangeAccess_Inspc(SetValue_InspcDataExchangeAccess_Inspc_s* ythis, int32 pwd, ThCxt* _thCxt);

METHOD_C void setPwdHi_SetValue_InspcDataExchangeAccess_Inspc(SetValue_InspcDataExchangeAccess_Inspc_s* ythis, int32 pwd, ThCxt* _thCxt);

METHOD_C int8 getByte_SetValue_InspcDataExchangeAccess_Inspc(SetValue_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

METHOD_C int16 getShort_SetValue_InspcDataExchangeAccess_Inspc(SetValue_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

/**A long value is provided in the bytes 8..15 in Big endian.*/
METHOD_C int32 getInt_SetValue_InspcDataExchangeAccess_Inspc(SetValue_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

/**A long value is provided in the bytes 8..15 in Big endian.*/
METHOD_C int64 getLong_SetValue_InspcDataExchangeAccess_Inspc(SetValue_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

/**A float value is provided in the bytes 8..11 in Big endian.*/
METHOD_C float getFloat_SetValue_InspcDataExchangeAccess_Inspc(SetValue_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

METHOD_C double getDouble_SetValue_InspcDataExchangeAccess_Inspc(SetValue_InspcDataExchangeAccess_Inspc_s* ythis, ThCxt* _thCxt);

METHOD_C void specifyEmptyDefaultData_SetValue_InspcDataExchangeAccess_Inspc(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);

METHOD_C int32 specifyLengthElement_SetValue_InspcDataExchangeAccess_Inspc(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);

METHOD_C int32 specifyLengthElementHead_SetValue_InspcDataExchangeAccess_Inspc(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_SetValue_InspcDataExchangeAccess_Inspc[]; //marker for methodTable check
typedef struct Mtbl_SetValue_InspcDataExchangeAccess_Inspc_t
{ MtblHeadJc head;
  Mtbl_ByteDataAccessJc ByteDataAccessJc;
} Mtbl_SetValue_InspcDataExchangeAccess_Inspc;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class SetValue_InspcDataExchangeAccess_Inspc : private SetValue_InspcDataExchangeAccess_Inspc_s
{ public:

  SetValue_InspcDataExchangeAccess_Inspc(){ init_ObjectJc(&this->base.object, sizeof(SetValue_InspcDataExchangeAccess_Inspc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_SetValue_InspcDataExchangeAccess_Inspc_s, 0); ctorO_SetValue_InspcDataExchangeAccess_Inspc(&this->base.object,  null/*_thCxt*/); }

  int8 getByte(){  return getByte_SetValue_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  double getDouble(){  return getDouble_SetValue_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  float getFloat(){  return getFloat_SetValue_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  int32 getInt(){  return getInt_SetValue_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  int64 getLong(){  return getLong_SetValue_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  int32 getPwdHi(){  return getPwdHi_SetValue_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  int32 getPwdLo(){  return getPwdLo_SetValue_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  int16 getShort(){  return getShort_SetValue_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  void setPwdHi(int32 pwd){ setPwdHi_SetValue_InspcDataExchangeAccess_Inspc(this, pwd,  null/*_thCxt*/); }

  void setPwdLo(int32 pwd){ setPwdLo_SetValue_InspcDataExchangeAccess_Inspc(this, pwd,  null/*_thCxt*/); }

  void specifyEmptyDefaultData(){ specifyEmptyDefaultData_SetValue_InspcDataExchangeAccess_Inspc(&this->base.super,  null/*_thCxt*/); }

  int32 specifyLengthElementHead(){  return specifyLengthElementHead_SetValue_InspcDataExchangeAccess_Inspc(&this->base.super,  null/*_thCxt*/); }

  int32 specifyLengthElement(){  return specifyLengthElement_SetValue_InspcDataExchangeAccess_Inspc(&this->base.super,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C InspcDataExchangeAccess_Inspc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct InspcDataExchangeAccess_Inspc_t
{ 
  union { ObjectJc object; } base; 
} InspcDataExchangeAccess_Inspc_s;
  

#define sizeof_InspcDataExchangeAccess_Inspc_s sizeof(InspcDataExchangeAccess_Inspc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef InspcDataExchangeAccess_InspcREFDEF
  #define InspcDataExchangeAccess_InspcREFDEF
  typedef struct InspcDataExchangeAccess_InspcREF_t { ObjectRefValuesJc refbase; struct InspcDataExchangeAccess_Inspc_t* ref; } InspcDataExchangeAccess_InspcREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct InspcDataExchangeAccess_Inspc_X_t { ObjectArrayJc head; InspcDataExchangeAccess_InspcREF data[50]; } InspcDataExchangeAccess_Inspc_X;
typedef struct InspcDataExchangeAccess_Inspc_Y_t { ObjectArrayJc head; InspcDataExchangeAccess_Inspc_s data[50]; } InspcDataExchangeAccess_Inspc_Y;

 extern struct ClassJc_t const reflection_InspcDataExchangeAccess_Inspc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_InspcDataExchangeAccess_Inspc(OBJP) { CONST_ObjectJc(sizeof(InspcDataExchangeAccess_Inspc_s), OBJP, &reflection_InspcDataExchangeAccess_Inspc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_InspcDataExchangeAccess_Inspc_F(ObjectJc* othis, ThCxt* _thCxt);


#define maxNrOfChars_InspcDataExchangeAccess_Inspc 0xc8  /*Values between 0..199 determines the length of string.*/
#define kReference_InspcDataExchangeAccess_Inspc 0xdf
#define kScalarTypes_InspcDataExchangeAccess_Inspc 0xe0  /*Scalar types started with 0xe0,*/


/**Default constructor. */
METHOD_C struct InspcDataExchangeAccess_Inspc_t* ctorO_InspcDataExchangeAccess_Inspc(ObjectJc* othis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_InspcDataExchangeAccess_Inspc[]; //marker for methodTable check
typedef struct Mtbl_InspcDataExchangeAccess_Inspc_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_InspcDataExchangeAccess_Inspc;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class InspcDataExchangeAccess_Inspc : private InspcDataExchangeAccess_Inspc_s
{ public:

  InspcDataExchangeAccess_Inspc(){ init_ObjectJc(&this->base.object, sizeof(InspcDataExchangeAccess_Inspc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_InspcDataExchangeAccess_Inspc_s, 0); ctorO_InspcDataExchangeAccess_Inspc(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__InspcJ2c_InspcDataExchangeAccess_Inspc_h__
