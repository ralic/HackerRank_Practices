/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __J1c_StringFormatterJc_h__
#define __J1c_StringFormatterJc_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef StringBuilderJcREFDEF
  #define StringBuilderJcREFDEF
  typedef struct StringBuilderJcREF_t { ObjectRefValuesJc refbase; struct StringBuilderJc_t* ref; } StringBuilderJcREF;
#endif


/* J2C: includes *********************************************************/


/*@CLASS_C StringFormatterJc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct StringFormatterJc_t
{ 
  union { ObjectJc object; } base; 
  StringBuilderJcREF buffer; 
  int32 pos;   /*The position of actual writing.*/
  bool bInsert;   /*True than add inserts, false than it overwrites. */
  char cDecimalSeparator; 
} StringFormatterJc_s;
  

#define sizeof_StringFormatterJc_s sizeof(StringFormatterJc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef StringFormatterJcREFDEF
  #define StringFormatterJcREFDEF
  typedef struct StringFormatterJcREF_t { ObjectRefValuesJc refbase; struct StringFormatterJc_t* ref; } StringFormatterJcREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct StringFormatterJc_X_t { ObjectArrayJc head; StringFormatterJcREF data[50]; } StringFormatterJc_X;
typedef struct StringFormatterJc_Y_t { ObjectArrayJc head; StringFormatterJc_s data[50]; } StringFormatterJc_Y;

 extern struct ClassJc_t const reflection_StringFormatterJc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_StringFormatterJc(OBJP) { CONST_ObjectJc(sizeof(StringFormatterJc_s), OBJP, &reflection_StringFormatterJc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_StringFormatterJc_F(ObjectJc* othis, ThCxt* _thCxt);


#define mNrofBytesInWord_StringFormatterJc 0x1f
#define mBytesInWordBigEndian_StringFormatterJc 0x20  /*If this bit is set in mode, the byte with the lower index is interpreted as higher part of word*/
#define k1_StringFormatterJc 1  /*The constant determine the number of digits representing a (hex) value and the decision, use first byte left or right side.*/
#define k2right_StringFormatterJc 2  /*The constant determine the number of digits representing a (hex) value and the decision, use first byte left or right side.*/
 extern const int16 k2left_StringFormatterJc;   /*The constant determine the number of digits representing a (hex) value and the decision, use first byte left or right side.*/
#define k4right_StringFormatterJc 4  /*The constant determine the number of digits representing a (hex) value and the decision, use first byte left or right side.*/
 extern const int16 k4left_StringFormatterJc;   /*The constant determine the number of digits representing a (hex) value and the decision, use first byte left or right side.*/
#define k6right_StringFormatterJc 6  /*The constant determine the number of digits representing a (hex) value and the decision, use first byte left or right side.*/
 extern const int16 k6left_StringFormatterJc;   /*The constant determine the number of digits representing a (hex) value and the decision, use first byte left or right side.*/
#define k8right_StringFormatterJc 8  /*The constant determine the number of digits representing a (hex) value and the decision, use first byte left or right side.*/
 extern const int16 k8left_StringFormatterJc;   /*The constant determine the number of digits representing a (hex) value and the decision, use first byte left or right side.*/
 extern StringJc spaces_StringFormatterJc; 
 extern const int64 n10a_StringFormatterJc[9];   /*Array with power of 10 to detect the exponent size of a long value. */
 extern StringJc sNeg_StringFormatterJc; 


METHOD_C struct StringFormatterJc_t* ctorO_StringFormatterJc(ObjectJc* othis, ThCxt* _thCxt);

/**Constructs an instance with a StringBuffer of the given length.*/
METHOD_C struct StringFormatterJc_t* ctorO_i_StringFormatterJc(ObjectJc* othis, int32 length, ThCxt* _thCxt);

/**Constructs an instance with a StringBuffer initialized with the given string.*/
METHOD_C struct StringFormatterJc_t* ctorO_S_StringFormatterJc(ObjectJc* othis, StringJc str, ThCxt* _thCxt);

/**Constructs an instance with a existing StringBuffer.*/
METHOD_C struct StringFormatterJc_t* ctorO_Sb_StringFormatterJc(ObjectJc* othis, struct StringBuilderJc_t* buffer, ThCxt* _thCxt);

/**Same as getContent, overwrites Object.toString().*/
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C StringJc toString_StringFormatterJc_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C StringJc toString_StringFormatterJc(ObjectJc* ithis, ThCxt* _thCxt);

/**Gets the accumulated content.*/
typedef StringJc MT_getContent_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C StringJc getContent_StringFormatterJc_F(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C StringJc getContent_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);

/**Sets an deviant decimal separator for floating point digigs, country-specific. */
typedef void MT_setDecimalSeparator_StringFormatterJc(StringFormatterJc_s* ythis, char sep, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void setDecimalSeparator_StringFormatterJc_F(StringFormatterJc_s* ythis, char sep, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void setDecimalSeparator_StringFormatterJc(StringFormatterJc_s* ythis, char sep, ThCxt* _thCxt);

/**Resets the internal buffer*/
typedef struct StringFormatterJc_t* MT_reset_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* reset_StringFormatterJc_F(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* reset_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);

/**Sets the current position to the end of the string. */
typedef struct StringFormatterJc_t* MT_end_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* end_StringFormatterJc_F(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* end_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);

/**Sets the current write position to the given position. */
typedef struct StringFormatterJc_t* MT_pos_StringFormatterJc(StringFormatterJc_s* ythis, int32 newPos, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* pos_StringFormatterJc_F(StringFormatterJc_s* ythis, int32 newPos, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* pos_StringFormatterJc(StringFormatterJc_s* ythis, int32 newPos, ThCxt* _thCxt);

/**returns the current length of string. */
typedef int32 MT_length_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 length_StringFormatterJc_F(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 length_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);

/**returns the current position for add in buffer.*/
typedef int32 MT_getPos_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 getPos_StringFormatterJc_F(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 getPos_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);

/**Adds at the current position a string.*/
typedef struct StringFormatterJc_t* MT_add_S_StringFormatterJc(StringFormatterJc_s* ythis, StringJc str, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* add_S_StringFormatterJc_F(StringFormatterJc_s* ythis, StringJc str, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* add_S_StringFormatterJc(StringFormatterJc_s* ythis, StringJc str, ThCxt* _thCxt);

/**Adds at the current position a char[].*/
typedef struct StringFormatterJc_t* MT_add_cY_StringFormatterJc(StringFormatterJc_s* ythis, char_Y* str, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* add_cY_StringFormatterJc_F(StringFormatterJc_s* ythis, char_Y* str, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* add_cY_StringFormatterJc(StringFormatterJc_s* ythis, char_Y* str, ThCxt* _thCxt);

/**Inserts a String at current position with shifting the actual content to right.*/
typedef struct StringFormatterJc_t* MT_insert_S_StringFormatterJc(StringFormatterJc_s* ythis, StringJc str, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* insert_S_StringFormatterJc_F(StringFormatterJc_s* ythis, StringJc str, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* insert_S_StringFormatterJc(StringFormatterJc_s* ythis, StringJc str, ThCxt* _thCxt);

/**sets the overwrite mode. It is the default. In this mode add will overwrite the current content. */
typedef struct StringFormatterJc_t* MT_overwrite_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* overwrite_StringFormatterJc_F(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* overwrite_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);

/**sets the insert mode. In this mode add will shift the content at pos to right. */
typedef struct StringFormatterJc_t* MT_insert_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* insert_StringFormatterJc_F(StringFormatterJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* insert_StringFormatterJc(StringFormatterJc_s* ythis, ThCxt* _thCxt);

/**sets the insert or overwrite mode, returns the current mode before change.*/
typedef bool MT_setInsertMode_StringFormatterJc(StringFormatterJc_s* ythis, bool insert, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C bool setInsertMode_StringFormatterJc_F(StringFormatterJc_s* ythis, bool insert, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C bool setInsertMode_StringFormatterJc(StringFormatterJc_s* ythis, bool insert, ThCxt* _thCxt);

/**Adds a line of ascii representation of bytes*/
typedef struct StringFormatterJc_t* MT_addStringLine_StringFormatterJc(StringFormatterJc_s* ythis, int8_Y* data, int32 idx, int32 nrofBytes, StringJc charsetName, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* addStringLine_StringFormatterJc_F(StringFormatterJc_s* ythis, int8_Y* data, int32 idx, int32 nrofBytes, StringJc charsetName, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* addStringLine_StringFormatterJc(StringFormatterJc_s* ythis, int8_Y* data, int32 idx, int32 nrofBytes, StringJc charsetName, ThCxt* _thCxt);

/**Adds at the current position a line of hex numbers.*/
typedef struct StringFormatterJc_t* MT_addHexLine_StringFormatterJc(StringFormatterJc_s* ythis, int8_Y* data, int32 idx, int32 nrofBytes, int16 mode, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* addHexLine_StringFormatterJc_F(StringFormatterJc_s* ythis, int8_Y* data, int32 idx, int32 nrofBytes, int16 mode, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* addHexLine_StringFormatterJc(StringFormatterJc_s* ythis, int8_Y* data, int32 idx, int32 nrofBytes, int16 mode, ThCxt* _thCxt);

/**Adds a hexa line with left address and ascii*/
typedef struct StringFormatterJc_t* MT_addHexWord_StringFormatterJc(StringFormatterJc_s* ythis, int8_Y* data, int32 idx, int16 mode, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* addHexWord_StringFormatterJc_F(StringFormatterJc_s* ythis, int8_Y* data, int32 idx, int16 mode, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* addHexWord_StringFormatterJc(StringFormatterJc_s* ythis, int8_Y* data, int32 idx, int16 mode, ThCxt* _thCxt);

/**Adds a number as one word readed from data in hexa form, internal routine without prepareBufferPos*/
typedef struct StringFormatterJc_t* MT_addHexWord__StringFormatterJc(StringFormatterJc_s* ythis, int8_Y* data, int32 idx, int16 mode, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* addHexWord__StringFormatterJc_F(StringFormatterJc_s* ythis, int8_Y* data, int32 idx, int16 mode, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* addHexWord__StringFormatterJc(StringFormatterJc_s* ythis, int8_Y* data, int32 idx, int16 mode, ThCxt* _thCxt);

/**Adds a number containing in a long variable in hexa form*/
typedef struct StringFormatterJc_t* MT_addHex_StringFormatterJc(StringFormatterJc_s* ythis, int64 value, int32 nrofDigits, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* addHex_StringFormatterJc_F(StringFormatterJc_s* ythis, int64 value, int32 nrofDigits, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* addHex_StringFormatterJc(StringFormatterJc_s* ythis, int64 value, int32 nrofDigits, ThCxt* _thCxt);

/**Adds a number containing in a long variable in hexa form*/
typedef struct StringFormatterJc_t* MT_addBinary_StringFormatterJc(StringFormatterJc_s* ythis, int32 value, StringJc sPicture, StringJc sBitCharLo, StringJc sBitCharHi, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* addBinary_StringFormatterJc_F(StringFormatterJc_s* ythis, int32 value, StringJc sPicture, StringJc sBitCharLo, StringJc sBitCharHi, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* addBinary_StringFormatterJc(StringFormatterJc_s* ythis, int32 value, StringJc sPicture, StringJc sBitCharLo, StringJc sBitCharHi, ThCxt* _thCxt);

/**ensures, that the space in buffer started on pos is writeable with setCharAt.*/
typedef void MT_prepareBufferPos_StringFormatterJc(StringFormatterJc_s* ythis, int32 nrofChars, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void prepareBufferPos_StringFormatterJc_F(StringFormatterJc_s* ythis, int32 nrofChars, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void prepareBufferPos_StringFormatterJc(StringFormatterJc_s* ythis, int32 nrofChars, ThCxt* _thCxt);

/**Adds a number in form 12ab'cd34, it is typical to show 4-byte-values at example addresses.*/
typedef struct StringFormatterJc_t* MT_addHex44_StringFormatterJc(StringFormatterJc_s* ythis, int64 value, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* addHex44_StringFormatterJc_F(StringFormatterJc_s* ythis, int64 value, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* addHex44_StringFormatterJc(StringFormatterJc_s* ythis, int64 value, ThCxt* _thCxt);

/**adds a double value in a fix point representation without exponent.*/
typedef struct StringFormatterJc_t* MT_addFloat_StringFormatterJc(StringFormatterJc_s* ythis, double value, int32 digitsBeforePoint, int32 digitsAfterPoint, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* addFloat_StringFormatterJc_F(StringFormatterJc_s* ythis, double value, int32 digitsBeforePoint, int32 digitsAfterPoint, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* addFloat_StringFormatterJc(StringFormatterJc_s* ythis, double value, int32 digitsBeforePoint, int32 digitsAfterPoint, ThCxt* _thCxt);

/**Adds a line with representation of byte content in a fixed nice format.*/
METHOD_C StringJc addHexLn_StringFormatterJc(/*static*/ int8_Y* data, int32 length, int32 idxStart, ThCxt* _thCxt);

typedef struct StringFormatterJc_t* MT_add_c_StringFormatterJc(StringFormatterJc_s* ythis, char ch, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* add_c_StringFormatterJc_F(StringFormatterJc_s* ythis, char ch, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* add_c_StringFormatterJc(StringFormatterJc_s* ythis, char ch, ThCxt* _thCxt);

typedef struct StringFormatterJc_t* MT_addDate_StringFormatterJc(StringFormatterJc_s* ythis, struct DateJc_t* date, struct SimpleDateFormatJc_t* format, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* addDate_StringFormatterJc_F(StringFormatterJc_s* ythis, struct DateJc_t* date, struct SimpleDateFormatJc_t* format, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* addDate_StringFormatterJc(StringFormatterJc_s* ythis, struct DateJc_t* date, struct SimpleDateFormatJc_t* format, ThCxt* _thCxt);

typedef struct StringFormatterJc_t* MT_setAt_StringFormatterJc(StringFormatterJc_s* ythis, int32 pos, char ch, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* setAt_StringFormatterJc_F(StringFormatterJc_s* ythis, int32 pos, char ch, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* setAt_StringFormatterJc(StringFormatterJc_s* ythis, int32 pos, char ch, ThCxt* _thCxt);

/**Sets a integer value at current position, use the picture to determine the number of characters etc.*/
typedef struct StringFormatterJc_t* MT_addint_StringFormatterJc(StringFormatterJc_s* ythis, int64 nr, StringJc sPict, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* addint_StringFormatterJc_F(StringFormatterJc_s* ythis, int64 nr, StringJc sPict, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* addint_StringFormatterJc(StringFormatterJc_s* ythis, int64 nr, StringJc sPict, ThCxt* _thCxt);

/***/
typedef struct StringFormatterJc_t* MT_addIntPicture_StringFormatterJc(StringFormatterJc_s* ythis, int64 nr, StringJc sPict, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct StringFormatterJc_t* addIntPicture_StringFormatterJc_F(StringFormatterJc_s* ythis, int64 nr, StringJc sPict, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct StringFormatterJc_t* addIntPicture_StringFormatterJc(StringFormatterJc_s* ythis, int64 nr, StringJc sPict, ThCxt* _thCxt);

/**This algorithm is taken over from C++ routines in strpict.cpp written by JcHartmut in 1993..1999.*/
typedef bool MT_strPicture_StringFormatterJc(StringFormatterJc_s* ythis, int64 src, StringJc pict, StringJc posNegPointExp, char cFracSep, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C bool strPicture_StringFormatterJc_F(StringFormatterJc_s* ythis, int64 src, StringJc pict, StringJc posNegPointExp, char cFracSep, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C bool strPicture_StringFormatterJc(StringFormatterJc_s* ythis, int64 src, StringJc pict, StringJc posNegPointExp, char cFracSep, ThCxt* _thCxt);

/**Writes a float value in technical representation with exponent as short char a..T*/
typedef int32 MT_addFloatPicture_StringFormatterJc(StringFormatterJc_s* ythis, float src, StringJc pict, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 addFloatPicture_StringFormatterJc_F(StringFormatterJc_s* ythis, float src, StringJc pict, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 addFloatPicture_StringFormatterJc(StringFormatterJc_s* ythis, float src, StringJc pict, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_StringFormatterJc[]; //marker for methodTable check
typedef struct Mtbl_StringFormatterJc_t
{ MtblHeadJc head;
  MT_getContent_StringFormatterJc* getContent;
  MT_setDecimalSeparator_StringFormatterJc* setDecimalSeparator;
  MT_reset_StringFormatterJc* reset;
  MT_end_StringFormatterJc* end;
  MT_pos_StringFormatterJc* pos;
  MT_length_StringFormatterJc* length;
  MT_getPos_StringFormatterJc* getPos;
  MT_add_S_StringFormatterJc* add_S;
  MT_add_cY_StringFormatterJc* add_cY;
  MT_insert_S_StringFormatterJc* insert_S;
  MT_overwrite_StringFormatterJc* overwrite;
  MT_insert_StringFormatterJc* insert;
  MT_setInsertMode_StringFormatterJc* setInsertMode;
  MT_addStringLine_StringFormatterJc* addStringLine;
  MT_addHexLine_StringFormatterJc* addHexLine;
  MT_addHexWord_StringFormatterJc* addHexWord;
  MT_addHexWord__StringFormatterJc* addHexWord_;
  MT_addHex_StringFormatterJc* addHex;
  MT_addBinary_StringFormatterJc* addBinary;
  MT_prepareBufferPos_StringFormatterJc* prepareBufferPos;
  MT_addHex44_StringFormatterJc* addHex44;
  MT_addFloat_StringFormatterJc* addFloat;
  MT_add_c_StringFormatterJc* add_c;
  MT_addDate_StringFormatterJc* addDate;
  MT_setAt_StringFormatterJc* setAt;
  MT_addint_StringFormatterJc* addint;
  MT_addIntPicture_StringFormatterJc* addIntPicture;
  MT_strPicture_StringFormatterJc* strPicture;
  MT_addFloatPicture_StringFormatterJc* addFloatPicture;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_StringFormatterJc;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class StringFormatterJc : private StringFormatterJc_s
{ public:

  virtual struct StringFormatterJc_t* addBinary(int32 value, StringJcpp sPicture, StringJcpp sBitCharLo, StringJcpp sBitCharHi){  return addBinary_StringFormatterJc_F(this, value, sPicture, sBitCharLo, sBitCharHi,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* addDate(struct DateJc_t* date, struct SimpleDateFormatJc_t* format){  return addDate_StringFormatterJc_F(this, date, format,  null/*_thCxt*/); }

  virtual int32 addFloatPicture(float src, StringJcpp pict){  return addFloatPicture_StringFormatterJc_F(this, src, pict,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* addFloat(double value, int32 digitsBeforePoint, int32 digitsAfterPoint){  return addFloat_StringFormatterJc_F(this, value, digitsBeforePoint, digitsAfterPoint,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* addHex44(int64 value){  return addHex44_StringFormatterJc_F(this, value,  null/*_thCxt*/); }

  virtual StringFormatterJc& addHexLine(int8_Y* data, int32 idx, int32 nrofBytes, int16 mode){ addHexLine_StringFormatterJc_F(this, data, idx, nrofBytes, mode,  null/*_thCxt*/);  return *this; }

  StringJc addHexLn(int8_Y* data, int32 length, int32 idxStart){  return addHexLn_StringFormatterJc(data, length, idxStart,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* addHexWord(int8_Y* data, int32 idx, int16 mode){  return addHexWord_StringFormatterJc_F(this, data, idx, mode,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* addHexWord_(int8_Y* data, int32 idx, int16 mode){  return addHexWord__StringFormatterJc_F(this, data, idx, mode,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* addHex(int64 value, int32 nrofDigits){  return addHex_StringFormatterJc_F(this, value, nrofDigits,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* addIntPicture(int64 nr, StringJcpp sPict){  return addIntPicture_StringFormatterJc_F(this, nr, sPict,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* addStringLine(int8_Y* data, int32 idx, int32 nrofBytes, StringJcpp charsetName){  return addStringLine_StringFormatterJc_F(this, data, idx, nrofBytes, charsetName,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* add(StringJcpp str){  return add_S_StringFormatterJc_F(this, str,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* add(char_Y* str){  return add_cY_StringFormatterJc_F(this, str,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* add(char ch){  return add_c_StringFormatterJc_F(this, ch,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* addint(int64 nr, StringJcpp sPict){  return addint_StringFormatterJc_F(this, nr, sPict,  null/*_thCxt*/); }

  StringFormatterJc(StringJcpp str){ init_ObjectJc(&this->base.object, sizeof(StringFormatterJc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_StringFormatterJc_s, 0); ctorO_S_StringFormatterJc(&this->base.object, str,  null/*_thCxt*/); }

  StringFormatterJc(struct StringBuilderJc_t* buffer){ init_ObjectJc(&this->base.object, sizeof(StringFormatterJc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_StringFormatterJc_s, 0); ctorO_Sb_StringFormatterJc(&this->base.object, buffer,  null/*_thCxt*/); }

  StringFormatterJc(){ init_ObjectJc(&this->base.object, sizeof(StringFormatterJc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_StringFormatterJc_s, 0); ctorO_StringFormatterJc(&this->base.object,  null/*_thCxt*/); }

  StringFormatterJc(int32 length){ init_ObjectJc(&this->base.object, sizeof(StringFormatterJc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_StringFormatterJc_s, 0); ctorO_i_StringFormatterJc(&this->base.object, length,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* end(){  return end_StringFormatterJc_F(this,  null/*_thCxt*/); }

  virtual StringJc getContent(){  return getContent_StringFormatterJc_F(this,  null/*_thCxt*/); }

  virtual int32 getPos(){  return getPos_StringFormatterJc_F(this,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* insert(StringJcpp str){  return insert_S_StringFormatterJc_F(this, str,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* insert(){  return insert_StringFormatterJc_F(this,  null/*_thCxt*/); }

  virtual int32 length(){  return length_StringFormatterJc_F(this,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* overwrite(){  return overwrite_StringFormatterJc_F(this,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* pos(int32 newPos){  return pos_StringFormatterJc_F(this, newPos,  null/*_thCxt*/); }

  virtual void prepareBufferPos(int32 nrofChars){ prepareBufferPos_StringFormatterJc_F(this, nrofChars,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* reset(){  return reset_StringFormatterJc_F(this,  null/*_thCxt*/); }

  virtual struct StringFormatterJc_t* setAt(int32 pos, char ch){  return setAt_StringFormatterJc_F(this, pos, ch,  null/*_thCxt*/); }

  virtual void setDecimalSeparator(char sep){ setDecimalSeparator_StringFormatterJc_F(this, sep,  null/*_thCxt*/); }

  virtual bool setInsertMode(bool insert){  return setInsertMode_StringFormatterJc_F(this, insert,  null/*_thCxt*/); }

  virtual bool strPicture(int64 src, StringJcpp pict, StringJcpp posNegPointExp, char cFracSep){  return strPicture_StringFormatterJc_F(this, src, pict, posNegPointExp, cFracSep,  null/*_thCxt*/); }

  virtual StringJc toString(){  return toString_StringFormatterJc_F(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__J1c_StringFormatterJc_h__
