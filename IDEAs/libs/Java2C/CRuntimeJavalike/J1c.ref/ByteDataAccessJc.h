/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __J1c_ByteDataAccessJc_h__
#define __J1c_ByteDataAccessJc_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef ByteDataAccessJcREFDEF
  #define ByteDataAccessJcREFDEF
  typedef struct ByteDataAccessJcREF_t { ObjectRefValuesJc refbase; struct ByteDataAccessJc_t* ref; } ByteDataAccessJcREF;
#endif


/* J2C: includes *********************************************************/
#include "Jc/StringJc.h"  //embedded type in class data


/*@CLASS_C ByteDataAccessJc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct ByteDataAccessJc_t
{ 
  union { ObjectJc object; } base; 
  int8_Y* data;   /*The array containing the binary data.*/
  int32 idxBegin;   /*Index of the beginning of the actual element in data*/
  int32 idxEnd;   /*Index of the end of the actual element in data*/
  bool bExpand; 
  int32 idxFirstChild;   /*Index of the first child element, it is after the head.*/
  int32 idxCurrentChild;   /*Index within the at position of the current child element.*/
  int32 idxCurrentChildEnd;   /*Index of the currents child end.*/
  bool bBigEndian;   /*Flag is set or get data in big endian or little endian (if false)*/
  ByteDataAccessJcREF parent;   /*The parent XmlBinCodeElement, necessary only for add() and expand().*/
  ByteDataAccessJcREF currentChild;   /*The child on end to add() something*/
  StringJc charset;   /*The charset.*/
} ByteDataAccessJc_s;
  

#define sizeof_ByteDataAccessJc_s sizeof(ByteDataAccessJc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef ByteDataAccessJcREFDEF
  #define ByteDataAccessJcREFDEF
  typedef struct ByteDataAccessJcREF_t { ObjectRefValuesJc refbase; struct ByteDataAccessJc_t* ref; } ByteDataAccessJcREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct ByteDataAccessJc_X_t { ObjectArrayJc head; ByteDataAccessJcREF data[50]; } ByteDataAccessJc_X;
typedef struct ByteDataAccessJc_Y_t { ObjectArrayJc head; ByteDataAccessJc_s data[50]; } ByteDataAccessJc_Y;

 extern struct ClassJc_t const reflection_ByteDataAccessJc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_ByteDataAccessJc(OBJP) { CONST_ObjectJc(sizeof(ByteDataAccessJc_s), OBJP, &reflection_ByteDataAccessJc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_ByteDataAccessJc_F(ObjectJc* othis, ThCxt* _thCxt);


#define _version__ByteDataAccessJc 0x20101231  /*The version.*/
#define kEndOfElements_ByteDataAccessJc 0  /*Definition of the code of end of information, return from next()*/
 extern const int8 kNothing_ByteDataAccessJc;   /*Definition of the code of no information, return from next()*/
#define kText_ByteDataAccessJc 1  /*Aussage: es ist ein String (XML: text()), kein Tag im String*/
#define kUndefined_ByteDataAccessJc -0x3f  /*coding: the value is undefined*/
#define kIdxElementCode_ByteDataAccessJc 0  /*Index in the data, position of element code*/


/**Constructs a new empty instance. Use assign() to work with it. */
METHOD_C struct ByteDataAccessJc_t* ctorO_ByteDataAccessJc(ObjectJc* othis, ThCxt* _thCxt);

/**Conversion of characters in range 0x80..0xbf */
METHOD_C int32 getLengthHead_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Sets the elements data to the default empty data.*/
typedef void MT_specifyEmptyDefaultData_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void specifyEmptyDefaultData_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void specifyEmptyDefaultData_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Specifies the length of the head data*/
typedef int32 MT_specifyLengthElementHead_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 specifyLengthElementHead_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 specifyLengthElementHead_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Returns the actual length of the whole element presenting with this class.*/
typedef int32 MT_specifyLengthElement_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 specifyLengthElement_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 specifyLengthElement_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Returns the length of a child element at current position specified in  the derivated class.*/
typedef int32 MT_specifyLengthCurrentChildElement_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 specifyLengthCurrentChildElement_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 specifyLengthCurrentChildElement_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Assigns new data to this element*/
typedef void MT_assignData_iYi_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int8_Y* data, int32 length, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void assignData_iYi_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, int8_Y* data, int32 length, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void assignData_iYi_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int8_Y* data, int32 length, ThCxt* _thCxt);

/**Assigns new data to this element at given index in data*/
typedef void MT_assignData_iYii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int8_Y* data, int32 lengthData, int32 index, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void assignData_iYii_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, int8_Y* data, int32 lengthData, int32 index, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void assignData_iYii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int8_Y* data, int32 lengthData, int32 index, ThCxt* _thCxt);

/**Initializes a top level, the data are considered as non initalized.*/
METHOD_C void assignEmpty_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int8_Y* data, ThCxt* _thCxt);

/**Remove all children*/
METHOD_C void removeChildren_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Remove all connections. Especially for children. */
METHOD_C void detach_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Assigns this element to the same position in data, but it is another view.*/
METHOD_C void assignCasted_i_ByteDataAccessJc(ByteDataAccessJc_s* ythis, struct ByteDataAccessJc_t* src, int32 offsetCastToInput, int32 lengthDst, ThCxt* _thCxt);

/**Older form, see protected method {@link assignCasted_i(ByteDataAccess, int )}*/
METHOD_C void assignDowncast_i_ByteDataAccessJc(ByteDataAccessJc_s* ythis, struct ByteDataAccessJc_t* input, ThCxt* _thCxt);

/**assigns the element to the current child position of parent,*/
METHOD_C void assignAsChild_ByteDataAccessJc(ByteDataAccessJc_s* ythis, struct ByteDataAccessJc_t* parent, ThCxt* _thCxt);

/**assigns the element to the given position of the parents data to present a child of the parent*/
METHOD_C void assignAtIndex_iiXX_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxChildInParent, int32 lengthChild, struct ByteDataAccessJc_t* parent, ThCxt* _thCxt);

/**assigns the element to the given position of the parents data to present a child of the parent.*/
METHOD_C void assignAtIndex_iXX_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxChildInParent, struct ByteDataAccessJc_t* parent, ThCxt* _thCxt);

/**This method is called inside all assign...() methods.*/
typedef void MT_assignDataToFixChilds_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void assignDataToFixChilds_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void assignDataToFixChilds_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**adds an child Element after the current child or as first child after head.*/
METHOD_C bool addChild_ByteDataAccessJc(ByteDataAccessJc_s* ythis, struct ByteDataAccessJc_t* child, ThCxt* _thCxt);

/**remove the current child to assign another current child instead of the first one.*/
METHOD_C void removeChild_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**sets the idxCurrentChild to the known idxCurrentChildEnd.*/
METHOD_C void setIdxtoNextCurrentChild_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**sets the idxCurrentChildEnd and idxEnd*/
METHOD_C bool setIdxCurrentChildEnd_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 nrofBytes, ThCxt* _thCxt);

/**Adds a child Element at current end of data to write data.*/
METHOD_C void addChildEmpty_ByteDataAccessJc(ByteDataAccessJc_s* ythis, struct ByteDataAccessJc_t* child, ThCxt* _thCxt);

/**Notifies, that a child is added*/
typedef void MT_notifyAddChild_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void notifyAddChild_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void notifyAddChild_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Increments the idxEnd and the idxCurrentChildEnd if a new child is added*/
METHOD_C void correctCurrentChildEnd_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxEndNew, ThCxt* _thCxt);

/**Increments the idxEnd if a new child is added*/
METHOD_C void correctIdxChildEnd_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxCurrentChildEndNew, ThCxt* _thCxt);

/**Expands the end index of the parent, it means the management*/
METHOD_C void expandParent_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Adds a child for 1 integer value without a child instance, but returns the value as integer.*/
METHOD_C int64 getChildInteger_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 nrofBytes, ThCxt* _thCxt);

/**Adds a child for 1 float value without a child instance, but returns the value as integer.*/
METHOD_C float getChildFloat_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Adds a child for 1 double value without a child instance, but returns the value as integer.*/
METHOD_C double getChildDouble_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Adds a child for 1 integer value without a child instance, and sets the value as integer.*/
METHOD_C void addChildInteger_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 nrofBytes, int64 value, ThCxt* _thCxt);

/**Adds a child for 1 integer value without a child instance, and sets the value as integer.*/
METHOD_C void addChildFloat_ByteDataAccessJc(ByteDataAccessJc_s* ythis, float value, ThCxt* _thCxt);

/**Adds a child for a String value without a child instance, but returns the value as String.*/
METHOD_C StringJc getChildString_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 nrofBytes, ThCxt* _thCxt);

/**Adds a child with String value.*/
METHOD_C void addChildString_SSb_ByteDataAccessJc(ByteDataAccessJc_s* ythis, StringJc value, StringJc sEncoding, bool preventCtrlChars, ThCxt* _thCxt);

/**Adds a child with String value.*/
METHOD_C void addChildString_S_ByteDataAccessJc(ByteDataAccessJc_s* ythis, StringJc value, ThCxt* _thCxt);

/**Adds a child with String value.*/
METHOD_C void addChildString_tS_ByteDataAccessJc(ByteDataAccessJc_s* ythis, StringJc value, StringJc sEncoding, ThCxt* _thCxt);

/**Adds a child with String value.*/
METHOD_C void addChildString_t_ByteDataAccessJc(ByteDataAccessJc_s* ythis, StringJc value, ThCxt* _thCxt);

/**Writes a String into data with given color.*/
METHOD_C int32 addText_ByteDataAccessJc(ByteDataAccessJc_s* ythis, StringJc ss, ThCxt* _thCxt);

/**starts the calling loop of next().*/
METHOD_C void rewind_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Sets the data index to the position after the current child element and returns its code.<br>*/
METHOD_C int32 next_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**returns true if the given number of bytes is sufficing in the data from position of next child.*/
METHOD_C bool sufficingBytesForNextChild_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 nrofBytes, ThCxt* _thCxt);

/**returns the number number of bytes there are max available from position of a next current child.*/
METHOD_C int32 getMaxNrofBytesForNextChild_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**returns the number number of bytes there are max available from position of the current child.*/
METHOD_C int32 getMaxNrofBytes_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Returns the length of the existing actual element.*/
METHOD_C int32 getLength_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Returns the length of the data.*/
METHOD_C int32 getLengthTotal_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Returns the data buffer itself*/
METHOD_C int8_Y* getData_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Returns the position of the Element data in the assigned buffer.*/
METHOD_C int32 getPositionInBuffer_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Returns the position of the current child in the assigned buffer.*/
METHOD_C int32 getPositionNextChildInBuffer_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Returns the length of the current child element.*/
METHOD_C int32 getLengthCurrentChildElement_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Sets the length of the current child element after calling next().*/
METHOD_C void setLengthCurrentChildElement_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 lengthOfCurrentChild, ThCxt* _thCxt);

/**Sets the length of the current element, considering all children.*/
METHOD_C void setLengthElement_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 length, ThCxt* _thCxt);

/**Returns true if the current child element represents a TEXT(), direct ASCII chars,*/
METHOD_C bool isTextByte_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int8 nn, ThCxt* _thCxt);

/**Returns the current string or null on end*/
METHOD_C StringJc getText_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);

/**Returns a String from the given position inside the actual element .*/
typedef StringJc MT_getString_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int32 nmax, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C StringJc getString_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, int32 idx, int32 nmax, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C StringJc getString_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int32 nmax, ThCxt* _thCxt);

/**Sets a String to the the given position inside the actual element .*/
typedef int32 MT_setString_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int32 nmax, StringJc ss, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 setString_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, int32 idx, int32 nmax, StringJc ss, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 setString_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int32 nmax, StringJc ss, ThCxt* _thCxt);

/**Sets the big or little endian mode.*/
typedef void MT_setBigEndian_ByteDataAccessJc(ByteDataAccessJc_s* ythis, bool val, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void setBigEndian_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, bool val, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void setBigEndian_ByteDataAccessJc(ByteDataAccessJc_s* ythis, bool val, ThCxt* _thCxt);

/**Returns the content of 1 to 8 bytes inside the actual element as a long number,*/
METHOD_C int64 _getLong_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxInChild, int32 nrofBytesAndSign, ThCxt* _thCxt);

/**sets the content of 1 to 8 bytes inside the actual element as a long number,*/
METHOD_C void _setLong_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int32 nrofBytes, int64 val, ThCxt* _thCxt);

/**sets the content inside the acutal element with the character bytes from the given String.*/
METHOD_C StringJc _getString_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int32 nrofBytes, ThCxt* _thCxt);

/**sets the content inside the actual element with the character bytes from the given String.*/
METHOD_C void _setString_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int32 nrofBytes, StringJc value, StringJc sEncoding, bool preventCtrlChars, ThCxt* _thCxt);

/**copies some data to a int[], primarily to debug a content.*/
METHOD_C void copyData_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32_Y* dst, ThCxt* _thCxt);

/**Gets a float value from the content of 4 byte*/
METHOD_C float getFloat_i_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, ThCxt* _thCxt);

METHOD_C double getDouble_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, ThCxt* _thCxt);

METHOD_C int64 getInt64_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, ThCxt* _thCxt);

/**Returns the content of 4 bytes inside the actual element as a integer number between -2147483648 and 2147483647,*/
METHOD_C int32 getInt32_i_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, ThCxt* _thCxt);

METHOD_C int32 getUint32_i_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, ThCxt* _thCxt);

/**Returns the content of 2 bytes as a positive nr between 0..65535, big-endian*/
METHOD_C int32 getUint16_i_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, ThCxt* _thCxt);

/**Returns the content of 2 bytes as a positive nr between 0..65535 inside the actual element.*/
METHOD_C int16 getInt16_i_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, ThCxt* _thCxt);

/**Returns the content of 1 bytes as ASCII*/
METHOD_C char getChar_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, ThCxt* _thCxt);

/**Returns the content of 1 bytes as a positive or negative nr between -128..127*/
METHOD_C int8 getInt8_i_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, ThCxt* _thCxt);

/**Returns the content of 1 bytes as a positive or negative nr between -128..127*/
METHOD_C int32 getUint8_i_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, ThCxt* _thCxt);

METHOD_C int32 getUint32_iii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);

METHOD_C int32 getInt32_iii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);

METHOD_C int32 getInt16_iii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);

METHOD_C int32 getInt8_iii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);

typedef int32 MT_getUint16_iii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 getUint16_iii_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 getUint16_iii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);

typedef int32 MT_getUint8_iii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 getUint8_iii_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 getUint8_iii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);

typedef float MT_getFloat_iii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C float getFloat_iii_ByteDataAccessJc_F(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C float getFloat_iii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, ThCxt* _thCxt);

/**Set the content of 4 byte from a float variable*/
METHOD_C void setFloat_if_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, float value, ThCxt* _thCxt);

/**Set the content of 8 byte from a double variable*/
METHOD_C void setDouble_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, double value, ThCxt* _thCxt);

/**Set the content of 4 bytes as a integer number between -2147483648 and 2147483647,*/
METHOD_C void setInt32_ii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int32 value, ThCxt* _thCxt);

/**Set the content of 1 bytes as a positive nr between 0..255, big- or little-endian.*/
METHOD_C void setUint8_ii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int32 value, ThCxt* _thCxt);

/**Set the content of 2 bytes as a positive nr between 0..65535, big- or little-endian.*/
METHOD_C void setUint16_ii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int32 value, ThCxt* _thCxt);

/**Set the content of 4 bytes as a positive nr between 0..2pow32-1, big- or little-endian.*/
METHOD_C void setUint32_il_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int64 value, ThCxt* _thCxt);

/**Set the content of 2 bytes from an integer between -32768..32768,*/
METHOD_C void setInt16_ii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int32 value, ThCxt* _thCxt);

/**Set the content of 1 bytes as a positive nr between 0..256.*/
METHOD_C void setInt8_ii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idx, int32 value, ThCxt* _thCxt);

METHOD_C void setUint32_iiii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, int32 val, ThCxt* _thCxt);

METHOD_C void setInt32_iiii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, int32 val, ThCxt* _thCxt);

METHOD_C void setInt16_iiii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, int32 val, ThCxt* _thCxt);

METHOD_C void setInt8_iiii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, int32 val, ThCxt* _thCxt);

METHOD_C void setUint16_iiii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, int32 val, ThCxt* _thCxt);

METHOD_C void setUint8_iiii_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, int32 val, ThCxt* _thCxt);

METHOD_C void setFloat_iiif_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 idxBytes, int32 idxArray, int32 lengthArray, float val, ThCxt* _thCxt);

/**Copies the data into a byte[]*/
METHOD_C void copyDataFrom_ByteDataAccessJc(ByteDataAccessJc_s* ythis, struct ByteDataAccessJc_t* src, ThCxt* _thCxt);

/**Counts the idxChild by given index, idxChild is ByteCount from idxBegin*/
METHOD_C void elementAt_ByteDataAccessJc(ByteDataAccessJc_s* ythis, int32 indexObjectArray, ThCxt* _thCxt);

METHOD_C struct ByteDataAccessJc_t* getCurrentChild_ByteDataAccessJc(ByteDataAccessJc_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_ByteDataAccessJc[]; //marker for methodTable check
typedef struct Mtbl_ByteDataAccessJc_t
{ MtblHeadJc head;
  MT_specifyEmptyDefaultData_ByteDataAccessJc* specifyEmptyDefaultData;
  MT_specifyLengthElementHead_ByteDataAccessJc* specifyLengthElementHead;
  MT_specifyLengthElement_ByteDataAccessJc* specifyLengthElement;
  MT_specifyLengthCurrentChildElement_ByteDataAccessJc* specifyLengthCurrentChildElement;
  MT_assignData_iYi_ByteDataAccessJc* assignData_iYi;
  MT_assignData_iYii_ByteDataAccessJc* assignData_iYii;
  MT_assignDataToFixChilds_ByteDataAccessJc* assignDataToFixChilds;
  MT_notifyAddChild_ByteDataAccessJc* notifyAddChild;
  MT_getString_ByteDataAccessJc* getString;
  MT_setString_ByteDataAccessJc* setString;
  MT_setBigEndian_ByteDataAccessJc* setBigEndian;
  MT_getUint16_iii_ByteDataAccessJc* getUint16_iii;
  MT_getUint8_iii_ByteDataAccessJc* getUint8_iii;
  MT_getFloat_iii_ByteDataAccessJc* getFloat_iii;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_ByteDataAccessJc;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class ByteDataAccessJc : private ByteDataAccessJc_s
{ public:

  int64 _getLong(int32 idxInChild, int32 nrofBytesAndSign){  return _getLong_ByteDataAccessJc(this, idxInChild, nrofBytesAndSign,  null/*_thCxt*/); }

  StringJc _getString(int32 idx, int32 nrofBytes){  return _getString_ByteDataAccessJc(this, idx, nrofBytes,  null/*_thCxt*/); }

  void _setLong(int32 idx, int32 nrofBytes, int64 val){ _setLong_ByteDataAccessJc(this, idx, nrofBytes, val,  null/*_thCxt*/); }

  void _setString(int32 idx, int32 nrofBytes, StringJcpp value, StringJcpp sEncoding, bool preventCtrlChars){ _setString_ByteDataAccessJc(this, idx, nrofBytes, value, sEncoding, preventCtrlChars,  null/*_thCxt*/); }

  void addChildEmpty(struct ByteDataAccessJc_t* child){ addChildEmpty_ByteDataAccessJc(this, child,  null/*_thCxt*/); }

  void addChildFloat(float value){ addChildFloat_ByteDataAccessJc(this, value,  null/*_thCxt*/); }

  void addChildInteger(int32 nrofBytes, int64 value){ addChildInteger_ByteDataAccessJc(this, nrofBytes, value,  null/*_thCxt*/); }

  void addChildString(StringJcpp value, StringJcpp sEncoding, bool preventCtrlChars){ addChildString_SSb_ByteDataAccessJc(this, value, sEncoding, preventCtrlChars,  null/*_thCxt*/); }

  void addChildString(StringJcpp value){ addChildString_S_ByteDataAccessJc(this, value,  null/*_thCxt*/); }

  void addChildString(StringJc value, StringJcpp sEncoding){ addChildString_tS_ByteDataAccessJc(this, value, sEncoding,  null/*_thCxt*/); }

  void addChildString(StringJc value){ addChildString_t_ByteDataAccessJc(this, value,  null/*_thCxt*/); }

  bool addChild(struct ByteDataAccessJc_t* child){  return addChild_ByteDataAccessJc(this, child,  null/*_thCxt*/); }

  int32 addText(StringJcpp ss){  return addText_ByteDataAccessJc(this, ss,  null/*_thCxt*/); }

  void assignAsChild(struct ByteDataAccessJc_t* parent){ assignAsChild_ByteDataAccessJc(this, parent,  null/*_thCxt*/); }

  void assignAtIndex(int32 idxChildInParent, struct ByteDataAccessJc_t* parent){ assignAtIndex_iXX_ByteDataAccessJc(this, idxChildInParent, parent,  null/*_thCxt*/); }

  void assignAtIndex(int32 idxChildInParent, int32 lengthChild, struct ByteDataAccessJc_t* parent){ assignAtIndex_iiXX_ByteDataAccessJc(this, idxChildInParent, lengthChild, parent,  null/*_thCxt*/); }

  void assignCasted_i(struct ByteDataAccessJc_t* src, int32 offsetCastToInput, int32 lengthDst){ assignCasted_i_ByteDataAccessJc(this, src, offsetCastToInput, lengthDst,  null/*_thCxt*/); }

  virtual void assignDataToFixChilds(){ assignDataToFixChilds_ByteDataAccessJc_F(this,  null/*_thCxt*/); }

  virtual void assignData(int8_Y* data, int32 length){ assignData_iYi_ByteDataAccessJc_F(this, data, length,  null/*_thCxt*/); }

  virtual void assignData(int8_Y* data, int32 lengthData, int32 index){ assignData_iYii_ByteDataAccessJc_F(this, data, lengthData, index,  null/*_thCxt*/); }

  void assignDowncast_i(struct ByteDataAccessJc_t* input){ assignDowncast_i_ByteDataAccessJc(this, input,  null/*_thCxt*/); }

  void assignEmpty(int8_Y* data){ assignEmpty_ByteDataAccessJc(this, data,  null/*_thCxt*/); }

  void copyDataFrom(struct ByteDataAccessJc_t* src){ copyDataFrom_ByteDataAccessJc(this, src,  null/*_thCxt*/); }

  void copyData(int32_Y* dst){ copyData_ByteDataAccessJc(this, dst,  null/*_thCxt*/); }

  void correctCurrentChildEnd(int32 idxEndNew){ correctCurrentChildEnd_ByteDataAccessJc(this, idxEndNew,  null/*_thCxt*/); }

  void correctIdxChildEnd(int32 idxCurrentChildEndNew){ correctIdxChildEnd_ByteDataAccessJc(this, idxCurrentChildEndNew,  null/*_thCxt*/); }

  ByteDataAccessJc(){ init_ObjectJc(&this->base.object, sizeof(ByteDataAccessJc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_ByteDataAccessJc_s, 0); ctorO_ByteDataAccessJc(&this->base.object,  null/*_thCxt*/); }

  void detach(){ detach_ByteDataAccessJc(this,  null/*_thCxt*/); }

  void elementAt(int32 indexObjectArray){ elementAt_ByteDataAccessJc(this, indexObjectArray,  null/*_thCxt*/); }

  void expandParent(){ expandParent_ByteDataAccessJc(this,  null/*_thCxt*/); }

  char getChar(int32 idx){  return getChar_ByteDataAccessJc(this, idx,  null/*_thCxt*/); }

  double getChildDouble(){  return getChildDouble_ByteDataAccessJc(this,  null/*_thCxt*/); }

  float getChildFloat(){  return getChildFloat_ByteDataAccessJc(this,  null/*_thCxt*/); }

  int64 getChildInteger(int32 nrofBytes){  return getChildInteger_ByteDataAccessJc(this, nrofBytes,  null/*_thCxt*/); }

  StringJc getChildString(int32 nrofBytes){  return getChildString_ByteDataAccessJc(this, nrofBytes,  null/*_thCxt*/); }

  struct ByteDataAccessJc_t* getCurrentChild(){  return getCurrentChild_ByteDataAccessJc(this,  null/*_thCxt*/); }

  int8_Y* getData(){  return getData_ByteDataAccessJc(this,  null/*_thCxt*/); }

  double getDouble(int32 idx){  return getDouble_ByteDataAccessJc(this, idx,  null/*_thCxt*/); }

  float getFloat(int32 idx){  return getFloat_i_ByteDataAccessJc(this, idx,  null/*_thCxt*/); }

  virtual float getFloat(int32 idxBytes, int32 idxArray, int32 lengthArray){  return getFloat_iii_ByteDataAccessJc_F(this, idxBytes, idxArray, lengthArray,  null/*_thCxt*/); }

  int16 getInt16(int32 idx){  return getInt16_i_ByteDataAccessJc(this, idx,  null/*_thCxt*/); }

  int32 getInt16(int32 idxBytes, int32 idxArray, int32 lengthArray){  return getInt16_iii_ByteDataAccessJc(this, idxBytes, idxArray, lengthArray,  null/*_thCxt*/); }

  int32 getInt32(int32 idx){  return getInt32_i_ByteDataAccessJc(this, idx,  null/*_thCxt*/); }

  int32 getInt32(int32 idxBytes, int32 idxArray, int32 lengthArray){  return getInt32_iii_ByteDataAccessJc(this, idxBytes, idxArray, lengthArray,  null/*_thCxt*/); }

  int64 getInt64(int32 idx){  return getInt64_ByteDataAccessJc(this, idx,  null/*_thCxt*/); }

  int8 getInt8(int32 idx){  return getInt8_i_ByteDataAccessJc(this, idx,  null/*_thCxt*/); }

  int32 getInt8(int32 idxBytes, int32 idxArray, int32 lengthArray){  return getInt8_iii_ByteDataAccessJc(this, idxBytes, idxArray, lengthArray,  null/*_thCxt*/); }

  int32 getLengthCurrentChildElement(){  return getLengthCurrentChildElement_ByteDataAccessJc(this,  null/*_thCxt*/); }

  int32 getLengthHead(){  return getLengthHead_ByteDataAccessJc(this,  null/*_thCxt*/); }

  int32 getLengthTotal(){  return getLengthTotal_ByteDataAccessJc(this,  null/*_thCxt*/); }

  int32 getLength(){  return getLength_ByteDataAccessJc(this,  null/*_thCxt*/); }

  int32 getMaxNrofBytesForNextChild(){  return getMaxNrofBytesForNextChild_ByteDataAccessJc(this,  null/*_thCxt*/); }

  int32 getMaxNrofBytes(){  return getMaxNrofBytes_ByteDataAccessJc(this,  null/*_thCxt*/); }

  int32 getPositionInBuffer(){  return getPositionInBuffer_ByteDataAccessJc(this,  null/*_thCxt*/); }

  int32 getPositionNextChildInBuffer(){  return getPositionNextChildInBuffer_ByteDataAccessJc(this,  null/*_thCxt*/); }

  virtual StringJc getString(int32 idx, int32 nmax){  return getString_ByteDataAccessJc_F(this, idx, nmax,  null/*_thCxt*/); }

  StringJc getText(){  return getText_ByteDataAccessJc(this,  null/*_thCxt*/); }

  int32 getUint16(int32 idx){  return getUint16_i_ByteDataAccessJc(this, idx,  null/*_thCxt*/); }

  virtual int32 getUint16(int32 idxBytes, int32 idxArray, int32 lengthArray){  return getUint16_iii_ByteDataAccessJc_F(this, idxBytes, idxArray, lengthArray,  null/*_thCxt*/); }

  int32 getUint32(int32 idx){  return getUint32_i_ByteDataAccessJc(this, idx,  null/*_thCxt*/); }

  int32 getUint32(int32 idxBytes, int32 idxArray, int32 lengthArray){  return getUint32_iii_ByteDataAccessJc(this, idxBytes, idxArray, lengthArray,  null/*_thCxt*/); }

  int32 getUint8(int32 idx){  return getUint8_i_ByteDataAccessJc(this, idx,  null/*_thCxt*/); }

  virtual int32 getUint8(int32 idxBytes, int32 idxArray, int32 lengthArray){  return getUint8_iii_ByteDataAccessJc_F(this, idxBytes, idxArray, lengthArray,  null/*_thCxt*/); }

  bool isTextByte(int8 nn){  return isTextByte_ByteDataAccessJc(this, nn,  null/*_thCxt*/); }

  int32 next(){  return next_ByteDataAccessJc(this,  null/*_thCxt*/); }

  virtual void notifyAddChild(){ notifyAddChild_ByteDataAccessJc_F(this,  null/*_thCxt*/); }

  void removeChild(){ removeChild_ByteDataAccessJc(this,  null/*_thCxt*/); }

  void removeChildren(){ removeChildren_ByteDataAccessJc(this,  null/*_thCxt*/); }

  void rewind(){ rewind_ByteDataAccessJc(this,  null/*_thCxt*/); }

  virtual void setBigEndian(bool val){ setBigEndian_ByteDataAccessJc_F(this, val,  null/*_thCxt*/); }

  void setDouble(int32 idx, double value){ setDouble_ByteDataAccessJc(this, idx, value,  null/*_thCxt*/); }

  void setFloat(int32 idx, float value){ setFloat_if_ByteDataAccessJc(this, idx, value,  null/*_thCxt*/); }

  void setFloat(int32 idxBytes, int32 idxArray, int32 lengthArray, float val){ setFloat_iiif_ByteDataAccessJc(this, idxBytes, idxArray, lengthArray, val,  null/*_thCxt*/); }

  bool setIdxCurrentChildEnd(int32 nrofBytes){  return setIdxCurrentChildEnd_ByteDataAccessJc(this, nrofBytes,  null/*_thCxt*/); }

  void setIdxtoNextCurrentChild(){ setIdxtoNextCurrentChild_ByteDataAccessJc(this,  null/*_thCxt*/); }

  void setInt16(int32 idx, int32 value){ setInt16_ii_ByteDataAccessJc(this, idx, value,  null/*_thCxt*/); }

  void setInt16(int32 idxBytes, int32 idxArray, int32 lengthArray, int32 val){ setInt16_iiii_ByteDataAccessJc(this, idxBytes, idxArray, lengthArray, val,  null/*_thCxt*/); }

  void setInt32(int32 idx, int32 value){ setInt32_ii_ByteDataAccessJc(this, idx, value,  null/*_thCxt*/); }

  void setInt32(int32 idxBytes, int32 idxArray, int32 lengthArray, int32 val){ setInt32_iiii_ByteDataAccessJc(this, idxBytes, idxArray, lengthArray, val,  null/*_thCxt*/); }

  void setInt8(int32 idx, int32 value){ setInt8_ii_ByteDataAccessJc(this, idx, value,  null/*_thCxt*/); }

  void setInt8(int32 idxBytes, int32 idxArray, int32 lengthArray, int32 val){ setInt8_iiii_ByteDataAccessJc(this, idxBytes, idxArray, lengthArray, val,  null/*_thCxt*/); }

  void setLengthCurrentChildElement(int32 lengthOfCurrentChild){ setLengthCurrentChildElement_ByteDataAccessJc(this, lengthOfCurrentChild,  null/*_thCxt*/); }

  void setLengthElement(int32 length){ setLengthElement_ByteDataAccessJc(this, length,  null/*_thCxt*/); }

  virtual int32 setString(int32 idx, int32 nmax, StringJcpp ss){  return setString_ByteDataAccessJc_F(this, idx, nmax, ss,  null/*_thCxt*/); }

  void setUint16(int32 idx, int32 value){ setUint16_ii_ByteDataAccessJc(this, idx, value,  null/*_thCxt*/); }

  void setUint16(int32 idxBytes, int32 idxArray, int32 lengthArray, int32 val){ setUint16_iiii_ByteDataAccessJc(this, idxBytes, idxArray, lengthArray, val,  null/*_thCxt*/); }

  void setUint32(int32 idxBytes, int32 idxArray, int32 lengthArray, int32 val){ setUint32_iiii_ByteDataAccessJc(this, idxBytes, idxArray, lengthArray, val,  null/*_thCxt*/); }

  void setUint32(int32 idx, int64 value){ setUint32_il_ByteDataAccessJc(this, idx, value,  null/*_thCxt*/); }

  void setUint8(int32 idx, int32 value){ setUint8_ii_ByteDataAccessJc(this, idx, value,  null/*_thCxt*/); }

  void setUint8(int32 idxBytes, int32 idxArray, int32 lengthArray, int32 val){ setUint8_iiii_ByteDataAccessJc(this, idxBytes, idxArray, lengthArray, val,  null/*_thCxt*/); }

  virtual void specifyEmptyDefaultData(){ specifyEmptyDefaultData_ByteDataAccessJc_F(this,  null/*_thCxt*/); }

  virtual int32 specifyLengthCurrentChildElement(){  return specifyLengthCurrentChildElement_ByteDataAccessJc_F(this,  null/*_thCxt*/); }

  virtual int32 specifyLengthElementHead(){  return specifyLengthElementHead_ByteDataAccessJc_F(this,  null/*_thCxt*/); }

  virtual int32 specifyLengthElement(){  return specifyLengthElement_ByteDataAccessJc_F(this,  null/*_thCxt*/); }

  bool sufficingBytesForNextChild(int32 nrofBytes){  return sufficingBytesForNextChild_ByteDataAccessJc(this, nrofBytes,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__J1c_ByteDataAccessJc_h__
