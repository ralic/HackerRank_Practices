<?Java2C-stc www.vishia.org version="0.94" encoding="UTF8" ?>
Structure of translated java-file "Jc/ReflectionJc"
package org/vishia/reflect/;


const class ModifierJc; nameC=Modifier_reflectJc; header=Jc/ReflectionJc.h; argIdent=M; extends java/lang/Object
{  
  fields{
	  int %.S m_Containertype;
	  int %.S mPrimitiv;
	  int %.S kUML_LinkedList;
	  int %.S kUML_ArrayList;
	  int %.S kStaticArray;
	}
  methods {  
    isCollection+_ModifierJc, mode:static+noThCxt: boolean %..return(int %.. modifiervalue);
    isStaticArray+_ModifierJc, mode:static+noThCxt: boolean %..return(int %.. modifiervalue);
    isStaticEmbeddedArray+_ModifierJc, mode:static+noThCxt: boolean %..return(int %.. modifiervalue);
  }
}


final const class ClassJc; nameC=ClassJc; header=Jc/ReflectionJc.h; argIdent=Fd;
{  
  fields{
	  int %.S REFLECTION_void;
	  int %.S REFLECTION_int64;
	  int %.S REFLECTION_uint64;
	  int %.S REFLECTION_int32;
	  int %.S REFLECTION_uint32;
	  int %.S REFLECTION_int16;
	  int %.S REFLECTION_uint16;
	  int %.S REFLECTION_int8;
	  int %.S REFLECTION_uint8;
	  int %.S REFLECTION_int;
	  int %.S REFLECTION_uint;
	  int %.S REFLECTION_float;
	  int %.S REFLECTION_double;
	  int %.S REFLECTION_char;
	  int %.S REFLECTION_bool;
	  int %.S REFLECTION_boolean;
	  int %.S REFLECTION_String;
	  int %.S REFLECTION_bitfield;
  }
  //Note: some methods are the same as java.lang.Class see SystemJc.stc because ClassJc is a wrapper around Class
  methods {  
    getClass-_$, mode=static+noThCxt: ClassJc *.. ret(Object *.. obj);
    getName-_$, mode=noThCxt: s0 t..return();
    getEnclosingClass-_$, mode=noThCxt: ClassJc *..return();
    getDeclaredField-_$, mode=noThCxt: org.vishia.reflect.FieldJc *.. return(String t.r name);
    getDeclaredFields-_$, mode=noThCxt: org.vishia.reflect.FieldJc X$. return();
    isPrimitive-_$, mode=noThCxt: boolean %..return();
    toString-_$: String t.r return();
	}

}

final const class FieldJc; nameC=FieldJc; header=Jc/ReflectionJc.h; argIdent=Fd;
{  
  //Note: some methods are the same as java.lang.reflect.Field see ReflectionJc.stc because ClassJc is a wrapper around Class
  methods {  
    //ctorM-_$: FieldJc *..return(java/lang/reflect/Field *.. src); //a FieldJc from Field, in C it is the same.
    getClass-_$, mode:noThCxt: ClassJc *..return();
    getType-_$, mode:noThCxt: ClassJc *..return();
    getModifiers-_$, mode:noThCxt: int %..return();
		getName-_$, mode:noThCxt: s0 t..return();
    
		getBoolean-_$, mode:noThCxt: boolean %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, va_argRaw +.. idx);
    getByte-_$, mode:noThCxt: byte %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, va_argRaw +.. idx);
    getShort-_$, mode:noThCxt: short %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, va_argRaw +.. idx);
    getInt-_$, mode:noThCxt: int %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, va_argRaw +.. idx);
    getInt64-_$, mode:noThCxt: long %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, va_argRaw +.. idx);
    getFloat-_$, mode:noThCxt: float %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, va_argRaw +.. idx);
    getDouble-_$, mode:noThCxt: double %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, va_argRaw +.. idx);
    getString-_$, mode:noThCxt: String t.r return(org.vishia.bridgeC.MemSegmJc %.. obj, va_argRaw +.. idx);
    getBitfield-_$, mode:noThCxt: short %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, va_argRaw +.. idx);
    get-_$, mode:noThCxt: Object *.. return(org.vishia.bridgeC.MemSegmJc %.. obj, va_argRaw +.. idx);
    
    setBoolean-_$, mode:noThCxt: boolean %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, boolean %.. value, va_argRaw +.. idx);
    setByte-_$, mode:noThCxt: byte %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, byte %.. value, va_argRaw +.. idx);
    setShort-_$, mode:noThCxt: short %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, short %.. value, va_argRaw +.. idx);
    setInt-_$, mode:noThCxt: int %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, int %.. value, va_argRaw +.. idx);
    setInt64-_$, mode:noThCxt: long %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, long %.. value, va_argRaw +.. idx);
    setFloat-_$, mode:noThCxt: float %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, float %.. value, va_argRaw +.. idx);
    setDouble-_$, mode:noThCxt: double %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, double %.. value, va_argRaw +.. idx);
    setString-_$, mode:noThCxt: String %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, String t.r value, va_argRaw +.. idx);
    set-_$, mode:noThCxt: org.vishia.bridgeC.MemSegmJc %.. return(org.vishia.bridgeC.MemSegmJc %.. obj, Object *.. value, va_argRaw +.. idx);
    
    getStaticArraySize-_$, mode:noThCxt: int %..return();
    getArraylength-_$, mode:noThCxt: int %..return(org.vishia.bridgeC.MemSegmJc %.. obj);
    //getClassAndObj-_$, mode:noThCxt: ClassJc *..return(org.vishia.bridgeC.MemSegmJc %.. obj, org.vishia.bridgeC.MemSegmJc P%. retObjP, int %.. idx);
    getObjAndClass-_$, mode:noThCxt: org.vishia.bridgeC.MemSegmJc %..return(org.vishia.bridgeC.MemSegmJc %.. obj, ClassJc P%. retClassP, va_argRaw +.. idx);
    getType-_$, mode:noThCxt: ClassJc *..return();
  }
  
}

