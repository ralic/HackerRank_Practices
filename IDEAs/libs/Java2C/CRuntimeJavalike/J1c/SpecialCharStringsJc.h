/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __J1c_SpecialCharStringsJc_h__
#define __J1c_SpecialCharStringsJc_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/


/*@CLASS_C SpecialCharStringsJc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct SpecialCharStringsJc_t
{ 
  union { ObjectJc object; } base; 
} SpecialCharStringsJc_s;
  

#define sizeof_SpecialCharStringsJc_s sizeof(SpecialCharStringsJc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef SpecialCharStringsJcREFDEF
  #define SpecialCharStringsJcREFDEF
  typedef struct SpecialCharStringsJcREF_t { ObjectRefValuesJc refbase; struct SpecialCharStringsJc_t* ref; } SpecialCharStringsJcREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct SpecialCharStringsJc_X_t { ObjectArrayJc head; SpecialCharStringsJcREF data[50]; } SpecialCharStringsJc_X;
typedef struct SpecialCharStringsJc_Y_t { ObjectArrayJc head; SpecialCharStringsJc_s data[50]; } SpecialCharStringsJc_Y;

 extern struct ClassJc_t const reflection_SpecialCharStringsJc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_SpecialCharStringsJc(OBJP) { CONST_ObjectJc(sizeof(SpecialCharStringsJc_s), OBJP, &reflection_SpecialCharStringsJc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_SpecialCharStringsJc_F(ObjectJc* othis, ThCxt* _thCxt);


 extern const char cStartOfText_SpecialCharStringsJc;   /*The char used to code start of text. */
 extern const char cEndOfText_SpecialCharStringsJc;   /*The char used to code end of text. */


/**Default constructor. */
METHOD_C struct SpecialCharStringsJc_t* ctorO_SpecialCharStringsJc(ObjectJc* othis, ThCxt* _thCxt);

/**Resolves the given String containing some switch chars in form of backslash*/
METHOD_C StringJc resolveCircumScription_SpecialCharStringsJc(/*static*/ StringJc src, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_SpecialCharStringsJc[]; //marker for methodTable check
typedef struct Mtbl_SpecialCharStringsJc_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_SpecialCharStringsJc;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class SpecialCharStringsJc : private SpecialCharStringsJc_s
{ public:

  SpecialCharStringsJc(){ init_ObjectJc(&this->base.object, sizeof(SpecialCharStringsJc_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_SpecialCharStringsJc_s, 0); ctorO_SpecialCharStringsJc(&this->base.object,  null/*_thCxt*/); }

  StringJc resolveCircumScription(StringJcpp src){  return resolveCircumScription_SpecialCharStringsJc(src,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__J1c_SpecialCharStringsJc_h__
