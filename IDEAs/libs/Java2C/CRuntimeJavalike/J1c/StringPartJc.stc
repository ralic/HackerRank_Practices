<?Java2C-stc www.vishia.org version="0.94" encoding="UTF8" ?>
Structure of translated java-file "J1c/StringPartJc"
package org/vishia/util/;

class StringPart; nameC=StringPartJc_s; argIdent=XX; extends java/lang/Object //creationMode=P
{  
fieldIdents {
  boolean %.. bCurrentOk;
  boolean %.. bFound;
  boolean %.. bStartScan;
  int %.. bitMode;
  char %.S cEndOfText;
  char %.S cStartOfText;
  java/lang/String(instance=java/lang/String) t.. content;
  int %.. end;
  int %.. endLast;
  int %.. endMax;
  int %.. idxLastFloatNumber;
  int %.. idxLastIntegerNumber;
  int %.d mSeekBackward_;
  int %.d mSeekToLeft_;
  int %.d mSkipOverCommentInsideText_mode;
  int %.d mSkipOverCommentToEol_mode;
  int %.d mSkipOverWhitespace_mode;
  double[5] Y%. nLastFloatNumber;
  long[5] Y%. nLastIntegerNumber;
  int %.. nLineCt;
  java/lang/String(instance=java/lang/String) t.. sCommentEnd;
  java/lang/String(instance=java/lang/String) t.. sCommentStart;
  java/lang/String(instance=java/lang/String) t.. sCommentToEol;
  java/lang/String(instance=java/lang/String) t.. sLastString;
  int %.S seekBack;
  int %.d seekEnd;
  int %.d seekNormal;
  int %.S seekToLeft;
  int %.. start;
  int %.. startLast;
  int %.. startMin;
  int %.. startScan;
}
  methods {  
    assign+_S-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. content);
    assign+_XX-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(org/vishia/util/StringPart *.. src);
    assignFromEnd-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(org/vishia/util/StringPart *.. src);
    ctorO-_$, mode= ctor+static: org/vishia/util/StringPart *.. StringPartJc_s();
    ctorO+_S-_$, mode= ctor+static: org/vishia/util/StringPart *.. StringPartJc_s(java/lang/String(instance=java/lang/String) t.. content);
    ctorO+_XX-_$, mode= ctor+static: org/vishia/util/StringPart *.. StringPartJc_s(org/vishia/util/StringPart *.. src);
    debugString-_$, mode= overrideable: java/lang/String(instance=java/lang/String) t.r null();
    equals+_S-_$, mode= overrideable: boolean %.r null(java/lang/String(instance=java/lang/String) t.. sCmp);
    found-_$, mode= overrideable: boolean %.r null();
    fromEnd-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    getCircumScriptionToAnyChar-_$, mode= overrideable: java/lang/String(instance=java/lang/String) t.r null(java/lang/String(instance=java/lang/String) t.. sCharsEnd);
    getCircumScriptionToAnyCharOutsideQuotion-_$, mode= overrideable: java/lang/String(instance=java/lang/String) t.r null(java/lang/String(instance=java/lang/String) t.. sCharsEnd);
    getCircumScriptionToAnyChar_p-_$, mode= overrideable: java/lang/String(instance=java/lang/String) t.r null(java/lang/String(instance=java/lang/String) t.. sCharsEnd,boolean %.. bOutsideQuotion);
    getCurrent-_$, mode= overrideable: java/lang/String(instance=java/lang/String) t.r null(int %.. nChars);
    getCurrentChar-_$, mode= overrideable: char %.r null();
    getCurrentColumn-_$, mode= overrideable: int %.r null();
    getCurrentPart-_$, mode= overrideable: java/lang/String(instance=java/lang/String) t.r null();
    getCurrentPart+_i-_$, mode= overrideable: java/lang/String(instance=java/lang/String) t.r null(int %.. maxLength);
    getCurrentPosition-_$, mode= overrideable: long %.r null();
    getLastPart-_$, mode= overrideable: java/lang/String(instance=java/lang/String) t.r null();
    getLastScannedFloatNumber-_$, mode= overrideable: double %.r null();
    getLastScannedIntegerNumber-_$, mode= overrideable: long %.r null();
    getLastScannedString-_$, mode= overrideable: java/lang/String(instance=java/lang/String) t.r null();
    getLen-_$, mode= overrideable: int %.r null();
    getLineCt-_$, mode= overrideable: int %.r null();
    indexEndOfQuotion-_$, mode= overrideable: int %.r null(char %.. cEndQuotion,int %.. fromWhere,int %.. maxToTest);
    indexOf+_c-_$, mode= overrideable: int %.r null(char %.. ch);
    indexOf+_S-_$, mode= overrideable: int %.r null(java/lang/String(instance=java/lang/String) t.. sCmp);
    indexOf+_ci-_$, mode= overrideable: int %.r null(char %.. ch,int %.. fromIndex);
    indexOf+_Sii-_$, mode= overrideable: int %.r null(java/lang/String(instance=java/lang/String) t.. sCmp,int %.. fromIndex,int %.. maxToTest);
    indexOfAnyChar+_S-_$, mode= overrideable: int %.r null(java/lang/String(instance=java/lang/String) t.. sChars);
    indexOfAnyChar+_Sii-_$, mode= overrideable: int %.r null(java/lang/String(instance=java/lang/String) t.. sChars,int %.. fromWhere,int %.. maxToTest);
    indexOfAnyCharOutsideQuotion-_$, mode= overrideable: int %.r null(java/lang/String(instance=java/lang/String) t.. sChars,int %.. fromWhere,int %.. maxToTest);
    indexOfAnyString-_$, mode= overrideable: int %.r null(java/lang/String[??] Xt. listStrings,int %.. fromWhere,int %.. maxToTest,int[??] X%. nrofFoundString,java/lang/String[??] Xt. foundString);
    indexOfNoChar+_S-_$, mode= overrideable: int %.r null(java/lang/String(instance=java/lang/String) t.. sChars);
    indexOfNoChar+_Si-_$, mode= overrideable: int %.r null(java/lang/String(instance=java/lang/String) t.. sChars,int %.. fromWhere);
    isFound-_$, mode= overrideable: boolean %.r null();
    lastIndexOfAnyChar-_$, mode= overrideable: int %.r null(java/lang/String(instance=java/lang/String) t.. sChars,int %.. fromWhere,int %.. maxToTest);
    len0end-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    lenBacktoNoChar-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sChars);
    length-_$, mode= overrideable: int %.r null();
    lengthMaxPart-_$, mode= overrideable: int %.r null();
    lento+_i-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(int %.. len);
    lento+_c-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(char %.. cc);
    lento+_S-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. ss);
    lento+_Si-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. ss,int %.. mode);
    lentoAnyChar+_S-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sChars);
    lentoAnyChar+_Si-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sChars,int %.. maxToTest);
    lentoAnyChar+_Sii-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sChars,int %.. maxToTest,int %.. mode);
    lentoAnyCharOutsideQuotion-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sChars,int %.. maxToTest);
    lentoAnyNonEscapedChar-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sCharsEnd,int %.. maxToTest);
    lentoAnyString+_SYi-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String[??] Xt. strings,int %.. maxToTest);
    lentoAnyString+_SYii-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String[??] Xt. strings,int %.. maxToTest,int %.. mode);
    lentoAnyStringWithIndent-_$, mode= overrideable: void %.r null(java/lang/String[??] Xt. strings,java/lang/String(instance=java/lang/String) t.. sIndentChars,int %.. maxToTest,java/lang/StringBuilder *.. buffer);
    lentoIdentifier-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    lentoIdentifier+_SS-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. additionalStartChars,java/lang/String(instance=java/lang/String) t.. additionalChars);
    lentoNonEscapedString-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sEnd,int %.. maxToTest);
    lentoQuotionEnd-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(char %.. sEndQuotion,int %.. maxToTest);
    replace-_$, mode= static: java/lang/String(instance=java/lang/String) t.r null(java/lang/String(instance=java/lang/String) t.. src,java/lang/String[??] Xt. placeholder,java/lang/String[??] Xt. value,java/lang/StringBuilder *.. dst);
    scan-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sTestP);
    scanDigits-_$, mode= overrideable: long %.r null(boolean %.. bHex,int %.. maxNrofChars);
    scanEntry-_$, mode= overrideable: boolean %.r null();
    scanFloatNumber-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    scanHex-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(int %.. maxNrofChars);
    scanHexOrDecimal-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(int %.. maxNrofChars);
    scanIdentifier-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    scanIdentifier+_SS-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. additionalStartChars,java/lang/String(instance=java/lang/String) t.. additionalChars);
    scanInteger-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    scanOk-_$, mode= overrideable: boolean %.r null();
    scanPositivInteger-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    scanQuotion+_SSSY-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sQuotionmarkStart,java/lang/String(instance=java/lang/String) t.. sQuotionMarkEnd,java/lang/String[??] Xt. sResult);
    scanQuotion+_SSSYi-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sQuotionmarkStart,java/lang/String(instance=java/lang/String) t.. sQuotionMarkEnd,java/lang/String[??] Xt. sResult,int %.. maxToTest);
    scanStart-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    seek+_i-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(int %.. nr);
    seek+_Si-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sSeek,int %.. mode);
    seek+_ci-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(char %.. cSeek,int %.. mode);
    seekAnyString-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String[??] Xt. strings,int[??] X%. nrofFoundString);
    seekBegin-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    seekNoChar-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sChars);
    seekNoWhitespace-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    seekNoWhitespaceOrComments-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    setBeginMaxPart-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    setCurrentPosition-_$, mode= overrideable: void %.r null(long %.. pos);
    setIgnoreComment+_b-_$, mode= overrideable: boolean %.r null(boolean %.. bSet);
    setIgnoreComment+_SS-_$, mode= overrideable: boolean %.r null(java/lang/String(instance=java/lang/String) t.. sStart,java/lang/String(instance=java/lang/String) t.. sEnd);
    setIgnoreEndlineComment+_b-_$, mode= overrideable: boolean %.r null(boolean %.. bSet);
    setIgnoreEndlineComment+_S-_$, mode= overrideable: boolean %.r null(java/lang/String(instance=java/lang/String) t.. sStart);
    setIgnoreWhitespaces-_$, mode= overrideable: boolean %.r null(boolean %.. bSet);
    setLengthMax-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    skipWhitespaceAndComment-_$, mode= overrideable: org/vishia/util/StringPart *.r null();
    startsWith-_$, mode= overrideable: boolean %.r null(java/lang/String(instance=java/lang/String) t.. sCmp);
    substring-_$, mode= overrideable: java/lang/String(instance=java/lang/String) t.r null(int %.. pos,int %.. posendP);
    throwIndexOutOfBoundsException-_$, mode= overrideable: void %.r null(java/lang/String(instance=java/lang/String) t.. sMsg);
    toString-_$, defined: java/lang/Object.toString, mode= overrideable: java/lang/String(instance=java/lang/String) t.r null();
    trim-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    trimComment-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null();
    xxxseekEnd-_$, mode= overrideable+returnThis: org/vishia/util/StringPart *.r null(java/lang/String(instance=java/lang/String) t.. sSeek);
  }

  methods-overrideable {
    assign_S_StringPartJc;
    assign_XX_StringPartJc;
    assignFromEnd_StringPartJc;
    setIgnoreComment_b_StringPartJc;
    setIgnoreComment_SS_StringPartJc;
    setIgnoreEndlineComment_b_StringPartJc;
    setIgnoreEndlineComment_S_StringPartJc;
    setIgnoreWhitespaces_StringPartJc;
    setBeginMaxPart_StringPartJc;
    fromEnd_StringPartJc;
    getLineCt_StringPartJc;
    getLen_StringPartJc;
    length_StringPartJc;
    lengthMaxPart_StringPartJc;
    lento_i_StringPartJc;
    lento_c_StringPartJc;
    lento_S_StringPartJc;
    lento_Si_StringPartJc;
    lentoIdentifier_StringPartJc;
    lentoIdentifier_SS_StringPartJc;
    lentoAnyNonEscapedChar_StringPartJc;
    lentoNonEscapedString_StringPartJc;
    seek_i_StringPartJc;
    seekNoWhitespace_StringPartJc;
    skipWhitespaceAndComment_StringPartJc;
    seekNoWhitespaceOrComments_StringPartJc;
    isFound_StringPartJc;
    found_StringPartJc;
    seekBegin_StringPartJc;
    seek_Si_StringPartJc;
    seekAnyString_StringPartJc;
    seek_ci_StringPartJc;
    xxxseekEnd_StringPartJc;
    seekNoChar_StringPartJc;
    indexOfAnyChar_Sii_StringPartJc;
    lastIndexOfAnyChar_StringPartJc;
    indexOfAnyString_StringPartJc;
    indexOfAnyCharOutsideQuotion_StringPartJc;
    indexEndOfQuotion_StringPartJc;
    indexOfAnyChar_S_StringPartJc;
    indexOfNoChar_Si_StringPartJc;
    indexOfNoChar_S_StringPartJc;
    lentoAnyChar_Si_StringPartJc;
    lentoAnyChar_Sii_StringPartJc;
    lentoAnyString_SYi_StringPartJc;
    lentoAnyString_SYii_StringPartJc;
    lentoAnyStringWithIndent_StringPartJc;
    lentoAnyCharOutsideQuotion_StringPartJc;
    lentoQuotionEnd_StringPartJc;
    lentoAnyChar_S_StringPartJc;
    len0end_StringPartJc;
    setLengthMax_StringPartJc;
    lenBacktoNoChar_StringPartJc;
    trim_StringPartJc;
    trimComment_StringPartJc;
    indexOf_c_StringPartJc;
    indexOf_ci_StringPartJc;
    indexOf_S_StringPartJc;
    indexOf_Sii_StringPartJc;
    equals_S_StringPartJc;
    startsWith_StringPartJc;
    scan_StringPartJc;
    scanOk_StringPartJc;
    scanQuotion_SSSY_StringPartJc;
    scanQuotion_SSSYi_StringPartJc;
    scanDigits_StringPartJc;
    scanStart_StringPartJc;
    scanEntry_StringPartJc;
    scanPositivInteger_StringPartJc;
    scanInteger_StringPartJc;
    scanFloatNumber_StringPartJc;
    scanHex_StringPartJc;
    scanHexOrDecimal_StringPartJc;
    scanIdentifier_StringPartJc;
    scanIdentifier_SS_StringPartJc;
    getLastScannedIntegerNumber_StringPartJc;
    getLastScannedFloatNumber_StringPartJc;
    getLastScannedString_StringPartJc;
    getCircumScriptionToAnyChar_StringPartJc;
    getCircumScriptionToAnyCharOutsideQuotion_StringPartJc;
    getCircumScriptionToAnyChar_p_StringPartJc;
    getCurrentPosition_StringPartJc;
    setCurrentPosition_StringPartJc;
    substring_StringPartJc;
    getCurrent_StringPartJc;
    getCurrentChar_StringPartJc;
    getCurrentColumn_StringPartJc;
    getCurrentPart_StringPartJc;
    getLastPart_StringPartJc;
    getCurrentPart_i_StringPartJc;
    debugString_StringPartJc;
    throwIndexOutOfBoundsException_StringPartJc;
  }

  castTo {
    java/lang/Object: $ "(?).base.object" $;
  }

}
