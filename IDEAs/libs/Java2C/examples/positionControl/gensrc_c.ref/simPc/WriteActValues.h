/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __simPc_WriteActValues_h__
#define __simPc_WriteActValues_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/
#include "J1c/RawDataAccessJc.h"  //embedded type in class data
#include "Jc/FileIoJc.h"  //embedded type in class data


/*@CLASS_C WriteActValues @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct WriteActValues_t
{ 
  union { ObjectJc object; } base; 
  FileJc_s fileActValues;   /*The file to write out actual values to visit from outside. */
  struct valueBuffer_Y { ObjectArrayJc head; int8 data[400]; }valueBuffer; 
  RawDataAccessJc_s actValueOut; 
  int32 ix; 
} WriteActValues_s;
  

#define sizeof_WriteActValues_s sizeof(WriteActValues_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef WriteActValuesREFDEF
  #define WriteActValuesREFDEF
  typedef struct WriteActValuesREF_t { ObjectRefValuesJc refbase; struct WriteActValues_t* ref; } WriteActValuesREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct WriteActValues_X_t { ObjectArrayJc head; WriteActValuesREF data[50]; } WriteActValues_X;
typedef struct WriteActValues_Y_t { ObjectArrayJc head; WriteActValues_s data[50]; } WriteActValues_Y;

 extern struct ClassJc_t const reflection_WriteActValues_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_WriteActValues(OBJP) { CONST_ObjectJc(sizeof(WriteActValues_s), OBJP, &reflection_WriteActValues_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_WriteActValues_F(ObjectJc* othis, ThCxt* _thCxt);


#define recordsize_WriteActValues 8


METHOD_C struct WriteActValues_t* ctorO_WriteActValues(ObjectJc* othis, ThCxt* _thCxt);

typedef void MT_write_WriteActValues(WriteActValues_s* ythis, float way, float current, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void write_WriteActValues_F(WriteActValues_s* ythis, float way, float current, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void write_WriteActValues(WriteActValues_s* ythis, float way, float current, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_WriteActValues[]; //marker for methodTable check
typedef struct Mtbl_WriteActValues_t
{ MtblHeadJc head;
  MT_write_WriteActValues* write;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_WriteActValues;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class WriteActValues : private WriteActValues_s
{ public:

  WriteActValues(){ init_ObjectJc(&this->base.object, sizeof(WriteActValues_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_WriteActValues_s, 0); ctorO_WriteActValues(&this->base.object,  null/*_thCxt*/); }

  virtual void write(float way, float current){ write_WriteActValues_F(this, way, current,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__simPc_WriteActValues_h__
