<?Java2C-stc www.vishia.org version="0.94" encoding="UTF8" ?>
Structure of translated java-file "simPc/SimPc"
package org/vishia/exampleJava2C/simPc/;

class SimPc; nameC=SimPc_s; argIdent=XX; extends java/lang/Object //creationMode=P
{  
    //Innerclass: C_broker2_SimPc
    //Innerclass: C_wayActuator1_SimPc
    //Innerclass: C_wayActuator2_SimPc
    //Innerclass: C_waySensor1_SimPc
    //Innerclass: C_waySensor2_SimPc
    //Innerclass: WaitThread_SimPc
  InnerClass{ 
    nonStaticInner class WaitThread; nameC=WaitThread_SimPc_s; argIdent=XX; extends java/lang/Object implements org/vishia/exampleJava2C/java4c/WaitThreadOrganizer //creationMode=C
    {  
        //Innerclass: WaitThread_SimPc
        //Innerclass: SimPc
    fieldIdents {
      //outer=2 ,super=1: boolean %.. bRun;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_broker2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_broker2) $.. broker2;
      //outer=2 ,super=1: double %.. disturbance1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/java4c/MainController *.. mainController;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SendActValues(instance=org/vishia/exampleJava2C/simPc/SendActValues) $.. oamWriter;
      //outer=2 ,super=1: int %.. samplingInverval;
      //outer=2 ,super=1: int %.. time;
      //outer=2 ,super=1: short %.. voltage1;
      //outer=2 ,super=1: short %.. voltage2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.WaitThread(instance=org/vishia/exampleJava2C/simPc/SimPc.WaitThread) @.. waitThreadOrganizer;
      //outer=2 ,super=1: double %.. way1;
      //outer=2 ,super=1: double %.. way2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1) $.. wayActuator1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2) $.. wayActuator2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1) $.. waySensor1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2) $.. waySensor2;
    }
      methods {  
        waitCycle-_$, defined: org/vishia/exampleJava2C/java4c/WaitThreadOrganizer.waitCycle, mode= overrideable: void %.r null();
      }

      castTo {
        java/lang/Object: $ "(?).base.WaitThreadOrganizer.base.object" $;
        org/vishia/exampleJava2C/simPc/SimPc: * "(?)->outer" *;
        org/vishia/exampleJava2C/java4c/WaitThreadOrganizer: $ "(?).base.WaitThreadOrganizer" $;
      }

    }

    nonStaticInner anonymous class C_waySensor1; nameC=C_waySensor1_SimPc_s; argIdent=XX; extends java/lang/Object implements org/vishia/exampleJava2C/java4c/WaySensor //creationMode=Y
    {  
        //Innerclass: WaitThread_SimPc
        //Innerclass: SimPc
    fieldIdents {
      //outer=2 ,super=1: boolean %.. bRun;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_broker2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_broker2) $.. broker2;
      //outer=2 ,super=1: double %.. disturbance1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/java4c/MainController *.. mainController;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SendActValues(instance=org/vishia/exampleJava2C/simPc/SendActValues) $.. oamWriter;
      //outer=2 ,super=1: int %.. samplingInverval;
      //outer=2 ,super=1: int %.. time;
      //outer=2 ,super=1: short %.. voltage1;
      //outer=2 ,super=1: short %.. voltage2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.WaitThread(instance=org/vishia/exampleJava2C/simPc/SimPc.WaitThread) @.. waitThreadOrganizer;
      //outer=2 ,super=1: double %.. way1;
      //outer=2 ,super=1: double %.. way2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1) $.. wayActuator1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2) $.. wayActuator2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1) $.. waySensor1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2) $.. waySensor2;
    }
      methods {  
        getWay-_$, defined: org/vishia/exampleJava2C/java4c/WaySensor.getWay, mode= overrideable: int %.r null();
      }

      castTo {
        java/lang/Object: $ "(?).base.WaySensor.base.object" $;
        org/vishia/exampleJava2C/simPc/SimPc: * "(?)->outer" *;
        org/vishia/exampleJava2C/java4c/WaySensor: $ "(?).base.WaySensor" $;
      }

    }

    nonStaticInner anonymous class C_waySensor2; nameC=C_waySensor2_SimPc_s; argIdent=XX; extends java/lang/Object implements org/vishia/exampleJava2C/java4c/WaySensor //creationMode=Y
    {  
        //Innerclass: WaitThread_SimPc
        //Innerclass: SimPc
    fieldIdents {
      //outer=2 ,super=1: boolean %.. bRun;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_broker2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_broker2) $.. broker2;
      //outer=2 ,super=1: double %.. disturbance1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/java4c/MainController *.. mainController;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SendActValues(instance=org/vishia/exampleJava2C/simPc/SendActValues) $.. oamWriter;
      //outer=2 ,super=1: int %.. samplingInverval;
      //outer=2 ,super=1: int %.. time;
      //outer=2 ,super=1: short %.. voltage1;
      //outer=2 ,super=1: short %.. voltage2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.WaitThread(instance=org/vishia/exampleJava2C/simPc/SimPc.WaitThread) @.. waitThreadOrganizer;
      //outer=2 ,super=1: double %.. way1;
      //outer=2 ,super=1: double %.. way2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1) $.. wayActuator1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2) $.. wayActuator2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1) $.. waySensor1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2) $.. waySensor2;
    }
      methods {  
        getWay-_$, defined: org/vishia/exampleJava2C/java4c/WaySensor.getWay, mode= overrideable: int %.r null();
      }

      castTo {
        java/lang/Object: $ "(?).base.WaySensor.base.object" $;
        org/vishia/exampleJava2C/simPc/SimPc: * "(?)->outer" *;
        org/vishia/exampleJava2C/java4c/WaySensor: $ "(?).base.WaySensor" $;
      }

    }

    nonStaticInner anonymous class C_wayActuator1; nameC=C_wayActuator1_SimPc_s; argIdent=XX; extends java/lang/Object implements org/vishia/exampleJava2C/java4c/WayActuator //creationMode=Y
    {  
        //Innerclass: WaitThread_SimPc
        //Innerclass: SimPc
    fieldIdents {
      //outer=2 ,super=1: boolean %.. bRun;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_broker2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_broker2) $.. broker2;
      //outer=2 ,super=1: double %.. disturbance1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/java4c/MainController *.. mainController;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SendActValues(instance=org/vishia/exampleJava2C/simPc/SendActValues) $.. oamWriter;
      //outer=2 ,super=1: int %.. samplingInverval;
      //outer=2 ,super=1: int %.. time;
      //outer=2 ,super=1: short %.. voltage1;
      //outer=2 ,super=1: short %.. voltage2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.WaitThread(instance=org/vishia/exampleJava2C/simPc/SimPc.WaitThread) @.. waitThreadOrganizer;
      //outer=2 ,super=1: double %.. way1;
      //outer=2 ,super=1: double %.. way2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1) $.. wayActuator1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2) $.. wayActuator2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1) $.. waySensor1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2) $.. waySensor2;
    }
      methods {  
        setMotorVoltage+_i-_$, defined: org/vishia/exampleJava2C/java4c/WayActuator.setMotorVoltage, mode= overrideable: void %.r null(short %.. voltage);
      }

      castTo {
        java/lang/Object: $ "(?).base.WayActuator.base.object" $;
        org/vishia/exampleJava2C/simPc/SimPc: * "(?)->outer" *;
        org/vishia/exampleJava2C/java4c/WayActuator: $ "(?).base.WayActuator" $;
      }

    }

    nonStaticInner anonymous class C_wayActuator2; nameC=C_wayActuator2_SimPc_s; argIdent=XX; extends java/lang/Object implements org/vishia/exampleJava2C/java4c/WayActuator //creationMode=Y
    {  
        //Innerclass: WaitThread_SimPc
        //Innerclass: SimPc
    fieldIdents {
      //outer=2 ,super=1: boolean %.. bRun;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_broker2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_broker2) $.. broker2;
      //outer=2 ,super=1: double %.. disturbance1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/java4c/MainController *.. mainController;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SendActValues(instance=org/vishia/exampleJava2C/simPc/SendActValues) $.. oamWriter;
      //outer=2 ,super=1: int %.. samplingInverval;
      //outer=2 ,super=1: int %.. time;
      //outer=2 ,super=1: short %.. voltage1;
      //outer=2 ,super=1: short %.. voltage2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.WaitThread(instance=org/vishia/exampleJava2C/simPc/SimPc.WaitThread) @.. waitThreadOrganizer;
      //outer=2 ,super=1: double %.. way1;
      //outer=2 ,super=1: double %.. way2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1) $.. wayActuator1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2) $.. wayActuator2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1) $.. waySensor1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2) $.. waySensor2;
    }
      methods {  
        setMotorVoltage+_i-_$, defined: org/vishia/exampleJava2C/java4c/WayActuator.setMotorVoltage, mode= overrideable: void %.r null(short %.. voltage);
      }

      castTo {
        java/lang/Object: $ "(?).base.WayActuator.base.object" $;
        org/vishia/exampleJava2C/simPc/SimPc: * "(?)->outer" *;
        org/vishia/exampleJava2C/java4c/WayActuator: $ "(?).base.WayActuator" $;
      }

    }

    nonStaticInner anonymous class C_broker2; nameC=C_broker2_SimPc_s; argIdent=XX; extends java/lang/Object implements org/vishia/exampleJava2C/simPc/iRequireMainController //creationMode=Y
    {  
        //Innerclass: WaitThread_SimPc
        //Innerclass: SimPc
    fieldIdents {
      //outer=2 ,super=1: boolean %.. bRun;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_broker2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_broker2) $.. broker2;
      //outer=2 ,super=1: double %.. disturbance1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/java4c/MainController *.. mainController;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SendActValues(instance=org/vishia/exampleJava2C/simPc/SendActValues) $.. oamWriter;
      //outer=2 ,super=1: int %.. samplingInverval;
      //outer=2 ,super=1: int %.. time;
      //outer=2 ,super=1: short %.. voltage1;
      //outer=2 ,super=1: short %.. voltage2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.WaitThread(instance=org/vishia/exampleJava2C/simPc/SimPc.WaitThread) @.. waitThreadOrganizer;
      //outer=2 ,super=1: double %.. way1;
      //outer=2 ,super=1: double %.. way2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1) $.. wayActuator1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2) $.. wayActuator2;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1) $.. waySensor1;
      //outer=2 ,super=1: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2) $.. waySensor2;
    }
      methods {  
        requireWay1Actuator-_$, defined: org/vishia/exampleJava2C/simPc/iRequireMainController.requireWay1Actuator, mode= overrideable: org/vishia/exampleJava2C/java4c/WayActuator *.r null();
        requireWay1Sensor-_$, defined: org/vishia/exampleJava2C/simPc/iRequireMainController.requireWay1Sensor, mode= overrideable: org/vishia/exampleJava2C/java4c/WaySensor *.r null();
        requireWay2Actuator-_$, defined: org/vishia/exampleJava2C/simPc/iRequireMainController.requireWay2Actuator, mode= overrideable: org/vishia/exampleJava2C/java4c/WayActuator *.r null();
        requireWay2Sensor-_$, defined: org/vishia/exampleJava2C/simPc/iRequireMainController.requireWay2Sensor, mode= overrideable: org/vishia/exampleJava2C/java4c/WaySensor *.r null();
      }

      castTo {
        java/lang/Object: $ "(?).base.iRequireMainController.base.object" $;
        org/vishia/exampleJava2C/simPc/SimPc: * "(?)->outer" *;
        org/vishia/exampleJava2C/simPc/iRequireMainController: $ "(?).base.iRequireMainController" $;
      }

    }

  }
fieldIdents {
  boolean %.. bRun;
  org/vishia/exampleJava2C/simPc/SimPc.C_broker2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_broker2) $.. broker2;
  double %.. disturbance1;
  org/vishia/exampleJava2C/java4c/MainController *.. mainController;
  org/vishia/exampleJava2C/simPc/SendActValues(instance=org/vishia/exampleJava2C/simPc/SendActValues) $.. oamWriter;
  int %.. samplingInverval;
  int %.. time;
  short %.. voltage1;
  short %.. voltage2;
  org/vishia/exampleJava2C/simPc/SimPc.WaitThread(instance=org/vishia/exampleJava2C/simPc/SimPc.WaitThread) @.. waitThreadOrganizer;
  double %.. way1;
  double %.. way2;
  org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1) $.. wayActuator1;
  org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2) $.. wayActuator2;
  org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1) $.. waySensor1;
  org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2(instance=org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2) $.. waySensor2;
}
  methods {  
    ctorO-_$, mode= ctor+static: org/vishia/exampleJava2C/simPc/SimPc *.. SimPc_s();
    ctorO_C_broker2-_$, mode= ctor+anonymousCtor+nonStaticCtor: org/vishia/exampleJava2C/simPc/SimPc.C_broker2 *.. C_broker2_SimPc_s();
    ctorO_C_wayActuator1-_$, mode= ctor+anonymousCtor+nonStaticCtor: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator1 *.. C_wayActuator1_SimPc_s();
    ctorO_C_wayActuator2-_$, mode= ctor+anonymousCtor+nonStaticCtor: org/vishia/exampleJava2C/simPc/SimPc.C_wayActuator2 *.. C_wayActuator2_SimPc_s();
    ctorO_C_waySensor1-_$, mode= ctor+anonymousCtor+nonStaticCtor: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor1 *.. C_waySensor1_SimPc_s();
    ctorO_C_waySensor2-_$, mode= ctor+anonymousCtor+nonStaticCtor: org/vishia/exampleJava2C/simPc/SimPc.C_waySensor2 *.. C_waySensor2_SimPc_s();
    ctorO_WaitThread-_$, mode= ctor+nonStaticCtor: org/vishia/exampleJava2C/simPc/SimPc.WaitThread *.. WaitThread_SimPc_s();
    execute-_$: void %.r null();
    finalize-_$, defined: java/lang/Object.finalize, mode= overrideable: void %.. void();
    step-_$: void %.r null();
    stop-_$, mode= overrideable: void %.r null();
  }

  methods-overrideable {
    stop_SimPc;
  }

  castTo {
    java/lang/Object: $ "(?).base.object" $;
  }

}
