/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __simPc_SendActValues_h__
#define __simPc_SendActValues_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef Address_InterProcessCommREFDEF
  #define Address_InterProcessCommREFDEF
  typedef struct Address_InterProcessCommREF_t { ObjectRefValuesJc refbase; struct Address_InterProcessComm_t* ref; } Address_InterProcessCommREF;
#endif
#ifndef InterProcessCommREFDEF
  #define InterProcessCommREFDEF
  typedef struct InterProcessCommREF_t { ObjectRefValuesJc refbase; struct InterProcessComm_t* ref; } InterProcessCommREF;
#endif


/* J2C: includes *********************************************************/
#include "InspcJ2c/InspcDataExchangeAccess_Inspc.h"  //embedded type in class data
#include "Jc/ThreadJc.h"  //superclass
#include "PosCtrl/OamVariables.h"  //embedded type in class data


/*@CLASS_C C_rxThread_SendActValues @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct C_rxThread_SendActValues_t
{ 
  union { ObjectJc object; ThreadJc_s super;} base; 
  struct SendActValues_t* outer;  //J2C: Reference to outer class, implicit in Java
  int32 nrofBytes[1];   /**/
  struct rxBuffer_Y { ObjectArrayJc head; int8 data[100]; }rxBuffer;   /*A small buffer, because there are no more information to receive. */
} C_rxThread_SendActValues_s;
  

#define sizeof_C_rxThread_SendActValues_s sizeof(C_rxThread_SendActValues_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef C_rxThread_SendActValuesREFDEF
  #define C_rxThread_SendActValuesREFDEF
  typedef struct C_rxThread_SendActValuesREF_t { ObjectRefValuesJc refbase; struct C_rxThread_SendActValues_t* ref; } C_rxThread_SendActValuesREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct C_rxThread_SendActValues_X_t { ObjectArrayJc head; C_rxThread_SendActValuesREF data[50]; } C_rxThread_SendActValues_X;
typedef struct C_rxThread_SendActValues_Y_t { ObjectArrayJc head; C_rxThread_SendActValues_s data[50]; } C_rxThread_SendActValues_Y;

 extern struct ClassJc_t const reflection_C_rxThread_SendActValues_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_C_rxThread_SendActValues(OBJP) { CONST_ObjectJc(sizeof(C_rxThread_SendActValues_s), OBJP, &reflection_C_rxThread_SendActValues_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_C_rxThread_SendActValues_F(ObjectJc* othis, ThCxt* _thCxt);




/**Run-method to receive*/
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void run_C_rxThread_SendActValues_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void run_C_rxThread_SendActValues(ObjectJc* ithis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_C_rxThread_SendActValues[]; //marker for methodTable check
typedef struct Mtbl_C_rxThread_SendActValues_t
{ MtblHeadJc head;
  Mtbl_ThreadJc ThreadJc;
} Mtbl_C_rxThread_SendActValues;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class C_rxThread_SendActValues : private C_rxThread_SendActValues_s
{ public:

  virtual void run(){ run_C_rxThread_SendActValues_F(&this->base.super.base.RunnableJc.base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/


/**Default constructor. */
METHOD_C struct C_rxThread_SendActValues_t* ctorO_C_rxThread_SendActValues(struct SendActValues_t* outer, ObjectJc* othis, ThCxt* _thCxt);


/*@CLASS_C SendActValues @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct SendActValues_t
{ 
  union { ObjectJc object; } base; 
  OamVariablesByteAccess_OamVariables_s oamVariableAccess;   /*It is the accessor class to*/
  bool rxRun;   /*Set while the receiver thread runs. If it is set to false, the receiver thread will be finished. */
  bool bSendReq;   /*A request for data sending is pending. It is set if a datagram from any source is received. */
  bool bSent; 
  int32 orderSend;   /*Counts the order-identifier-number for sending.*/
  struct valueBuffer_Y { ObjectArrayJc head; int8 data[1400]; }valueBuffer;   /*Buffer to prepare the data to send. */
  Datagram_InspcDataExchangeAccess_Inspc_s datagram; 
  Info_InspcDataExchangeAccess_Inspc_s infoHead; 
  InterProcessCommREF udpSocket; 
  Address_InterProcessCommREF dstAddress; 
  C_rxThread_SendActValues_s rxThread;   /*This thread is used to receive a trigger, after them values are sent. */
} SendActValues_s;
  

#define sizeof_SendActValues_s sizeof(SendActValues_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef SendActValuesREFDEF
  #define SendActValuesREFDEF
  typedef struct SendActValuesREF_t { ObjectRefValuesJc refbase; struct SendActValues_t* ref; } SendActValuesREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct SendActValues_X_t { ObjectArrayJc head; SendActValuesREF data[50]; } SendActValues_X;
typedef struct SendActValues_Y_t { ObjectArrayJc head; SendActValues_s data[50]; } SendActValues_Y;

 extern struct ClassJc_t const reflection_SendActValues_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_SendActValues(OBJP) { CONST_ObjectJc(sizeof(SendActValues_s), OBJP, &reflection_SendActValues_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_SendActValues_F(ObjectJc* othis, ThCxt* _thCxt);


 extern const int32 recordsize_SendActValues; 


METHOD_C struct SendActValues_t* ctorO_SendActValues(ObjectJc* othis, ThCxt* _thCxt);

typedef void MT_start_SendActValues(SendActValues_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void start_SendActValues_F(SendActValues_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void start_SendActValues(SendActValues_s* ythis, ThCxt* _thCxt);

/**Writes the values in the buffer and sends the datagram, if sending is requested.*/
typedef void MT_write_SendActValues(SendActValues_s* ythis, struct OamVariables_t* oamVariables, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void write_SendActValues_F(SendActValues_s* ythis, struct OamVariables_t* oamVariables, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void write_SendActValues(SendActValues_s* ythis, struct OamVariables_t* oamVariables, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_SendActValues[]; //marker for methodTable check
typedef struct Mtbl_SendActValues_t
{ MtblHeadJc head;
  MT_start_SendActValues* start;
  MT_write_SendActValues* write;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_SendActValues;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class SendActValues : private SendActValues_s
{ public:

  SendActValues(){ init_ObjectJc(&this->base.object, sizeof(SendActValues_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_SendActValues_s, 0); ctorO_C_rxThread_SendActValues(&this->base.object,  null/*_thCxt*/); }

  SendActValues(){ init_ObjectJc(&this->base.object, sizeof(SendActValues_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_SendActValues_s, 0); ctorO_SendActValues(&this->base.object,  null/*_thCxt*/); }

  virtual void start(){ start_SendActValues_F(this,  null/*_thCxt*/); }

  virtual void write(struct OamVariables_t* oamVariables){ write_SendActValues_F(this, oamVariables,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__simPc_SendActValues_h__
