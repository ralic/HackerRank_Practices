/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __simPc_iRequireMainController_h__
#define __simPc_iRequireMainController_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/


/*@CLASS_C iRequireMainController @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct iRequireMainController_t
{ 
  union { ObjectJc object; } base; 
} iRequireMainController_s;
  

#define sizeof_iRequireMainController_s sizeof(iRequireMainController_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef iRequireMainControllerREFDEF
  #define iRequireMainControllerREFDEF
  typedef struct iRequireMainControllerREF_t { ObjectRefValuesJc refbase; struct iRequireMainController_t* ref; } iRequireMainControllerREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct iRequireMainController_X_t { ObjectArrayJc head; iRequireMainControllerREF data[50]; } iRequireMainController_X;
typedef struct iRequireMainController_Y_t { ObjectArrayJc head; iRequireMainController_s data[50]; } iRequireMainController_Y;

 extern struct ClassJc_t const reflection_iRequireMainController_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_iRequireMainController(OBJP) { CONST_ObjectJc(sizeof(iRequireMainController_s), OBJP, &reflection_iRequireMainController_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_iRequireMainController_F(ObjectJc* othis, ThCxt* _thCxt);




typedef struct WaySensor_t* MT_requireWay1Sensor_iRequireMainController(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct WaySensor_t* requireWay1Sensor_iRequireMainController(ObjectJc* ithis, ThCxt* _thCxt);

typedef struct WaySensor_t* MT_requireWay2Sensor_iRequireMainController(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct WaySensor_t* requireWay2Sensor_iRequireMainController(ObjectJc* ithis, ThCxt* _thCxt);

typedef struct WayActuator_t* MT_requireWay1Actuator_iRequireMainController(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct WayActuator_t* requireWay1Actuator_iRequireMainController(ObjectJc* ithis, ThCxt* _thCxt);

typedef struct WayActuator_t* MT_requireWay2Actuator_iRequireMainController(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct WayActuator_t* requireWay2Actuator_iRequireMainController(ObjectJc* ithis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_iRequireMainController[]; //marker for methodTable check
typedef struct Mtbl_iRequireMainController_t
{ MtblHeadJc head;
  MT_requireWay1Sensor_iRequireMainController* requireWay1Sensor;
  MT_requireWay2Sensor_iRequireMainController* requireWay2Sensor;
  MT_requireWay1Actuator_iRequireMainController* requireWay1Actuator;
  MT_requireWay2Actuator_iRequireMainController* requireWay2Actuator;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_iRequireMainController;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class iRequireMainController : private iRequireMainController_s
{ public:

  virtual struct WayActuator_t* requireWay1Actuator()=0;

  virtual struct WaySensor_t* requireWay1Sensor()=0;

  virtual struct WayActuator_t* requireWay2Actuator()=0;

  virtual struct WaySensor_t* requireWay2Sensor()=0;
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__simPc_iRequireMainController_h__
