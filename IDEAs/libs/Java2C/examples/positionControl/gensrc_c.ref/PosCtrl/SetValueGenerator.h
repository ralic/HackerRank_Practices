/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __PosCtrl_SetValueGenerator_h__
#define __PosCtrl_SetValueGenerator_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef LogMessageFWREFDEF
  #define LogMessageFWREFDEF
  typedef struct LogMessageFWREF_t { ObjectRefValuesJc refbase; struct LogMessageFW_t* ref; } LogMessageFWREF;
#endif
#ifndef OamVariablesREFDEF
  #define OamVariablesREFDEF
  typedef struct OamVariablesREF_t { ObjectRefValuesJc refbase; struct OamVariables_t* ref; } OamVariablesREF;
#endif
#ifndef SetValueGeneratorREFDEF
  #define SetValueGeneratorREFDEF
  typedef struct SetValueGeneratorREF_t { ObjectRefValuesJc refbase; struct SetValueGenerator_t* ref; } SetValueGeneratorREF;
#endif
#ifndef Target_SetValueGeneratorREFDEF
  #define Target_SetValueGeneratorREFDEF
  typedef struct Target_SetValueGeneratorREF_t { ObjectRefValuesJc refbase; struct Target_SetValueGenerator_t* ref; } Target_SetValueGeneratorREF;
#endif


/* J2C: includes *********************************************************/
#include "J1c/StringFormatterJc.h"  //embedded type in class data
#include "PosCtrl/SetValueGenerator_ifc.h"  //interface


/*@CLASS_C InnerTest_OnlyTest_Target_SetValueGenerator @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct InnerTest_OnlyTest_Target_SetValueGenerator_t
{ 
  union { ObjectJc object; } base; 
  int32 a; 
} InnerTest_OnlyTest_Target_SetValueGenerator_s;
  

#define sizeof_InnerTest_OnlyTest_Target_SetValueGenerator_s sizeof(InnerTest_OnlyTest_Target_SetValueGenerator_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef InnerTest_OnlyTest_Target_SetValueGeneratorREFDEF
  #define InnerTest_OnlyTest_Target_SetValueGeneratorREFDEF
  typedef struct InnerTest_OnlyTest_Target_SetValueGeneratorREF_t { ObjectRefValuesJc refbase; struct InnerTest_OnlyTest_Target_SetValueGenerator_t* ref; } InnerTest_OnlyTest_Target_SetValueGeneratorREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct InnerTest_OnlyTest_Target_SetValueGenerator_X_t { ObjectArrayJc head; InnerTest_OnlyTest_Target_SetValueGeneratorREF data[50]; } InnerTest_OnlyTest_Target_SetValueGenerator_X;
typedef struct InnerTest_OnlyTest_Target_SetValueGenerator_Y_t { ObjectArrayJc head; InnerTest_OnlyTest_Target_SetValueGenerator_s data[50]; } InnerTest_OnlyTest_Target_SetValueGenerator_Y;

 extern struct ClassJc_t const reflection_InnerTest_OnlyTest_Target_SetValueGenerator_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_InnerTest_OnlyTest_Target_SetValueGenerator(OBJP) { CONST_ObjectJc(sizeof(InnerTest_OnlyTest_Target_SetValueGenerator_s), OBJP, &reflection_InnerTest_OnlyTest_Target_SetValueGenerator_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_InnerTest_OnlyTest_Target_SetValueGenerator_F(ObjectJc* othis, ThCxt* _thCxt);




/**Default constructor. */
METHOD_C struct InnerTest_OnlyTest_Target_SetValueGenerator_t* ctorO_InnerTest_OnlyTest_Target_SetValueGenerator(ObjectJc* othis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_InnerTest_OnlyTest_Target_SetValueGenerator[]; //marker for methodTable check
typedef struct Mtbl_InnerTest_OnlyTest_Target_SetValueGenerator_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_InnerTest_OnlyTest_Target_SetValueGenerator;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class InnerTest_OnlyTest_Target_SetValueGenerator : private InnerTest_OnlyTest_Target_SetValueGenerator_s
{ public:

  InnerTest_OnlyTest_Target_SetValueGenerator(){ init_ObjectJc(&this->base.object, sizeof(InnerTest_OnlyTest_Target_SetValueGenerator_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_InnerTest_OnlyTest_Target_SetValueGenerator_s, 0); ctorO_InnerTest_OnlyTest_Target_SetValueGenerator(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C OnlyTest_Target_SetValueGenerator @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct OnlyTest_Target_SetValueGenerator_t
{ 
  union { ObjectJc object; } base; 
} OnlyTest_Target_SetValueGenerator_s;
  

#define sizeof_OnlyTest_Target_SetValueGenerator_s sizeof(OnlyTest_Target_SetValueGenerator_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef OnlyTest_Target_SetValueGeneratorREFDEF
  #define OnlyTest_Target_SetValueGeneratorREFDEF
  typedef struct OnlyTest_Target_SetValueGeneratorREF_t { ObjectRefValuesJc refbase; struct OnlyTest_Target_SetValueGenerator_t* ref; } OnlyTest_Target_SetValueGeneratorREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct OnlyTest_Target_SetValueGenerator_X_t { ObjectArrayJc head; OnlyTest_Target_SetValueGeneratorREF data[50]; } OnlyTest_Target_SetValueGenerator_X;
typedef struct OnlyTest_Target_SetValueGenerator_Y_t { ObjectArrayJc head; OnlyTest_Target_SetValueGenerator_s data[50]; } OnlyTest_Target_SetValueGenerator_Y;

 extern struct ClassJc_t const reflection_OnlyTest_Target_SetValueGenerator_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_OnlyTest_Target_SetValueGenerator(OBJP) { CONST_ObjectJc(sizeof(OnlyTest_Target_SetValueGenerator_s), OBJP, &reflection_OnlyTest_Target_SetValueGenerator_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_OnlyTest_Target_SetValueGenerator_F(ObjectJc* othis, ThCxt* _thCxt);




/**Default constructor. */
METHOD_C struct OnlyTest_Target_SetValueGenerator_t* ctorO_OnlyTest_Target_SetValueGenerator(ObjectJc* othis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_OnlyTest_Target_SetValueGenerator[]; //marker for methodTable check
typedef struct Mtbl_OnlyTest_Target_SetValueGenerator_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_OnlyTest_Target_SetValueGenerator;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class OnlyTest_Target_SetValueGenerator : private OnlyTest_Target_SetValueGenerator_s
{ public:

  OnlyTest_Target_SetValueGenerator(){ init_ObjectJc(&this->base.object, sizeof(OnlyTest_Target_SetValueGenerator_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_OnlyTest_Target_SetValueGenerator_s, 0); ctorO_OnlyTest_Target_SetValueGenerator(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C Target_SetValueGenerator @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct Target_SetValueGenerator_t
{ 
  union { ObjectJc object; } base; 
  int16 target;   /*The target value, the target point in 0.1mm steps from 0 .. about 3 m . */
  int16 velocity;   /*The increment per cycle step in 0.1 mm as relation to the velocity.*/
  int16 timeStandIdleOnTarget;   /*Time to stand idle on target in steps. */
  SetValueGeneratorREF testGC; 
} Target_SetValueGenerator_s;
  

#define sizeof_Target_SetValueGenerator_s sizeof(Target_SetValueGenerator_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef Target_SetValueGeneratorREFDEF
  #define Target_SetValueGeneratorREFDEF
  typedef struct Target_SetValueGeneratorREF_t { ObjectRefValuesJc refbase; struct Target_SetValueGenerator_t* ref; } Target_SetValueGeneratorREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct Target_SetValueGenerator_X_t { ObjectArrayJc head; Target_SetValueGeneratorREF data[50]; } Target_SetValueGenerator_X;
typedef struct Target_SetValueGenerator_Y_t { ObjectArrayJc head; Target_SetValueGenerator_s data[50]; } Target_SetValueGenerator_Y;

 extern struct ClassJc_t const reflection_Target_SetValueGenerator_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_Target_SetValueGenerator(OBJP) { CONST_ObjectJc(sizeof(Target_SetValueGenerator_s), OBJP, &reflection_Target_SetValueGenerator_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_Target_SetValueGenerator_F(ObjectJc* othis, ThCxt* _thCxt);




METHOD_C struct Target_SetValueGenerator_t* ctorO_Target_SetValueGenerator(ObjectJc* othis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_Target_SetValueGenerator[]; //marker for methodTable check
typedef struct Mtbl_Target_SetValueGenerator_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_Target_SetValueGenerator;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class Target_SetValueGenerator : private Target_SetValueGenerator_s
{ public:

  Target_SetValueGenerator(){ init_ObjectJc(&this->base.object, sizeof(Target_SetValueGenerator_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_Target_SetValueGenerator_s, 0); ctorO_Target_SetValueGenerator(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C SetValueGenerator @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct SetValueGenerator_t
{ 
  union { ObjectJc object; SetValueGenerator_ifc_s SetValueGenerator_ifc;} base; 
  LogMessageFWREF msg;   /*The message interface.*/
  OamVariablesREF oamVariables; 
  int16 value;   /*The last and next set value. Initial it is the position 1 meter.*/
  int16 dvalue;   /*The increment of value in actual generating*/
  int32 countStandStill;   /*The counter to count the time to stand still. */
  bool isWaitingForTarget; 
  int16 state;   /*State of the movement. Use state variables xxx_State. */
  struct SbY_bufferFormatter_t { StringBufferJc sb; char _b[396]; }bufferFormatter; 
  StringFormatterJc_s sFormatter; 
  Target_SetValueGeneratorREF actTarget;   /*The instances for actual and next target point. */
  Target_SetValueGeneratorREF nextTarget;   /*The instances for actual and next target point. */
} SetValueGenerator_s;
  

#define sizeof_SetValueGenerator_s sizeof(SetValueGenerator_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef SetValueGeneratorREFDEF
  #define SetValueGeneratorREFDEF
  typedef struct SetValueGeneratorREF_t { ObjectRefValuesJc refbase; struct SetValueGenerator_t* ref; } SetValueGeneratorREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct SetValueGenerator_X_t { ObjectArrayJc head; SetValueGeneratorREF data[50]; } SetValueGenerator_X;
typedef struct SetValueGenerator_Y_t { ObjectArrayJc head; SetValueGenerator_s data[50]; } SetValueGenerator_Y;

 extern struct ClassJc_t const reflection_SetValueGenerator_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_SetValueGenerator(OBJP) { CONST_ObjectJc(sizeof(SetValueGenerator_s), OBJP, &reflection_SetValueGenerator_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_SetValueGenerator_F(ObjectJc* othis, ThCxt* _thCxt);


#define kToTarget_State_SetValueGenerator 1  /*State Movement to the target. */
#define kStandStill_State_SetValueGenerator 2  /*State stand still on target. */
#define kWaitForNewTarget_State_SetValueGenerator 3  /*State stand still on target. */


/**Constructor needs to know a message interface:*/
METHOD_C struct SetValueGenerator_t* ctorO_SetValueGenerator(ObjectJc* othis, struct LogMessageFW_t* msg, struct OamVariables_t* oamVariables, ThCxt* _thCxt);

/**generates the next reference value.*/
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int16 step_SetValueGenerator_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int16 step_SetValueGenerator(ObjectJc* ithis, ThCxt* _thCxt);

/**stores a next target point*/
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C bool setTarget_i_SetValueGenerator_F(ObjectJc* ithis, int16 targetValue, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C bool setTarget_i_SetValueGenerator(ObjectJc* ithis, int16 targetValue, ThCxt* _thCxt);

/**returns true if the next target is required.*/
typedef bool MT_requiresNextTarget_SetValueGenerator(SetValueGenerator_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C bool requiresNextTarget_SetValueGenerator_F(SetValueGenerator_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C bool requiresNextTarget_SetValueGenerator(SetValueGenerator_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_SetValueGenerator[]; //marker for methodTable check
typedef struct Mtbl_SetValueGenerator_t
{ MtblHeadJc head;
  MT_requiresNextTarget_SetValueGenerator* requiresNextTarget;
  Mtbl_ObjectJc ObjectJc;
  //Method table of interfaces:
  Mtbl_SetValueGenerator_ifc SetValueGenerator_ifc;
} Mtbl_SetValueGenerator;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class SetValueGenerator : private SetValueGenerator_s
{ public:

  SetValueGenerator(struct LogMessageFW_t* msg, struct OamVariables_t* oamVariables){ init_ObjectJc(&this->base.object, sizeof(SetValueGenerator_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_SetValueGenerator_s, 0); ctorO_SetValueGenerator(&this->base.object, msg, oamVariables,  null/*_thCxt*/); }

  virtual bool requiresNextTarget(){  return requiresNextTarget_SetValueGenerator_F(this,  null/*_thCxt*/); }

  virtual bool setTarget(int16 targetValue){  return setTarget_i_SetValueGenerator_F(&this->base.SetValueGenerator_ifc.base.object, targetValue,  null/*_thCxt*/); }

  virtual int16 step(){  return step_SetValueGenerator_F(&this->base.SetValueGenerator_ifc.base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__PosCtrl_SetValueGenerator_h__
