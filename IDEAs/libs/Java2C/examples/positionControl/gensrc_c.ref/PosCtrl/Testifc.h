/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __PosCtrl_Testifc_h__
#define __PosCtrl_Testifc_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/


/*@CLASS_C Testifc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct Testifc_t
{ 
  union { ObjectJc object; } base; 
} Testifc_s;
  

#define sizeof_Testifc_s sizeof(Testifc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef TestifcREFDEF
  #define TestifcREFDEF
  typedef struct TestifcREF_t { ObjectRefValuesJc refbase; struct Testifc_t* ref; } TestifcREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct Testifc_X_t { ObjectArrayJc head; TestifcREF data[50]; } Testifc_X;
typedef struct Testifc_Y_t { ObjectArrayJc head; Testifc_s data[50]; } Testifc_Y;

 extern struct ClassJc_t const reflection_Testifc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_Testifc(OBJP) { CONST_ObjectJc(sizeof(Testifc_s), OBJP, &reflection_Testifc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_Testifc_F(ObjectJc* othis, ThCxt* _thCxt);




typedef void MT_test_Testifc(ObjectJc* ithis, int32 value, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void test_Testifc(ObjectJc* ithis, int32 value, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_Testifc[]; //marker for methodTable check
typedef struct Mtbl_Testifc_t
{ MtblHeadJc head;
  MT_test_Testifc* test;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_Testifc;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class Testifc : private Testifc_s
{ public:

  virtual void test(int32 value)=0;
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__PosCtrl_Testifc_h__
