/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __PosCtrl_WayCtrlThread_h__
#define __PosCtrl_WayCtrlThread_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef LogMessageFWREFDEF
  #define LogMessageFWREFDEF
  typedef struct LogMessageFWREF_t { ObjectRefValuesJc refbase; struct LogMessageFW_t* ref; } LogMessageFWREF;
#endif


/* J2C: includes *********************************************************/
#include "Jc/ThreadJc.h"  //interface


/*@CLASS_C WayCtrlThread @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct WayCtrlThread_t
{ 
  union { ObjectJc object; RunnableJc_s RunnableJc;} base; 
  LogMessageFWREF log; 
} WayCtrlThread_s;
  

#define sizeof_WayCtrlThread_s sizeof(WayCtrlThread_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef WayCtrlThreadREFDEF
  #define WayCtrlThreadREFDEF
  typedef struct WayCtrlThreadREF_t { ObjectRefValuesJc refbase; struct WayCtrlThread_t* ref; } WayCtrlThreadREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct WayCtrlThread_X_t { ObjectArrayJc head; WayCtrlThreadREF data[50]; } WayCtrlThread_X;
typedef struct WayCtrlThread_Y_t { ObjectArrayJc head; WayCtrlThread_s data[50]; } WayCtrlThread_Y;

 extern struct ClassJc_t const reflection_WayCtrlThread_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_WayCtrlThread(OBJP) { CONST_ObjectJc(sizeof(WayCtrlThread_s), OBJP, &reflection_WayCtrlThread_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_WayCtrlThread_F(ObjectJc* othis, ThCxt* _thCxt);




METHOD_C struct WayCtrlThread_t* ctorO_WayCtrlThread(ObjectJc* othis, struct LogMessageFW_t* log, ThCxt* _thCxt);

/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void run_WayCtrlThread_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void run_WayCtrlThread(ObjectJc* ithis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_WayCtrlThread[]; //marker for methodTable check
typedef struct Mtbl_WayCtrlThread_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
  //Method table of interfaces:
  Mtbl_RunnableJc RunnableJc;
} Mtbl_WayCtrlThread;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class WayCtrlThread : private WayCtrlThread_s
{ public:

  WayCtrlThread(struct LogMessageFW_t* log){ init_ObjectJc(&this->base.object, sizeof(WayCtrlThread_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_WayCtrlThread_s, 0); ctorO_WayCtrlThread(&this->base.object, log,  null/*_thCxt*/); }

  virtual void run(){ run_WayCtrlThread_F(&this->base.RunnableJc.base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__PosCtrl_WayCtrlThread_h__
