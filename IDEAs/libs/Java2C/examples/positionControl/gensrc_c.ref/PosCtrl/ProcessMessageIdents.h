/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __PosCtrl_ProcessMessageIdents_h__
#define __PosCtrl_ProcessMessageIdents_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/


/*@CLASS_C ProcessMessageIdents @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct ProcessMessageIdents_t
{ 
  union { ObjectJc object; } base; 
} ProcessMessageIdents_s;
  

#define sizeof_ProcessMessageIdents_s sizeof(ProcessMessageIdents_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef ProcessMessageIdentsREFDEF
  #define ProcessMessageIdentsREFDEF
  typedef struct ProcessMessageIdentsREF_t { ObjectRefValuesJc refbase; struct ProcessMessageIdents_t* ref; } ProcessMessageIdentsREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct ProcessMessageIdents_X_t { ObjectArrayJc head; ProcessMessageIdentsREF data[50]; } ProcessMessageIdents_X;
typedef struct ProcessMessageIdents_Y_t { ObjectArrayJc head; ProcessMessageIdents_s data[50]; } ProcessMessageIdents_Y;

 extern struct ClassJc_t const reflection_ProcessMessageIdents_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_ProcessMessageIdents(OBJP) { CONST_ObjectJc(sizeof(ProcessMessageIdents_s), OBJP, &reflection_ProcessMessageIdents_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_ProcessMessageIdents_F(ObjectJc* othis, ThCxt* _thCxt);


#define kProcessValueInStep_ProcessMessageIdents 1
#define kNewTarget_ProcessMessageIdents 2
#define kLifeCycle_ProcessMessageIdents 3
#define endPositionReached_ProcessMessageIdents 0x20
#define newTargetPosition_ProcessMessageIdents 0x21
#define setNewTargetPosition_ProcessMessageIdents 0x22
#define waitForTargetPosition_ProcessMessageIdents 0x23


/**Default constructor. */
METHOD_C struct ProcessMessageIdents_t* ctorO_ProcessMessageIdents(ObjectJc* othis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_ProcessMessageIdents[]; //marker for methodTable check
typedef struct Mtbl_ProcessMessageIdents_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_ProcessMessageIdents;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class ProcessMessageIdents : private ProcessMessageIdents_s
{ public:

  ProcessMessageIdents(){ init_ObjectJc(&this->base.object, sizeof(ProcessMessageIdents_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_ProcessMessageIdents_s, 0); ctorO_ProcessMessageIdents(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__PosCtrl_ProcessMessageIdents_h__
