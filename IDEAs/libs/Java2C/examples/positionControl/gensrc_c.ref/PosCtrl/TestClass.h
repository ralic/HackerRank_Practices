/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __PosCtrl_TestClass_h__
#define __PosCtrl_TestClass_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/


/*@CLASS_C TestClass @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct TestClass_t
{ 
  union { ObjectJc object; } base; 
  int32 a; 
} TestClass_s;
  

#define sizeof_TestClass_s sizeof(TestClass_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef TestClassREFDEF
  #define TestClassREFDEF
  typedef struct TestClassREF_t { ObjectRefValuesJc refbase; struct TestClass_t* ref; } TestClassREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct TestClass_X_t { ObjectArrayJc head; TestClassREF data[50]; } TestClass_X;
typedef struct TestClass_Y_t { ObjectArrayJc head; TestClass_s data[50]; } TestClass_Y;

 extern struct ClassJc_t const reflection_TestClass_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_TestClass(OBJP) { CONST_ObjectJc(sizeof(TestClass_s), OBJP, &reflection_TestClass_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_TestClass_F(ObjectJc* othis, ThCxt* _thCxt);




/**Default constructor. */
METHOD_C struct TestClass_t* ctorO_TestClass(ObjectJc* othis, ThCxt* _thCxt);

typedef void MT_set_TestClass(TestClass_s* ythis, int32 value, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void set_TestClass_F(TestClass_s* ythis, int32 value, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void set_TestClass(TestClass_s* ythis, int32 value, ThCxt* _thCxt);

typedef int32 MT_get_TestClass(TestClass_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 get_TestClass_F(TestClass_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 get_TestClass(TestClass_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_TestClass[]; //marker for methodTable check
typedef struct Mtbl_TestClass_t
{ MtblHeadJc head;
  MT_set_TestClass* set;
  MT_get_TestClass* get;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_TestClass;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class TestClass : private TestClass_s
{ public:

  TestClass(){ init_ObjectJc(&this->base.object, sizeof(TestClass_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_TestClass_s, 0); ctorO_TestClass(&this->base.object,  null/*_thCxt*/); }

  virtual int32 get(){  return get_TestClass_F(this,  null/*_thCxt*/); }

  virtual void set(int32 value){ set_TestClass_F(this, value,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__PosCtrl_TestClass_h__
