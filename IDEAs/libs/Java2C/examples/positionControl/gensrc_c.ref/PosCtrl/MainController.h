/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __PosCtrl_MainController_h__
#define __PosCtrl_MainController_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef CtrlBaseREFDEF
  #define CtrlBaseREFDEF
  typedef struct CtrlBaseREF_t { ObjectRefValuesJc refbase; struct CtrlBase_t* ref; } CtrlBaseREF;
#endif
#ifndef InnerTest_OnlyTest_Target_SetValueGeneratorREFDEF
  #define InnerTest_OnlyTest_Target_SetValueGeneratorREFDEF
  typedef struct InnerTest_OnlyTest_Target_SetValueGeneratorREF_t { ObjectRefValuesJc refbase; struct InnerTest_OnlyTest_Target_SetValueGenerator_t* ref; } InnerTest_OnlyTest_Target_SetValueGeneratorREF;
#endif
#ifndef LogMessageFWREFDEF
  #define LogMessageFWREFDEF
  typedef struct LogMessageFWREF_t { ObjectRefValuesJc refbase; struct LogMessageFW_t* ref; } LogMessageFWREF;
#endif
#ifndef TestClassREFDEF
  #define TestClassREFDEF
  typedef struct TestClassREF_t { ObjectRefValuesJc refbase; struct TestClass_t* ref; } TestClassREF;
#endif
#ifndef TestifcREFDEF
  #define TestifcREFDEF
  typedef struct TestifcREF_t { ObjectRefValuesJc refbase; struct Testifc_t* ref; } TestifcREF;
#endif
#ifndef WaitThreadOrganizerREFDEF
  #define WaitThreadOrganizerREFDEF
  typedef struct WaitThreadOrganizerREF_t { ObjectRefValuesJc refbase; struct WaitThreadOrganizer_t* ref; } WaitThreadOrganizerREF;
#endif
#ifndef WayActuatorREFDEF
  #define WayActuatorREFDEF
  typedef struct WayActuatorREF_t { ObjectRefValuesJc refbase; struct WayActuator_t* ref; } WayActuatorREF;
#endif
#ifndef WaySensorREFDEF
  #define WaySensorREFDEF
  typedef struct WaySensorREF_t { ObjectRefValuesJc refbase; struct WaySensor_t* ref; } WaySensorREF;
#endif


/* J2C: includes *********************************************************/
#include "J1c/LogMessageFile_MSG.h"  //embedded type in class data
#include "J1c/MsgDispatcher_MSG.h"  //embedded type in class data
#include "Jc/ThreadJc.h"  //superclass
#include "PosCtrl/OamVariables.h"  //embedded type in class data
#include "PosCtrl/PID_controller.h"  //embedded type in class data
#include "PosCtrl/ReadTargetFromText.h"  //embedded type in class data


/*@CLASS_C WayCtrlThread_MainController @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct WayCtrlThread_MainController_t
{ 
  union { ObjectJc object; ThreadJc_s super;} base; 
  struct MainController_t* outer;  //J2C: Reference to outer class, implicit in Java
} WayCtrlThread_MainController_s;
  

#define sizeof_WayCtrlThread_MainController_s sizeof(WayCtrlThread_MainController_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef WayCtrlThread_MainControllerREFDEF
  #define WayCtrlThread_MainControllerREFDEF
  typedef struct WayCtrlThread_MainControllerREF_t { ObjectRefValuesJc refbase; struct WayCtrlThread_MainController_t* ref; } WayCtrlThread_MainControllerREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct WayCtrlThread_MainController_X_t { ObjectArrayJc head; WayCtrlThread_MainControllerREF data[50]; } WayCtrlThread_MainController_X;
typedef struct WayCtrlThread_MainController_Y_t { ObjectArrayJc head; WayCtrlThread_MainController_s data[50]; } WayCtrlThread_MainController_Y;

 extern struct ClassJc_t const reflection_WayCtrlThread_MainController_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_WayCtrlThread_MainController(OBJP) { CONST_ObjectJc(sizeof(WayCtrlThread_MainController_s), OBJP, &reflection_WayCtrlThread_MainController_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_WayCtrlThread_MainController_F(ObjectJc* othis, ThCxt* _thCxt);




METHOD_C struct WayCtrlThread_MainController_t* ctorO_WayCtrlThread_MainController(struct MainController_t* outer, ObjectJc* othis, StringJc sName, ThCxt* _thCxt);

/**It is the main loop of the fast controller thread.*/
METHOD_C void run_WayCtrlThread_MainController(ObjectJc* ithis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_WayCtrlThread_MainController[]; //marker for methodTable check
typedef struct Mtbl_WayCtrlThread_MainController_t
{ MtblHeadJc head;
  Mtbl_ThreadJc ThreadJc;
} Mtbl_WayCtrlThread_MainController;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class WayCtrlThread_MainController : private WayCtrlThread_MainController_s
{ public:

  void run(){ run_WayCtrlThread_MainController(&this->base.super.base.RunnableJc.base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C MainController @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct MainController_t
{ 
  union { ObjectJc object; } base; 
  LogMessageFWREF msg;   /*Aggregation The message interface. It is public to enable static access via MainController.singleton. */
  WaitThreadOrganizerREF waitCycleOrganizer;   /*Reference to the implementing class of the interface method waitCycle().*/
  MsgDispatcher_MSG_s msgDispatcher;   /*Composition The message dispatcher.*/
  struct DispatcherThread_MsgDispatcher_MSG_t* msgDispatcherThread;   /*The instance for dispatching messages.*/
  LogMessageFile_MSG_s logMsgFileCtrlValues;   /*Embedded Composition a log message output to file. */
  LogMessageFile_MSG_s logMsgFileGC; 
  WaySensorREF way1Sensor;   /*Aggregation to a way sensor for input for control. */
  WaySensorREF way2Sensor;   /*Aggregation to a way sensor for input for control. */
  WayActuatorREF way1Actuator;   /*Aggregation to a way actuator, servomotor or such, output for control. */
  WayActuatorREF way2Actuator;   /*Aggregation to a way actuator, servomotor or such, output for control. */
  int16 wWay;   /*The set value for the way in 0.1mm-units from above -3 m to 3 m. */
  int16 dWay;   /*controller offset (deviation). Only a deviation in range of -32..32 mm is regarded.*/
  int16_Y* dWay1; 
  int16 addWay;   /*Simple set value generator as first example: add 0.5 mm per step in cycle time. */
  struct SetValueGenerator_ifc_t* mySetValueGenerator;   /*The instance of set-value generator.*/
  InnerTest_OnlyTest_Target_SetValueGeneratorREF testEnvJ2c; 
  int16 yOut;   /*The actuating variable for the movement. It is a voltage for a motor in range -10000 to 10000, unit milliVolt. */
  int16_Y* yOut2; 
  PID_controller_s pidCtrl1;   /*The PID controller.*/
  CtrlBaseREF pidCtrl2;   /*The PID controller as universal control module. */
  ReadTargetFromText_s targetReader;   /*This class helps to read target positions and its velocity from a text file. */
  TestifcREF testifc;   /*A interface reference to test.*/
  TestClassREF testDynamicReference;   /*A reference to test the garbage collection.*/
  OamVariables_s oamVariables;   /*Instance for the Oam-variables. */
  WayCtrlThread_MainController_s wayCtrlThread;   /**/
} MainController_s;
  

#define sizeof_MainController_s sizeof(MainController_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef MainControllerREFDEF
  #define MainControllerREFDEF
  typedef struct MainControllerREF_t { ObjectRefValuesJc refbase; struct MainController_t* ref; } MainControllerREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct MainController_X_t { ObjectArrayJc head; MainControllerREF data[50]; } MainController_X;
typedef struct MainController_Y_t { ObjectArrayJc head; MainController_s data[50]; } MainController_Y;

 extern struct ClassJc_t const reflection_MainController_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_MainController(OBJP) { CONST_ObjectJc(sizeof(MainController_s), OBJP, &reflection_MainController_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_MainController_F(ObjectJc* othis, ThCxt* _thCxt);


#define kMsgOutFile_MainController 4  /*Index to identify the LogMsg output to file.*/
#define kMsgOutFileGC_MainController 6  /*Index to identify the LogMsg output to file.*/
 extern struct MainController_t* singleton_MainController;   /*The MainController is a singelton, the constructor is private. */


/**The constructor of this Controller assumes, that the depended instances all built always.*/
METHOD_C struct MainController_t* ctorO_MainController(ObjectJc* othis, struct iRequireMainController_t* broker, struct LogMessageFW_t* msg1, struct WaitThreadOrganizer_t* waitCycleOrganizer, ThCxt* _thCxt);

/**Gets the set value in units mm*/
METHOD_C int16 getWaySetvalue_MainController(MainController_s* ythis, ThCxt* _thCxt);

/**Gets the offset of the controller on input*/
METHOD_C int32 getWayOffset_MainController(MainController_s* ythis, ThCxt* _thCxt);

/**prepares the working of the controller, called on startup from outside.*/
METHOD_C void prepare_MainController(MainController_s* ythis, ThCxt* _thCxt);

METHOD_C void start_MainController(MainController_s* ythis, ThCxt* _thCxt);

METHOD_C void wireFunction_MainController(MainController_s* ythis, ThCxt* _thCxt);

/**This is the cyclic called method to execute the controlling. It is called from outside. */
METHOD_C void step_MainController(MainController_s* ythis, ThCxt* _thCxt);

/**Get the internal value of the integrator of the first way controller. */
METHOD_C float getWay11Intg_MainController(MainController_s* ythis, ThCxt* _thCxt);

/**stores a next target point*/
METHOD_C bool setTarget_MainController(MainController_s* ythis, int16 targetValue, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_MainController[]; //marker for methodTable check
typedef struct Mtbl_MainController_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_MainController;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class MainController : private MainController_s
{ public:

  MainController(struct iRequireMainController_t* broker, struct LogMessageFW_t* msg1, struct WaitThreadOrganizer_t* waitCycleOrganizer){ init_ObjectJc(&this->base.object, sizeof(MainController_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_MainController_s, 0); ctorO_MainController(&this->base.object, broker, msg1, waitCycleOrganizer,  null/*_thCxt*/); }

  MainController(StringJcpp sName){ init_ObjectJc(&this->base.object, sizeof(MainController_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_MainController_s, 0); ctorO_WayCtrlThread_MainController(&this->base.object, sName,  null/*_thCxt*/); }

  float getWay11Intg(){  return getWay11Intg_MainController(this,  null/*_thCxt*/); }

  int32 getWayOffset(){  return getWayOffset_MainController(this,  null/*_thCxt*/); }

  int16 getWaySetvalue(){  return getWaySetvalue_MainController(this,  null/*_thCxt*/); }

  void prepare(){ prepare_MainController(this,  null/*_thCxt*/); }

  bool setTarget(int16 targetValue){  return setTarget_MainController(this, targetValue,  null/*_thCxt*/); }

  void start(){ start_MainController(this,  null/*_thCxt*/); }

  void step(){ step_MainController(this,  null/*_thCxt*/); }

  void wireFunction(){ wireFunction_MainController(this,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__PosCtrl_MainController_h__
