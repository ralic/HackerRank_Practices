/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __PosCtrl_SetValueGenerator_ifc_h__
#define __PosCtrl_SetValueGenerator_ifc_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/


/*@CLASS_C SetValueGenerator_ifc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct SetValueGenerator_ifc_t
{ 
  union { ObjectJc object; } base; 
} SetValueGenerator_ifc_s;
  

#define sizeof_SetValueGenerator_ifc_s sizeof(SetValueGenerator_ifc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef SetValueGenerator_ifcREFDEF
  #define SetValueGenerator_ifcREFDEF
  typedef struct SetValueGenerator_ifcREF_t { ObjectRefValuesJc refbase; struct SetValueGenerator_ifc_t* ref; } SetValueGenerator_ifcREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct SetValueGenerator_ifc_X_t { ObjectArrayJc head; SetValueGenerator_ifcREF data[50]; } SetValueGenerator_ifc_X;
typedef struct SetValueGenerator_ifc_Y_t { ObjectArrayJc head; SetValueGenerator_ifc_s data[50]; } SetValueGenerator_ifc_Y;

 extern struct ClassJc_t const reflection_SetValueGenerator_ifc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_SetValueGenerator_ifc(OBJP) { CONST_ObjectJc(sizeof(SetValueGenerator_ifc_s), OBJP, &reflection_SetValueGenerator_ifc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_SetValueGenerator_ifc_F(ObjectJc* othis, ThCxt* _thCxt);




/**stores a next target point*/
typedef bool MT_setTarget_SetValueGenerator_ifc(ObjectJc* ithis, int16 targetValue, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C bool setTarget_SetValueGenerator_ifc(ObjectJc* ithis, int16 targetValue, ThCxt* _thCxt);

/**generates the next reference value.*/
typedef int16 MT_step_SetValueGenerator_ifc(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int16 step_SetValueGenerator_ifc(ObjectJc* ithis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_SetValueGenerator_ifc[]; //marker for methodTable check
typedef struct Mtbl_SetValueGenerator_ifc_t
{ MtblHeadJc head;
  MT_setTarget_SetValueGenerator_ifc* setTarget;
  MT_step_SetValueGenerator_ifc* step;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_SetValueGenerator_ifc;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class SetValueGenerator_ifc : private SetValueGenerator_ifc_s
{ public:

  virtual bool setTarget(int16 targetValue)=0;

  virtual int16 step()=0;
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__PosCtrl_SetValueGenerator_ifc_h__
