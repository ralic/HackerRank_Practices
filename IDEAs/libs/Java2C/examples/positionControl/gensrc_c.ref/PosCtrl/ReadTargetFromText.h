/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __PosCtrl_ReadTargetFromText_h__
#define __PosCtrl_ReadTargetFromText_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/
#include "J1c/StringPartJc.h"  //embedded type in class data
#include "Jc/StringJc.h"  //embedded type in class data


/*@CLASS_C Target_ReadTargetFromText @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct Target_ReadTargetFromText_t
{ 
  union { ObjectJc object; } base; 
  int16 position; 
  int16 velocity; 
} Target_ReadTargetFromText_s;
  

#define sizeof_Target_ReadTargetFromText_s sizeof(Target_ReadTargetFromText_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef Target_ReadTargetFromTextREFDEF
  #define Target_ReadTargetFromTextREFDEF
  typedef struct Target_ReadTargetFromTextREF_t { ObjectRefValuesJc refbase; struct Target_ReadTargetFromText_t* ref; } Target_ReadTargetFromTextREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct Target_ReadTargetFromText_X_t { ObjectArrayJc head; Target_ReadTargetFromTextREF data[50]; } Target_ReadTargetFromText_X;
typedef struct Target_ReadTargetFromText_Y_t { ObjectArrayJc head; Target_ReadTargetFromText_s data[50]; } Target_ReadTargetFromText_Y;

 extern struct ClassJc_t const reflection_Target_ReadTargetFromText_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_Target_ReadTargetFromText(OBJP) { CONST_ObjectJc(sizeof(Target_ReadTargetFromText_s), OBJP, &reflection_Target_ReadTargetFromText_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_Target_ReadTargetFromText_F(ObjectJc* othis, ThCxt* _thCxt);




/**Default constructor. */
METHOD_C struct Target_ReadTargetFromText_t* ctorO_Target_ReadTargetFromText(ObjectJc* othis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_Target_ReadTargetFromText[]; //marker for methodTable check
typedef struct Mtbl_Target_ReadTargetFromText_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_Target_ReadTargetFromText;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class Target_ReadTargetFromText : private Target_ReadTargetFromText_s
{ public:

  Target_ReadTargetFromText(){ init_ObjectJc(&this->base.object, sizeof(Target_ReadTargetFromText_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_Target_ReadTargetFromText_s, 0); ctorO_Target_ReadTargetFromText(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C ReadTargetFromText @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct ReadTargetFromText_t
{ 
  union { ObjectJc object; } base; 
  StringJc textTarget; 
  struct targets_Y { ObjectArrayJc head; Target_ReadTargetFromText_s data[100]; }targets;   /*Some space to store target points*/
  StringPartJc_s spTextTarget; 
} ReadTargetFromText_s;
  

#define sizeof_ReadTargetFromText_s sizeof(ReadTargetFromText_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef ReadTargetFromTextREFDEF
  #define ReadTargetFromTextREFDEF
  typedef struct ReadTargetFromTextREF_t { ObjectRefValuesJc refbase; struct ReadTargetFromText_t* ref; } ReadTargetFromTextREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct ReadTargetFromText_X_t { ObjectArrayJc head; ReadTargetFromTextREF data[50]; } ReadTargetFromText_X;
typedef struct ReadTargetFromText_Y_t { ObjectArrayJc head; ReadTargetFromText_s data[50]; } ReadTargetFromText_Y;

 extern struct ClassJc_t const reflection_ReadTargetFromText_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_ReadTargetFromText(OBJP) { CONST_ObjectJc(sizeof(ReadTargetFromText_s), OBJP, &reflection_ReadTargetFromText_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_ReadTargetFromText_F(ObjectJc* othis, ThCxt* _thCxt);




METHOD_C struct ReadTargetFromText_t* ctorO_ReadTargetFromText(ObjectJc* othis, ThCxt* _thCxt);

typedef void MT_test_ReadTargetFromText(ReadTargetFromText_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void test_ReadTargetFromText_F(ReadTargetFromText_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void test_ReadTargetFromText(ReadTargetFromText_s* ythis, ThCxt* _thCxt);

typedef int32 MT_readTargetsFromText_ReadTargetFromText(ReadTargetFromText_s* ythis, StringJc input, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 readTargetsFromText_ReadTargetFromText_F(ReadTargetFromText_s* ythis, StringJc input, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 readTargetsFromText_ReadTargetFromText(ReadTargetFromText_s* ythis, StringJc input, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_ReadTargetFromText[]; //marker for methodTable check
typedef struct Mtbl_ReadTargetFromText_t
{ MtblHeadJc head;
  MT_test_ReadTargetFromText* test;
  MT_readTargetsFromText_ReadTargetFromText* readTargetsFromText;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_ReadTargetFromText;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class ReadTargetFromText : private ReadTargetFromText_s
{ public:

  ReadTargetFromText(){ init_ObjectJc(&this->base.object, sizeof(ReadTargetFromText_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_ReadTargetFromText_s, 0); ctorO_ReadTargetFromText(&this->base.object,  null/*_thCxt*/); }

  virtual int32 readTargetsFromText(StringJcpp input){  return readTargetsFromText_ReadTargetFromText_F(this, input,  null/*_thCxt*/); }

  virtual void test(){ test_ReadTargetFromText_F(this,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__PosCtrl_ReadTargetFromText_h__
