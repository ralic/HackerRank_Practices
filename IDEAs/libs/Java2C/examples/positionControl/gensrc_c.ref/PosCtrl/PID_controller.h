/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __PosCtrl_PID_controller_h__
#define __PosCtrl_PID_controller_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/
#include "PosCtrl/CtrlBase.h"  //interface


/*@CLASS_C PID_controller @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct PID_controller_t
{ 
  union { ObjectJc object; CtrlBase_s CtrlBase;} base; 
  int32 intgVal;   /*The integral value of the controller. */
  int16 lastForDiff;   /*The last value to build the difference. */
  int16 kI;   /*The I amplification, unit per sample step*/
  int16 kP;   /*The P amplification*/
  int16 kD;   /*The D amplification*/
  int16_Y* xPID;   /*The reference to the input value. */
  int16_Y* yPID;   /*The output value. */
} PID_controller_s;
  

#define sizeof_PID_controller_s sizeof(PID_controller_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef PID_controllerREFDEF
  #define PID_controllerREFDEF
  typedef struct PID_controllerREF_t { ObjectRefValuesJc refbase; struct PID_controller_t* ref; } PID_controllerREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct PID_controller_X_t { ObjectArrayJc head; PID_controllerREF data[50]; } PID_controller_X;
typedef struct PID_controller_Y_t { ObjectArrayJc head; PID_controller_s data[50]; } PID_controller_Y;

 extern struct ClassJc_t const reflection_PID_controller_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_PID_controller(OBJP) { CONST_ObjectJc(sizeof(PID_controller_s), OBJP, &reflection_PID_controller_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_PID_controller_F(ObjectJc* othis, ThCxt* _thCxt);




/**Default constructor. */
METHOD_C struct PID_controller_t* ctorO_PID_controller(ObjectJc* othis, ThCxt* _thCxt);

/**the step-method, called one-time per cycle-time to calculate the next value.*/
typedef int16 MT_calculate_PID_controller(PID_controller_s* ythis, int16 input, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int16 calculate_PID_controller_F(PID_controller_s* ythis, int16 input, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int16 calculate_PID_controller(PID_controller_s* ythis, int16 input, ThCxt* _thCxt);

/**Sets the integral value to a predefined value.*/
typedef void MT_setIntg_PID_controller(PID_controller_s* ythis, int16 setValue, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void setIntg_PID_controller_F(PID_controller_s* ythis, int16 setValue, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void setIntg_PID_controller(PID_controller_s* ythis, int16 setValue, ThCxt* _thCxt);

/**Gets the value of the internal integrator for displayment*/
typedef float MT_getIntg_PID_controller(PID_controller_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C float getIntg_PID_controller_F(PID_controller_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C float getIntg_PID_controller(PID_controller_s* ythis, ThCxt* _thCxt);

/**Connect the Input of PID controller to a short variable.*/
typedef void MT_connectInput_PID_controller(PID_controller_s* ythis, int16_Y* ref, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void connectInput_PID_controller_F(PID_controller_s* ythis, int16_Y* ref, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void connectInput_PID_controller(PID_controller_s* ythis, int16_Y* ref, ThCxt* _thCxt);

/**provides the reference to the output for wiring to any connection.*/
typedef int16_Y* MT_provideOutput_PID_controller(PID_controller_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int16_Y* provideOutput_PID_controller_F(PID_controller_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int16_Y* provideOutput_PID_controller(PID_controller_s* ythis, ThCxt* _thCxt);

/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void init_PID_controller_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void init_PID_controller(ObjectJc* ithis, ThCxt* _thCxt);

/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void parametrize_PID_controller_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void parametrize_PID_controller(ObjectJc* ithis, ThCxt* _thCxt);

/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void reset_PID_controller_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void reset_PID_controller(ObjectJc* ithis, ThCxt* _thCxt);

/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void step_i_PID_controller_F(ObjectJc* ithis, int32 time, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void step_i_PID_controller(ObjectJc* ithis, int32 time, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_PID_controller[]; //marker for methodTable check
typedef struct Mtbl_PID_controller_t
{ MtblHeadJc head;
  MT_calculate_PID_controller* calculate;
  MT_setIntg_PID_controller* setIntg;
  MT_getIntg_PID_controller* getIntg;
  MT_connectInput_PID_controller* connectInput;
  MT_provideOutput_PID_controller* provideOutput;
  Mtbl_ObjectJc ObjectJc;
  //Method table of interfaces:
  Mtbl_CtrlBase CtrlBase;
} Mtbl_PID_controller;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class PID_controller : private PID_controller_s
{ public:

  virtual int16 calculate(int16 input){  return calculate_PID_controller_F(this, input,  null/*_thCxt*/); }

  virtual void connectInput(int16_Y* ref){ connectInput_PID_controller_F(this, ref,  null/*_thCxt*/); }

  PID_controller(){ init_ObjectJc(&this->base.object, sizeof(PID_controller_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_PID_controller_s, 0); ctorO_PID_controller(&this->base.object,  null/*_thCxt*/); }

  virtual float getIntg(){  return getIntg_PID_controller_F(this,  null/*_thCxt*/); }

  virtual void init(){ init_PID_controller_F(&this->base.CtrlBase.base.object,  null/*_thCxt*/); }

  virtual void parametrize(){ parametrize_PID_controller_F(&this->base.CtrlBase.base.object,  null/*_thCxt*/); }

  virtual int16_Y* provideOutput(){  return provideOutput_PID_controller_F(this,  null/*_thCxt*/); }

  virtual void reset(){ reset_PID_controller_F(&this->base.CtrlBase.base.object,  null/*_thCxt*/); }

  virtual void setIntg(int16 setValue){ setIntg_PID_controller_F(this, setValue,  null/*_thCxt*/); }

  virtual void step(int32 time){ step_i_PID_controller_F(&this->base.CtrlBase.base.object, time,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__PosCtrl_PID_controller_h__
