/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __PosCtrl_WaitThreadOrganizer_h__
#define __PosCtrl_WaitThreadOrganizer_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/


/*@CLASS_C WaitThreadOrganizer @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct WaitThreadOrganizer_t
{ 
  union { ObjectJc object; } base; 
} WaitThreadOrganizer_s;
  

#define sizeof_WaitThreadOrganizer_s sizeof(WaitThreadOrganizer_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef WaitThreadOrganizerREFDEF
  #define WaitThreadOrganizerREFDEF
  typedef struct WaitThreadOrganizerREF_t { ObjectRefValuesJc refbase; struct WaitThreadOrganizer_t* ref; } WaitThreadOrganizerREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct WaitThreadOrganizer_X_t { ObjectArrayJc head; WaitThreadOrganizerREF data[50]; } WaitThreadOrganizer_X;
typedef struct WaitThreadOrganizer_Y_t { ObjectArrayJc head; WaitThreadOrganizer_s data[50]; } WaitThreadOrganizer_Y;

 extern struct ClassJc_t const reflection_WaitThreadOrganizer_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_WaitThreadOrganizer(OBJP) { CONST_ObjectJc(sizeof(WaitThreadOrganizer_s), OBJP, &reflection_WaitThreadOrganizer_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_WaitThreadOrganizer_F(ObjectJc* othis, ThCxt* _thCxt);




typedef void MT_waitCycle_WaitThreadOrganizer(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void waitCycle_WaitThreadOrganizer(ObjectJc* ithis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_WaitThreadOrganizer[]; //marker for methodTable check
typedef struct Mtbl_WaitThreadOrganizer_t
{ MtblHeadJc head;
  MT_waitCycle_WaitThreadOrganizer* waitCycle;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_WaitThreadOrganizer;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class WaitThreadOrganizer : private WaitThreadOrganizer_s
{ public:

  virtual void waitCycle()=0;
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__PosCtrl_WaitThreadOrganizer_h__
