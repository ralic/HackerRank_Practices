/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __PosCtrl_OamVariables_h__
#define __PosCtrl_OamVariables_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/
#include "J1c/ByteDataAccessJc.h"  //superclass


/*@CLASS_C OamVariablesByteAccess_OamVariables @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct OamVariablesByteAccess_OamVariables_t
{ 
  union { ObjectJc object; ByteDataAccessJc_s super;} base; 
} OamVariablesByteAccess_OamVariables_s;
  

#define sizeof_OamVariablesByteAccess_OamVariables_s sizeof(OamVariablesByteAccess_OamVariables_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef OamVariablesByteAccess_OamVariablesREFDEF
  #define OamVariablesByteAccess_OamVariablesREFDEF
  typedef struct OamVariablesByteAccess_OamVariablesREF_t { ObjectRefValuesJc refbase; struct OamVariablesByteAccess_OamVariables_t* ref; } OamVariablesByteAccess_OamVariablesREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct OamVariablesByteAccess_OamVariables_X_t { ObjectArrayJc head; OamVariablesByteAccess_OamVariablesREF data[50]; } OamVariablesByteAccess_OamVariables_X;
typedef struct OamVariablesByteAccess_OamVariables_Y_t { ObjectArrayJc head; OamVariablesByteAccess_OamVariables_s data[50]; } OamVariablesByteAccess_OamVariables_Y;

 extern struct ClassJc_t const reflection_OamVariablesByteAccess_OamVariables_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_OamVariablesByteAccess_OamVariables(OBJP) { CONST_ObjectJc(sizeof(OamVariablesByteAccess_OamVariables_s), OBJP, &reflection_OamVariablesByteAccess_OamVariables_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_OamVariablesByteAccess_OamVariables_F(ObjectJc* othis, ThCxt* _thCxt);


#define k_way_OamVariablesByteAccess_OamVariables 0
#define k_wway_OamVariablesByteAccess_OamVariables 4
#define k_targetWay_OamVariablesByteAccess_OamVariables 6
#define k_dway_OamVariablesByteAccess_OamVariables 8
#define k_output_OamVariablesByteAccess_OamVariables 10
#define k_stateSetValueGen_OamVariablesByteAccess_OamVariables 12
#define k_ctController_OamVariablesByteAccess_OamVariables 14
#define k_ctSetValue_OamVariablesByteAccess_OamVariables 15
#define sizeofHead_OamVariablesByteAccess_OamVariables 16


/**Default constructor. */
METHOD_C struct OamVariablesByteAccess_OamVariables_t* ctorO_OamVariablesByteAccess_OamVariables(ObjectJc* othis, ThCxt* _thCxt);

/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void specifyEmptyDefaultData_OamVariablesByteAccess_OamVariables_F(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void specifyEmptyDefaultData_OamVariablesByteAccess_OamVariables(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);

/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 specifyLengthElement_OamVariablesByteAccess_OamVariables_F(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 specifyLengthElement_OamVariablesByteAccess_OamVariables(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);

/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 specifyLengthElementHead_OamVariablesByteAccess_OamVariables_F(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 specifyLengthElementHead_OamVariablesByteAccess_OamVariables(ByteDataAccessJc_s* ithis, ThCxt* _thCxt);

typedef void MT_addToAndSetBinData_OamVariablesByteAccess_OamVariables(OamVariablesByteAccess_OamVariables_s* ythis, struct ByteDataAccessJc_t* parent, struct OamVariables_t* data, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void addToAndSetBinData_OamVariablesByteAccess_OamVariables_F(OamVariablesByteAccess_OamVariables_s* ythis, struct ByteDataAccessJc_t* parent, struct OamVariables_t* data, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void addToAndSetBinData_OamVariablesByteAccess_OamVariables(OamVariablesByteAccess_OamVariables_s* ythis, struct ByteDataAccessJc_t* parent, struct OamVariables_t* data, ThCxt* _thCxt);

typedef void MT_addToAndGetBinData_OamVariablesByteAccess_OamVariables(OamVariablesByteAccess_OamVariables_s* ythis, struct ByteDataAccessJc_t* parent, struct OamVariables_t* data, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void addToAndGetBinData_OamVariablesByteAccess_OamVariables_F(OamVariablesByteAccess_OamVariables_s* ythis, struct ByteDataAccessJc_t* parent, struct OamVariables_t* data, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void addToAndGetBinData_OamVariablesByteAccess_OamVariables(OamVariablesByteAccess_OamVariables_s* ythis, struct ByteDataAccessJc_t* parent, struct OamVariables_t* data, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_OamVariablesByteAccess_OamVariables[]; //marker for methodTable check
typedef struct Mtbl_OamVariablesByteAccess_OamVariables_t
{ MtblHeadJc head;
  MT_addToAndSetBinData_OamVariablesByteAccess_OamVariables* addToAndSetBinData;
  MT_addToAndGetBinData_OamVariablesByteAccess_OamVariables* addToAndGetBinData;
  Mtbl_ByteDataAccessJc ByteDataAccessJc;
} Mtbl_OamVariablesByteAccess_OamVariables;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class OamVariablesByteAccess_OamVariables : private OamVariablesByteAccess_OamVariables_s
{ public:

  virtual void addToAndGetBinData(struct ByteDataAccessJc_t* parent, struct OamVariables_t* data){ addToAndGetBinData_OamVariablesByteAccess_OamVariables_F(this, parent, data,  null/*_thCxt*/); }

  virtual void addToAndSetBinData(struct ByteDataAccessJc_t* parent, struct OamVariables_t* data){ addToAndSetBinData_OamVariablesByteAccess_OamVariables_F(this, parent, data,  null/*_thCxt*/); }

  OamVariablesByteAccess_OamVariables(){ init_ObjectJc(&this->base.object, sizeof(OamVariablesByteAccess_OamVariables_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_OamVariablesByteAccess_OamVariables_s, 0); ctorO_OamVariablesByteAccess_OamVariables(&this->base.object,  null/*_thCxt*/); }

  virtual void specifyEmptyDefaultData(){ specifyEmptyDefaultData_OamVariablesByteAccess_OamVariables_F(&this->base.super,  null/*_thCxt*/); }

  virtual int32 specifyLengthElementHead(){  return specifyLengthElementHead_OamVariablesByteAccess_OamVariables_F(&this->base.super,  null/*_thCxt*/); }

  virtual int32 specifyLengthElement(){  return specifyLengthElement_OamVariablesByteAccess_OamVariables_F(&this->base.super,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C OamVariables @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct OamVariables_t
{ 
  union { ObjectJc object; } base; 
  int32 way;   /*The current way, the measurement value. 1 um-unit. */
  int16 wway;   /*The current way, set value. 100 um-unit*/
  int16 targetWay;   /*The target way, 100 um-unit. */
  int16 dway;   /*The abbreviation of the way-controller. 1 m-unit */
  int16 output;   /*The output value of the controller. */
  int16 stateSetValueGen; 
  int8 ctController; 
  int8 ctSetValue; 
} OamVariables_s;
  

#define sizeof_OamVariables_s sizeof(OamVariables_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef OamVariablesREFDEF
  #define OamVariablesREFDEF
  typedef struct OamVariablesREF_t { ObjectRefValuesJc refbase; struct OamVariables_t* ref; } OamVariablesREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct OamVariables_X_t { ObjectArrayJc head; OamVariablesREF data[50]; } OamVariables_X;
typedef struct OamVariables_Y_t { ObjectArrayJc head; OamVariables_s data[50]; } OamVariables_Y;

 extern struct ClassJc_t const reflection_OamVariables_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_OamVariables(OBJP) { CONST_ObjectJc(sizeof(OamVariables_s), OBJP, &reflection_OamVariables_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_OamVariables_F(ObjectJc* othis, ThCxt* _thCxt);




/**Default constructor. */
METHOD_C struct OamVariables_t* ctorO_OamVariables(ObjectJc* othis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_OamVariables[]; //marker for methodTable check
typedef struct Mtbl_OamVariables_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_OamVariables;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class OamVariables : private OamVariables_s
{ public:

  OamVariables(){ init_ObjectJc(&this->base.object, sizeof(OamVariables_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_OamVariables_s, 0); ctorO_OamVariables(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__PosCtrl_OamVariables_h__
