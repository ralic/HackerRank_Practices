/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __TestStringFormatter_Test_h__
#define __TestStringFormatter_Test_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/


/*@CLASS_C TestStringFormatter_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct TestStringFormatter_Test_t
{ 
  union { ObjectJc object; } base; 
  struct SbY_buffer_t { StringBufferJc sb; char _b[196]; }buffer; 
} TestStringFormatter_Test_s;
  

#define sizeof_TestStringFormatter_Test_s sizeof(TestStringFormatter_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef TestStringFormatter_TestREFDEF
  #define TestStringFormatter_TestREFDEF
  typedef struct TestStringFormatter_TestREF_t { ObjectRefValuesJc refbase; struct TestStringFormatter_Test_t* ref; } TestStringFormatter_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct TestStringFormatter_Test_X_t { ObjectArrayJc head; TestStringFormatter_TestREF data[50]; } TestStringFormatter_Test_X;
typedef struct TestStringFormatter_Test_Y_t { ObjectArrayJc head; TestStringFormatter_Test_s data[50]; } TestStringFormatter_Test_Y;

 extern struct ClassJc_t const reflection_TestStringFormatter_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_TestStringFormatter_Test(OBJP) { CONST_ObjectJc(sizeof(TestStringFormatter_Test_s), OBJP, &reflection_TestStringFormatter_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_TestStringFormatter_Test_F(ObjectJc* othis, ThCxt* _thCxt);




/**Default constructor. */
METHOD_C struct TestStringFormatter_Test_t* ctorO_TestStringFormatter_Test(ObjectJc* othis, ThCxt* _thCxt);

typedef void MT_test_TestStringFormatter_Test(TestStringFormatter_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void test_TestStringFormatter_Test_F(TestStringFormatter_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void test_TestStringFormatter_Test(TestStringFormatter_Test_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_TestStringFormatter_Test[]; //marker for methodTable check
typedef struct Mtbl_TestStringFormatter_Test_t
{ MtblHeadJc head;
  MT_test_TestStringFormatter_Test* test;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_TestStringFormatter_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class TestStringFormatter_Test : private TestStringFormatter_Test_s
{ public:

  TestStringFormatter_Test(){ init_ObjectJc(&this->base.object, sizeof(TestStringFormatter_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_TestStringFormatter_Test_s, 0); ctorO_TestStringFormatter_Test(&this->base.object,  null/*_thCxt*/); }

  virtual void test(){ test_TestStringFormatter_Test_F(this,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__TestStringFormatter_Test_h__
