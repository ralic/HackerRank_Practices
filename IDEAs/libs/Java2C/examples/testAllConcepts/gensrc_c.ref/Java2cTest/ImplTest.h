/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __Java2cTest_ImplTest_h__
#define __Java2cTest_ImplTest_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef IfcToTestREFDEF
  #define IfcToTestREFDEF
  typedef struct IfcToTestREF_t { ObjectRefValuesJc refbase; struct IfcToTest_t* ref; } IfcToTestREF;
#endif


/* J2C: includes *********************************************************/
#include "AnyClass_Test.h"  //embedded type in class data
#include "Ifc2_Test.h"  //interface
#include "Java2cTest/IfcTest.h"  //interface
#include "SimpleClass_Test.h"  //superclass


/*@CLASS_C ImplIfcTest @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct ImplIfcTest_t
{ 
  union { ObjectJc object; SimpleClass_Test_s super;IfcToTest_s IfcToTest;Ifc2_Test_s Ifc2_Test;} base; 
  int32 val;   /*Example for a simple class variable. Mark value to difference several instances. */
  IfcToTestREF ref;   /*An enhanced reference.*/
  AnyClass_Test_s data; 
} ImplIfcTest_s;
  

#define sizeof_ImplIfcTest_s sizeof(ImplIfcTest_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef ImplIfcTestREFDEF
  #define ImplIfcTestREFDEF
  typedef struct ImplIfcTestREF_t { ObjectRefValuesJc refbase; struct ImplIfcTest_t* ref; } ImplIfcTestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct ImplIfcTest_X_t { ObjectArrayJc head; ImplIfcTestREF data[50]; } ImplIfcTest_X;
typedef struct ImplIfcTest_Y_t { ObjectArrayJc head; ImplIfcTest_s data[50]; } ImplIfcTest_Y;

 extern struct ClassJc_t const reflection_ImplIfcTest_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_ImplIfcTest(OBJP) { CONST_ObjectJc(sizeof(ImplIfcTest_s), OBJP, &reflection_ImplIfcTest_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_ImplIfcTest_F(ObjectJc* othis, ThCxt* _thCxt);




/**Example for simple Constructor*/
METHOD_C struct ImplIfcTest_t* ctorO_ImplIfcTest(ObjectJc* othis, int32 val, ThCxt* _thCxt);

/**Example for a method which is override-able and implements an interface method.*/
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 processIfcMethod_i_ImplIfcTest_F(ObjectJc* ithis, int32 input, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 processIfcMethod_i_ImplIfcTest(ObjectJc* ithis, int32 input, ThCxt* _thCxt);

/**Example for a method which is final but implements an interface method (the same is if it*/
METHOD_C float processIfcMethod_f_ImplIfcTest(ObjectJc* ithis, float input, ThCxt* _thCxt);

/**This method is declared in the interface {@link Ifc#processIfcMethod(int)} .*/
METHOD_C int32 anotherIfcmethod_i_ImplIfcTest(ObjectJc* ithis, int32 input, ThCxt* _thCxt);

/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C StringJc toString_ImplIfcTest_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C StringJc toString_ImplIfcTest(ObjectJc* ithis, ThCxt* _thCxt);

/**Example for a simple method, no implementation, no override-able.*/
METHOD_C int32 testImplIfc_ImplIfcTest(ImplIfcTest_s* ythis, ThCxt* _thCxt);

/**This method implements {@link Ifc2#testIfc2(float)}. */
METHOD_C float testIfc2_f_ImplIfcTest(ObjectJc* ithis, float input, ThCxt* _thCxt);

/**This method should demonstrate override-able methods for Java2C outside of interface-concepts.*/
typedef int32 MT_testOverrideAble_ImplIfcTest(ImplIfcTest_s* ythis, float value, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 testOverrideAble_ImplIfcTest_F(ImplIfcTest_s* ythis, float value, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 testOverrideAble_ImplIfcTest(ImplIfcTest_s* ythis, float value, ThCxt* _thCxt);

/**This method should demonstrate overridden methods of base classes*/
typedef int32 MT_testOverridden_ImplIfcTest(ImplIfcTest_s* ythis, float value, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 testOverridden_ImplIfcTest_F(ImplIfcTest_s* ythis, float value, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 testOverridden_ImplIfcTest(ImplIfcTest_s* ythis, float value, ThCxt* _thCxt);

/**This method demonstrates, how a concatenation of method calls works, if the method returns this itself.*/
METHOD_C struct ImplIfcTest_t* returnThis_ImplIfcTest(ImplIfcTest_s* ythis, int32 value, ThCxt* _thCxt);

/**This method demonstrates, how a concatenation of method calls works, if the method returns this itself.*/
typedef struct ImplIfcTest_t* MT_returnThisOverrideable_ImplIfcTest(ImplIfcTest_s* ythis, int32 value, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct ImplIfcTest_t* returnThisOverrideable_ImplIfcTest_F(ImplIfcTest_s* ythis, int32 value, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct ImplIfcTest_t* returnThisOverrideable_ImplIfcTest(ImplIfcTest_s* ythis, int32 value, ThCxt* _thCxt);

/**This method demonstrates, how a concatenation of method calls works, if the method returns any other reference.*/
typedef struct AnyClass_Test_t* MT_returnAnyInstanceOverrideable_ImplIfcTest(ImplIfcTest_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct AnyClass_Test_t* returnAnyInstanceOverrideable_ImplIfcTest_F(ImplIfcTest_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct AnyClass_Test_t* returnAnyInstanceOverrideable_ImplIfcTest(ImplIfcTest_s* ythis, ThCxt* _thCxt);

/**This method demonstrates, how a concatenation of method calls works, if the method returns any other reference.*/
METHOD_C struct AnyClass_Test_t* returnAnyInstance_ImplIfcTest(ImplIfcTest_s* ythis, ThCxt* _thCxt);

/**This methods implements both methods declared in Interface {@link Ifc#anotherIfcmethod(float)}*/
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C float anotherIfcmethod_f_ImplIfcTest_F(ObjectJc* ithis, float input, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C float anotherIfcmethod_f_ImplIfcTest(ObjectJc* ithis, float input, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_ImplIfcTest[]; //marker for methodTable check
typedef struct Mtbl_ImplIfcTest_t
{ MtblHeadJc head;
  MT_testOverrideAble_ImplIfcTest* testOverrideAble;
  MT_testOverridden_ImplIfcTest* testOverridden;
  MT_returnThisOverrideable_ImplIfcTest* returnThisOverrideable;
  MT_returnAnyInstanceOverrideable_ImplIfcTest* returnAnyInstanceOverrideable;
  Mtbl_SimpleClass_Test SimpleClass_Test;
  //Method table of interfaces:
  Mtbl_IfcToTest IfcToTest;
  Mtbl_Ifc2_Test Ifc2_Test;
} Mtbl_ImplIfcTest;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class ImplIfcTest : private ImplIfcTest_s
{ public:

  virtual float anotherIfcmethod(float input){  return anotherIfcmethod_f_ImplIfcTest_F(&this->base.IfcToTest.base.object, input,  null/*_thCxt*/); }

  int32 anotherIfcmethod(int32 input){  return anotherIfcmethod_i_ImplIfcTest(&this->base.IfcToTest.base.object, input,  null/*_thCxt*/); }

  ImplIfcTest(int32 val){ init_ObjectJc(&this->base.object, sizeof(ImplIfcTest_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_ImplIfcTest_s, 0); ctorO_ImplIfcTest(&this->base.object, val,  null/*_thCxt*/); }

  float processIfcMethod(float input){  return processIfcMethod_f_ImplIfcTest(&this->base.Ifc2_Test.base.object, input,  null/*_thCxt*/); }

  virtual int32 processIfcMethod(int32 input){  return processIfcMethod_i_ImplIfcTest_F(&this->base.IfcToTest.base.object, input,  null/*_thCxt*/); }

  virtual struct AnyClass_Test_t* returnAnyInstanceOverrideable(){  return returnAnyInstanceOverrideable_ImplIfcTest_F(this,  null/*_thCxt*/); }

  struct AnyClass_Test_t* returnAnyInstance(){  return returnAnyInstance_ImplIfcTest(this,  null/*_thCxt*/); }

  virtual ImplIfcTest& returnThisOverrideable(int32 value){ returnThisOverrideable_ImplIfcTest_F(this, value,  null/*_thCxt*/);  return *this; }

  ImplIfcTest& returnThis(int32 value){ returnThis_ImplIfcTest(this, value,  null/*_thCxt*/);  return *this; }

  float testIfc2(float input){  return testIfc2_f_ImplIfcTest(&this->base.Ifc2_Test.base.object, input,  null/*_thCxt*/); }

  int32 testImplIfc(){  return testImplIfc_ImplIfcTest(this,  null/*_thCxt*/); }

  virtual int32 testOverridden(float value){  return testOverridden_ImplIfcTest_F(this, value,  null/*_thCxt*/); }

  virtual int32 testOverrideAble(float value){  return testOverrideAble_ImplIfcTest_F(this, value,  null/*_thCxt*/); }

  virtual StringJc toString(){  return toString_ImplIfcTest_F(&this->base.super.base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__Java2cTest_ImplTest_h__
