/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __AnyClass_Test_h__
#define __AnyClass_Test_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef ImplIfcTestREFDEF
  #define ImplIfcTestREFDEF
  typedef struct ImplIfcTestREF_t { ObjectRefValuesJc refbase; struct ImplIfcTest_t* ref; } ImplIfcTestREF;
#endif


/* J2C: includes *********************************************************/


/*@CLASS_C AnyClass_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct AnyClass_Test_t
{ 
  union { ObjectJc object; } base; 
  int32 x1; 
  ImplIfcTestREF ref;   /*The ref is needed to test {@link #returnRefSimle(int)} for concatenations of references.*/
} AnyClass_Test_s;
  

#define sizeof_AnyClass_Test_s sizeof(AnyClass_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef AnyClass_TestREFDEF
  #define AnyClass_TestREFDEF
  typedef struct AnyClass_TestREF_t { ObjectRefValuesJc refbase; struct AnyClass_Test_t* ref; } AnyClass_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct AnyClass_Test_X_t { ObjectArrayJc head; AnyClass_TestREF data[50]; } AnyClass_Test_X;
typedef struct AnyClass_Test_Y_t { ObjectArrayJc head; AnyClass_Test_s data[50]; } AnyClass_Test_Y;

 extern struct ClassJc_t const reflection_AnyClass_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_AnyClass_Test(OBJP) { CONST_ObjectJc(sizeof(AnyClass_Test_s), OBJP, &reflection_AnyClass_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_AnyClass_Test_F(ObjectJc* othis, ThCxt* _thCxt);




/**Check whether a static instance of this class is translated to C.*/
METHOD_C struct AnyClass_Test_t* ctorO_AnyClass_Test(ObjectJc* othis, struct ImplIfcTest_t* ref, ThCxt* _thCxt);

/**Any final method to call. */
METHOD_C int32 addValue_AnyClass_Test(AnyClass_Test_s* ythis, int32 value, ThCxt* _thCxt);

/**Any override-able method to call. */
typedef int32 MT_addValueOverrideable_AnyClass_Test(AnyClass_Test_s* ythis, int32 value, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 addValueOverrideable_AnyClass_Test_F(AnyClass_Test_s* ythis, int32 value, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 addValueOverrideable_AnyClass_Test(AnyClass_Test_s* ythis, int32 value, ThCxt* _thCxt);

/**Returns itself (this)*/
METHOD_C struct AnyClass_Test_t* returnThis_AnyClass_Test(AnyClass_Test_s* ythis, int32 value, ThCxt* _thCxt);

/**Returns itself (this), but the method is able to override*/
typedef struct AnyClass_Test_t* MT_returnThisOverrideable_AnyClass_Test(AnyClass_Test_s* ythis, int32 value, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct AnyClass_Test_t* returnThisOverrideable_AnyClass_Test_F(AnyClass_Test_s* ythis, int32 value, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct AnyClass_Test_t* returnThisOverrideable_AnyClass_Test(AnyClass_Test_s* ythis, int32 value, ThCxt* _thCxt);

/**Returns any other instance.*/
METHOD_C struct ImplIfcTest_t* returnRef_AnyClass_Test(AnyClass_Test_s* ythis, ThCxt* _thCxt);

/**Returns any other instance, but this method is able to override, non final.*/
typedef struct ImplIfcTest_t* MT_returnRefOverrideable_AnyClass_Test(AnyClass_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct ImplIfcTest_t* returnRefOverrideable_AnyClass_Test_F(AnyClass_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct ImplIfcTest_t* returnRefOverrideable_AnyClass_Test(AnyClass_Test_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_AnyClass_Test[]; //marker for methodTable check
typedef struct Mtbl_AnyClass_Test_t
{ MtblHeadJc head;
  MT_addValueOverrideable_AnyClass_Test* addValueOverrideable;
  MT_returnThisOverrideable_AnyClass_Test* returnThisOverrideable;
  MT_returnRefOverrideable_AnyClass_Test* returnRefOverrideable;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_AnyClass_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class AnyClass_Test : private AnyClass_Test_s
{ public:

  virtual int32 addValueOverrideable(int32 value){  return addValueOverrideable_AnyClass_Test_F(this, value,  null/*_thCxt*/); }

  int32 addValue(int32 value){  return addValue_AnyClass_Test(this, value,  null/*_thCxt*/); }

  AnyClass_Test(struct ImplIfcTest_t* ref){ init_ObjectJc(&this->base.object, sizeof(AnyClass_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_AnyClass_Test_s, 0); ctorO_AnyClass_Test(&this->base.object, ref,  null/*_thCxt*/); }

  virtual struct ImplIfcTest_t* returnRefOverrideable(){  return returnRefOverrideable_AnyClass_Test_F(this,  null/*_thCxt*/); }

  struct ImplIfcTest_t* returnRef(){  return returnRef_AnyClass_Test(this,  null/*_thCxt*/); }

  virtual AnyClass_Test& returnThisOverrideable(int32 value){ returnThisOverrideable_AnyClass_Test_F(this, value,  null/*_thCxt*/);  return *this; }

  AnyClass_Test& returnThis(int32 value){ returnThis_AnyClass_Test(this, value,  null/*_thCxt*/);  return *this; }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__AnyClass_Test_h__
