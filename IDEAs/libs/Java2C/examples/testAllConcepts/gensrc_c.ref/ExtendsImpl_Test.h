/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __ExtendsImpl_Test_h__
#define __ExtendsImpl_Test_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/
#include "Java2cTest/ImplTest.h"  //superclass


/*@CLASS_C ExtendsImpl_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct ExtendsImpl_Test_t
{ 
  union { ObjectJc object; ImplIfcTest_s super;} base; 
} ExtendsImpl_Test_s;
  

#define sizeof_ExtendsImpl_Test_s sizeof(ExtendsImpl_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef ExtendsImpl_TestREFDEF
  #define ExtendsImpl_TestREFDEF
  typedef struct ExtendsImpl_TestREF_t { ObjectRefValuesJc refbase; struct ExtendsImpl_Test_t* ref; } ExtendsImpl_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct ExtendsImpl_Test_X_t { ObjectArrayJc head; ExtendsImpl_TestREF data[50]; } ExtendsImpl_Test_X;
typedef struct ExtendsImpl_Test_Y_t { ObjectArrayJc head; ExtendsImpl_Test_s data[50]; } ExtendsImpl_Test_Y;

 extern struct ClassJc_t const reflection_ExtendsImpl_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_ExtendsImpl_Test(OBJP) { CONST_ObjectJc(sizeof(ExtendsImpl_Test_s), OBJP, &reflection_ExtendsImpl_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_ExtendsImpl_Test_F(ObjectJc* othis, ThCxt* _thCxt);




METHOD_C struct ExtendsImpl_Test_t* ctorO_ExtendsImpl_Test(ObjectJc* othis, ThCxt* _thCxt);

/**This method is the overridden form of*/
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 testOverridden_f_ExtendsImpl_Test_F(ImplIfcTest_s* ithis, float value, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 testOverridden_f_ExtendsImpl_Test(ImplIfcTest_s* ithis, float value, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_ExtendsImpl_Test[]; //marker for methodTable check
typedef struct Mtbl_ExtendsImpl_Test_t
{ MtblHeadJc head;
  Mtbl_ImplIfcTest ImplIfcTest;
} Mtbl_ExtendsImpl_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class ExtendsImpl_Test : private ExtendsImpl_Test_s
{ public:

  ExtendsImpl_Test(){ init_ObjectJc(&this->base.object, sizeof(ExtendsImpl_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_ExtendsImpl_Test_s, 0); ctorO_ExtendsImpl_Test(&this->base.object,  null/*_thCxt*/); }

  virtual int32 testOverridden(float value){  return testOverridden_f_ExtendsImpl_Test_F(&this->base.super, value,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__ExtendsImpl_Test_h__
