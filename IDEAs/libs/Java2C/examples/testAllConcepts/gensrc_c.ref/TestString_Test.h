/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __TestString_Test_h__
#define __TestString_Test_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef StringBuilderJcREFDEF
  #define StringBuilderJcREFDEF
  typedef struct StringBuilderJcREF_t { ObjectRefValuesJc refbase; struct StringBuilderJc_t* ref; } StringBuilderJcREF;
#endif


/* J2C: includes *********************************************************/
#include "Jc/FileIoJc.h"  //embedded type in class data
#include "Jc/StringJc.h"  //embedded type in class data


/*@CLASS_C TestString_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct TestString_Test_t
{ 
  union { ObjectJc object; } base; 
  StringBuilderJcREF buffer1;   /*A reference to another struct. */
  struct StringBuilderJc_t* bufferInit;   /*A reference to another struct, but without need of garbage collection. */
  struct SbY_bufferEmbedded_t { StringBufferJc sb; char _b[996]; }bufferEmbedded; 
  StringJc stringRef;   /*A reference to a String in memory*/
  struct SbY_sbufferFix_t { StringBufferJc sb; char _b[246]; }sbufferFix;   /*Creates an embedded instance as StringBuffer with immediate space for the chars. */
  struct strArray_Y { ObjectArrayJc head; StringJc data[10]; }strArray; 
  StringJc_Y* strArray2; 
  char_Y* charArray; 
  FileOutputStreamJc_s oStream1;   /**/
  FileOutputStreamJc_s oStream2;   /**/
} TestString_Test_s;
  

#define sizeof_TestString_Test_s sizeof(TestString_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef TestString_TestREFDEF
  #define TestString_TestREFDEF
  typedef struct TestString_TestREF_t { ObjectRefValuesJc refbase; struct TestString_Test_t* ref; } TestString_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct TestString_Test_X_t { ObjectArrayJc head; TestString_TestREF data[50]; } TestString_Test_X;
typedef struct TestString_Test_Y_t { ObjectArrayJc head; TestString_Test_s data[50]; } TestString_Test_Y;

 extern struct ClassJc_t const reflection_TestString_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_TestString_Test(OBJP) { CONST_ObjectJc(sizeof(TestString_Test_s), OBJP, &reflection_TestString_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_TestString_Test_F(ObjectJc* othis, ThCxt* _thCxt);


 extern StringJc empty_TestString_Test; 


METHOD_C struct TestString_Test_t* ctorO_TestString_Test(ObjectJc* othis, struct StringBuilderJc_t* bufferInit, ThCxt* _thCxt);

/**Help method which processes a String. */
METHOD_C int32 processString_TestString_Test(/*static*/ StringJc str, ThCxt* _thCxt);

/**Examples for String concatenations.*/
typedef void MT_testStringConcatenationInStack_TestString_Test(TestString_Test_s* ythis, int32 value, float fValue, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testStringConcatenationInStack_TestString_Test_F(TestString_Test_s* ythis, int32 value, float fValue, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testStringConcatenationInStack_TestString_Test(TestString_Test_s* ythis, int32 value, float fValue, ThCxt* _thCxt);

/**Examples for String concatenations.*/
typedef void MT_testStringConcatenationWithTemps_TestString_Test(TestString_Test_s* ythis, int32 value, float fValue, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testStringConcatenationWithTemps_TestString_Test_F(TestString_Test_s* ythis, int32 value, float fValue, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testStringConcatenationWithTemps_TestString_Test(TestString_Test_s* ythis, int32 value, float fValue, ThCxt* _thCxt);

typedef void MT_testStringConcatenationUsingBuilder_TestString_Test(TestString_Test_s* ythis, int32 value, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testStringConcatenationUsingBuilder_TestString_Test_F(TestString_Test_s* ythis, int32 value, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testStringConcatenationUsingBuilder_TestString_Test(TestString_Test_s* ythis, int32 value, ThCxt* _thCxt);

typedef StringJc MT_testStringParameter_SS_TestString_Test(TestString_Test_s* ythis, StringJc s1, StringJc s2, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C StringJc testStringParameter_SS_TestString_Test_F(TestString_Test_s* ythis, StringJc s1, StringJc s2, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C StringJc testStringParameter_SS_TestString_Test(TestString_Test_s* ythis, StringJc s1, StringJc s2, ThCxt* _thCxt);

typedef void MT_testStringParameter_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testStringParameter_TestString_Test_F(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testStringParameter_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);

/*** */
typedef StringJc MT_testFormat_TestString_Test(TestString_Test_s* ythis, int32 value, float fValue, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C StringJc testFormat_TestString_Test_F(TestString_Test_s* ythis, int32 value, float fValue, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C StringJc testFormat_TestString_Test(TestString_Test_s* ythis, int32 value, float fValue, ThCxt* _thCxt);

typedef void MT_testReplace_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testReplace_TestString_Test_F(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testReplace_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);

typedef void MT_testInsertCharArray_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testInsertCharArray_TestString_Test_F(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testInsertCharArray_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);

/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C StringJc toString_TestString_Test_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C StringJc toString_TestString_Test(ObjectJc* ithis, ThCxt* _thCxt);

typedef void MT_testGarbageString_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testGarbageString_TestString_Test_F(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testGarbageString_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);

/**Example for StringBuffer usage.*/
typedef void MT_testStringBuffer_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testStringBuffer_TestString_Test_F(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testStringBuffer_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);

/*** <b>Persistence of Strings</b>*/
typedef void MT_testNonPersistenceOfStrings_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testNonPersistenceOfStrings_TestString_Test_F(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testNonPersistenceOfStrings_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);

/**This routine has the same content like {@link #testNonPersistenceOfStrings()},*/
typedef void MT_testPersistenceOfStrings_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testPersistenceOfStrings_TestString_Test_F(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testPersistenceOfStrings_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);

/**This routine uses the class java.lang.Date und SimpleFormatter*/
typedef StringJc MT_testDateString_TestString_Test(TestString_Test_s* ythis, StringJc sPath, int32 ident, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C StringJc testDateString_TestString_Test_F(TestString_Test_s* ythis, StringJc sPath, int32 ident, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C StringJc testDateString_TestString_Test(TestString_Test_s* ythis, StringJc sPath, int32 ident, ThCxt* _thCxt);

/**This routine uses the class java.lang.Date und SimpleFormatter*/
typedef StringJc MT_testDateStringDynamic_TestString_Test(TestString_Test_s* ythis, StringJc sPath, int32 ident, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C StringJc testDateStringDynamic_TestString_Test_F(TestString_Test_s* ythis, StringJc sPath, int32 ident, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C StringJc testDateStringDynamic_TestString_Test(TestString_Test_s* ythis, StringJc sPath, int32 ident, ThCxt* _thCxt);

typedef void MT_testOutStream_TestString_Test(TestString_Test_s* ythis, StringJc sPath, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testOutStream_TestString_Test_F(TestString_Test_s* ythis, StringJc sPath, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testOutStream_TestString_Test(TestString_Test_s* ythis, StringJc sPath, ThCxt* _thCxt);

typedef int32 MT_testSomeSimpleStringMethods_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 testSomeSimpleStringMethods_TestString_Test_F(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 testSomeSimpleStringMethods_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);

/**A CharSequence is the super-class of java.lang.String and java.lang.StringBuilder.*/
typedef void MT_testCharSequence_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testCharSequence_TestString_Test_F(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testCharSequence_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);

/**Calls the test routines.*/
typedef StringJc MT_testStringProcessing_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C StringJc testStringProcessing_TestString_Test_F(TestString_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C StringJc testStringProcessing_TestString_Test(TestString_Test_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_TestString_Test[]; //marker for methodTable check
typedef struct Mtbl_TestString_Test_t
{ MtblHeadJc head;
  MT_testStringConcatenationInStack_TestString_Test* testStringConcatenationInStack;
  MT_testStringConcatenationWithTemps_TestString_Test* testStringConcatenationWithTemps;
  MT_testStringConcatenationUsingBuilder_TestString_Test* testStringConcatenationUsingBuilder;
  MT_testStringParameter_SS_TestString_Test* testStringParameter_SS;
  MT_testStringParameter_TestString_Test* testStringParameter;
  MT_testFormat_TestString_Test* testFormat;
  MT_testReplace_TestString_Test* testReplace;
  MT_testInsertCharArray_TestString_Test* testInsertCharArray;
  MT_testGarbageString_TestString_Test* testGarbageString;
  MT_testStringBuffer_TestString_Test* testStringBuffer;
  MT_testNonPersistenceOfStrings_TestString_Test* testNonPersistenceOfStrings;
  MT_testPersistenceOfStrings_TestString_Test* testPersistenceOfStrings;
  MT_testDateString_TestString_Test* testDateString;
  MT_testDateStringDynamic_TestString_Test* testDateStringDynamic;
  MT_testOutStream_TestString_Test* testOutStream;
  MT_testSomeSimpleStringMethods_TestString_Test* testSomeSimpleStringMethods;
  MT_testCharSequence_TestString_Test* testCharSequence;
  MT_testStringProcessing_TestString_Test* testStringProcessing;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_TestString_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class TestString_Test : private TestString_Test_s
{ public:

  TestString_Test(struct StringBuilderJc_t* bufferInit){ init_ObjectJc(&this->base.object, sizeof(TestString_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_TestString_Test_s, 0); ctorO_TestString_Test(&this->base.object, bufferInit,  null/*_thCxt*/); }

  int32 processString(StringJcpp str){  return processString_TestString_Test(str,  null/*_thCxt*/); }

  virtual void testCharSequence(){ testCharSequence_TestString_Test_F(this,  null/*_thCxt*/); }

  virtual StringJc testDateStringDynamic(StringJcpp sPath, int32 ident){  return testDateStringDynamic_TestString_Test_F(this, sPath, ident,  null/*_thCxt*/); }

  virtual StringJc testDateString(StringJcpp sPath, int32 ident){  return testDateString_TestString_Test_F(this, sPath, ident,  null/*_thCxt*/); }

  virtual StringJc testFormat(int32 value, float fValue){  return testFormat_TestString_Test_F(this, value, fValue,  null/*_thCxt*/); }

  virtual void testGarbageString(){ testGarbageString_TestString_Test_F(this,  null/*_thCxt*/); }

  virtual void testInsertCharArray(){ testInsertCharArray_TestString_Test_F(this,  null/*_thCxt*/); }

  virtual void testNonPersistenceOfStrings(){ testNonPersistenceOfStrings_TestString_Test_F(this,  null/*_thCxt*/); }

  virtual void testOutStream(StringJcpp sPath){ testOutStream_TestString_Test_F(this, sPath,  null/*_thCxt*/); }

  virtual void testPersistenceOfStrings(){ testPersistenceOfStrings_TestString_Test_F(this,  null/*_thCxt*/); }

  virtual void testReplace(){ testReplace_TestString_Test_F(this,  null/*_thCxt*/); }

  virtual int32 testSomeSimpleStringMethods(){  return testSomeSimpleStringMethods_TestString_Test_F(this,  null/*_thCxt*/); }

  virtual void testStringBuffer(){ testStringBuffer_TestString_Test_F(this,  null/*_thCxt*/); }

  virtual void testStringConcatenationInStack(int32 value, float fValue){ testStringConcatenationInStack_TestString_Test_F(this, value, fValue,  null/*_thCxt*/); }

  virtual void testStringConcatenationUsingBuilder(int32 value){ testStringConcatenationUsingBuilder_TestString_Test_F(this, value,  null/*_thCxt*/); }

  virtual void testStringConcatenationWithTemps(int32 value, float fValue){ testStringConcatenationWithTemps_TestString_Test_F(this, value, fValue,  null/*_thCxt*/); }

  virtual StringJc testStringParameter(StringJcpp s1, StringJcpp s2){  return testStringParameter_SS_TestString_Test_F(this, s1, s2,  null/*_thCxt*/); }

  virtual void testStringParameter(){ testStringParameter_TestString_Test_F(this,  null/*_thCxt*/); }

  virtual StringJc testStringProcessing(){  return testStringProcessing_TestString_Test_F(this,  null/*_thCxt*/); }

  virtual StringJc toString(){  return toString_TestString_Test_F(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__TestString_Test_h__
