/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __Ifc2_Test_h__
#define __Ifc2_Test_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/


/*@CLASS_C Ifc2_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct Ifc2_Test_t
{ 
  union { ObjectJc object; } base; 
} Ifc2_Test_s;
  

#define sizeof_Ifc2_Test_s sizeof(Ifc2_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef Ifc2_TestREFDEF
  #define Ifc2_TestREFDEF
  typedef struct Ifc2_TestREF_t { ObjectRefValuesJc refbase; struct Ifc2_Test_t* ref; } Ifc2_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct Ifc2_Test_X_t { ObjectArrayJc head; Ifc2_TestREF data[50]; } Ifc2_Test_X;
typedef struct Ifc2_Test_Y_t { ObjectArrayJc head; Ifc2_Test_s data[50]; } Ifc2_Test_Y;

 extern struct ClassJc_t const reflection_Ifc2_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_Ifc2_Test(OBJP) { CONST_ObjectJc(sizeof(Ifc2_Test_s), OBJP, &reflection_Ifc2_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_Ifc2_Test_F(ObjectJc* othis, ThCxt* _thCxt);




/**Example for an interface method with the same name but other parameter types,*/
typedef float MT_processIfcMethod_Ifc2_Test(ObjectJc* ithis, float input, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C float processIfcMethod_Ifc2_Test(ObjectJc* ithis, float input, ThCxt* _thCxt);

/**Another method. */
typedef float MT_testIfc2_Ifc2_Test(ObjectJc* ithis, float input, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C float testIfc2_Ifc2_Test(ObjectJc* ithis, float input, ThCxt* _thCxt);

/**Example for an interface method, which has the same name and same paremeters like the method*/
typedef float MT_anotherIfcmethod_Ifc2_Test(ObjectJc* ithis, float input, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C float anotherIfcmethod_Ifc2_Test(ObjectJc* ithis, float input, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_Ifc2_Test[]; //marker for methodTable check
typedef struct Mtbl_Ifc2_Test_t
{ MtblHeadJc head;
  MT_processIfcMethod_Ifc2_Test* processIfcMethod;
  MT_testIfc2_Ifc2_Test* testIfc2;
  MT_anotherIfcmethod_Ifc2_Test* anotherIfcmethod;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_Ifc2_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class Ifc2_Test : private Ifc2_Test_s
{ public:

  virtual float anotherIfcmethod(float input)=0;

  virtual float processIfcMethod(float input)=0;

  virtual float testIfc2(float input)=0;
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__Ifc2_Test_h__
