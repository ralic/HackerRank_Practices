/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __TestThread_Test_h__
#define __TestThread_Test_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef WaitNotifyData_TestWaitNotify_TestREFDEF
  #define WaitNotifyData_TestWaitNotify_TestREFDEF
  typedef struct WaitNotifyData_TestWaitNotify_TestREF_t { ObjectRefValuesJc refbase; struct WaitNotifyData_TestWaitNotify_Test_t* ref; } WaitNotifyData_TestWaitNotify_TestREF;
#endif


/* J2C: includes *********************************************************/
#include "Jc/ThreadJc.h"  //embedded type in class data


/*@CLASS_C TestThreadLocalData_TestThread_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct TestThreadLocalData_TestThread_Test_t
{ 
  union { ObjectJc object; } base; 
  float x; 
  float y; 
  struct SbY_threadownBuffer_t { StringBufferJc sb; char _b[2996]; }threadownBuffer;   /*Example for a large data area*/
} TestThreadLocalData_TestThread_Test_s;
  

#define sizeof_TestThreadLocalData_TestThread_Test_s sizeof(TestThreadLocalData_TestThread_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef TestThreadLocalData_TestThread_TestREFDEF
  #define TestThreadLocalData_TestThread_TestREFDEF
  typedef struct TestThreadLocalData_TestThread_TestREF_t { ObjectRefValuesJc refbase; struct TestThreadLocalData_TestThread_Test_t* ref; } TestThreadLocalData_TestThread_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct TestThreadLocalData_TestThread_Test_X_t { ObjectArrayJc head; TestThreadLocalData_TestThread_TestREF data[50]; } TestThreadLocalData_TestThread_Test_X;
typedef struct TestThreadLocalData_TestThread_Test_Y_t { ObjectArrayJc head; TestThreadLocalData_TestThread_Test_s data[50]; } TestThreadLocalData_TestThread_Test_Y;

 extern struct ClassJc_t const reflection_TestThreadLocalData_TestThread_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_TestThreadLocalData_TestThread_Test(OBJP) { CONST_ObjectJc(sizeof(TestThreadLocalData_TestThread_Test_s), OBJP, &reflection_TestThreadLocalData_TestThread_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_TestThreadLocalData_TestThread_Test_F(ObjectJc* othis, ThCxt* _thCxt);




/**Default constructor. */
METHOD_C struct TestThreadLocalData_TestThread_Test_t* ctorO_TestThreadLocalData_TestThread_Test(ObjectJc* othis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_TestThreadLocalData_TestThread_Test[]; //marker for methodTable check
typedef struct Mtbl_TestThreadLocalData_TestThread_Test_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_TestThreadLocalData_TestThread_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class TestThreadLocalData_TestThread_Test : private TestThreadLocalData_TestThread_Test_s
{ public:

  TestThreadLocalData_TestThread_Test(){ init_ObjectJc(&this->base.object, sizeof(TestThreadLocalData_TestThread_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_TestThreadLocalData_TestThread_Test_s, 0); ctorO_TestThreadLocalData_TestThread_Test(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C TestThread_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct TestThread_Test_t
{ 
  union { ObjectJc object; RunnableJc_s RunnableJc;} base; 
  bool threadRunning;   /*This is a central thread-control variable. If it is set to true, if the thread is started. */
  bool threadFinished;   /*This is a central thread-control variable. If it is set to false, if the thread is finished. */
  int32 testCt1;   /*Two test counter, they will be count always simultaneously*/
  int32 testCt2;   /*Two test counter, they will be count always simultaneously*/
  int32 testCtInterrupted;   /*This counter is used to test whether the interrupting of the thread works. */
  ThreadJc_s theThread;   /*A Thread-instance is a composite part of this class*/
  WaitNotifyData_TestWaitNotify_TestREF theNotifyingData;   /*Aggregation to data to check wait/notify. */
} TestThread_Test_s;
  

#define sizeof_TestThread_Test_s sizeof(TestThread_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef TestThread_TestREFDEF
  #define TestThread_TestREFDEF
  typedef struct TestThread_TestREF_t { ObjectRefValuesJc refbase; struct TestThread_Test_t* ref; } TestThread_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct TestThread_Test_X_t { ObjectArrayJc head; TestThread_TestREF data[50]; } TestThread_Test_X;
typedef struct TestThread_Test_Y_t { ObjectArrayJc head; TestThread_Test_s data[50]; } TestThread_Test_Y;

 extern struct ClassJc_t const reflection_TestThread_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_TestThread_Test(OBJP) { CONST_ObjectJc(sizeof(TestThread_Test_s), OBJP, &reflection_TestThread_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_TestThread_Test_F(ObjectJc* othis, ThCxt* _thCxt);




/**Constructor.*/
METHOD_C struct TestThread_Test_t* ctorO_TestThread_Test(ObjectJc* othis, struct WaitNotifyData_TestWaitNotify_Test_t* theNotifyingData, ThCxt* _thCxt);

/**This is the thread main-routine complying the Java rules*/
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void run_TestThread_Test_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void run_TestThread_Test(ObjectJc* ithis, ThCxt* _thCxt);

/**This routine shows and support test of a mutex-access.*/
METHOD_C void testSynchronized_TestThread_Test(TestThread_Test_s* ythis, struct TestThreadLocalData_TestThread_Test_t* threadLocalData, ThCxt* _thCxt);

/**Facade routine to start the Thread.*/
typedef void MT_start_TestThread_Test(TestThread_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void start_TestThread_Test_F(TestThread_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void start_TestThread_Test(TestThread_Test_s* ythis, ThCxt* _thCxt);

/**This routine is called from outside in another thread*/
typedef void MT_otherThreadRoutine_TestThread_Test(TestThread_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void otherThreadRoutine_TestThread_Test_F(TestThread_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void otherThreadRoutine_TestThread_Test(TestThread_Test_s* ythis, ThCxt* _thCxt);

/**Returns true if the class private variable {@link #threadFinished} is set*/
METHOD_C bool isThreadFinished_TestThread_Test(TestThread_Test_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_TestThread_Test[]; //marker for methodTable check
typedef struct Mtbl_TestThread_Test_t
{ MtblHeadJc head;
  MT_start_TestThread_Test* start;
  MT_otherThreadRoutine_TestThread_Test* otherThreadRoutine;
  Mtbl_ObjectJc ObjectJc;
  //Method table of interfaces:
  Mtbl_RunnableJc RunnableJc;
} Mtbl_TestThread_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class TestThread_Test : private TestThread_Test_s
{ public:

  TestThread_Test(struct WaitNotifyData_TestWaitNotify_Test_t* theNotifyingData){ init_ObjectJc(&this->base.object, sizeof(TestThread_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_TestThread_Test_s, 0); ctorO_TestThread_Test(&this->base.object, theNotifyingData,  null/*_thCxt*/); }

  bool isThreadFinished(){  return isThreadFinished_TestThread_Test(this,  null/*_thCxt*/); }

  virtual void otherThreadRoutine(){ otherThreadRoutine_TestThread_Test_F(this,  null/*_thCxt*/); }

  virtual void run(){ run_TestThread_Test_F(&this->base.RunnableJc.base.object,  null/*_thCxt*/); }

  virtual void start(){ start_TestThread_Test_F(this,  null/*_thCxt*/); }

  void testSynchronized(struct TestThreadLocalData_TestThread_Test_t* threadLocalData){ testSynchronized_TestThread_Test(this, threadLocalData,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__TestThread_Test_h__
