/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __TestgarbageCollector_Test_h__
#define __TestgarbageCollector_Test_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef SimpleClass_TestREFDEF
  #define SimpleClass_TestREFDEF
  typedef struct SimpleClass_TestREF_t { ObjectRefValuesJc refbase; struct SimpleClass_Test_t* ref; } SimpleClass_TestREF;
#endif


/* J2C: includes *********************************************************/


/*@CLASS_C TestgarbageCollector_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct TestgarbageCollector_Test_t
{ 
  union { ObjectJc object; } base; 
} TestgarbageCollector_Test_s;
  

#define sizeof_TestgarbageCollector_Test_s sizeof(TestgarbageCollector_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef TestgarbageCollector_TestREFDEF
  #define TestgarbageCollector_TestREFDEF
  typedef struct TestgarbageCollector_TestREF_t { ObjectRefValuesJc refbase; struct TestgarbageCollector_Test_t* ref; } TestgarbageCollector_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct TestgarbageCollector_Test_X_t { ObjectArrayJc head; TestgarbageCollector_TestREF data[50]; } TestgarbageCollector_Test_X;
typedef struct TestgarbageCollector_Test_Y_t { ObjectArrayJc head; TestgarbageCollector_Test_s data[50]; } TestgarbageCollector_Test_Y;

 extern struct ClassJc_t const reflection_TestgarbageCollector_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_TestgarbageCollector_Test(OBJP) { CONST_ObjectJc(sizeof(TestgarbageCollector_Test_s), OBJP, &reflection_TestgarbageCollector_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_TestgarbageCollector_Test_F(ObjectJc* othis, ThCxt* _thCxt);


 extern SimpleClass_TestREF staticData_TestgarbageCollector_Test;   /*This static reference references a new created instance, so it isn't delete from the garbage collector. */


/**Default constructor. */
METHOD_C struct TestgarbageCollector_Test_t* ctorO_TestgarbageCollector_Test(ObjectJc* othis, ThCxt* _thCxt);

METHOD_C void useCreatedInstanceInternal_TestgarbageCollector_Test(TestgarbageCollector_Test_s* ythis, ThCxt* _thCxt);

/**This class creates a new instance and returns the pointer to them*/
typedef struct SimpleClass_Test_t* MT_createAndReturnInstance_TestgarbageCollector_Test(TestgarbageCollector_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct SimpleClass_Test_t* createAndReturnInstance_TestgarbageCollector_Test_F(TestgarbageCollector_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct SimpleClass_Test_t* createAndReturnInstance_TestgarbageCollector_Test(TestgarbageCollector_Test_s* ythis, ThCxt* _thCxt);

/**This method calls the method {@link #createAndReturnInstance()} to create an instance, which is not stored*/
typedef void MT_testNewInstance_TestgarbageCollector_Test(TestgarbageCollector_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void testNewInstance_TestgarbageCollector_Test_F(TestgarbageCollector_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void testNewInstance_TestgarbageCollector_Test(TestgarbageCollector_Test_s* ythis, ThCxt* _thCxt);

typedef void MT_test_TestgarbageCollector_Test(TestgarbageCollector_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void test_TestgarbageCollector_Test_F(TestgarbageCollector_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void test_TestgarbageCollector_Test(TestgarbageCollector_Test_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_TestgarbageCollector_Test[]; //marker for methodTable check
typedef struct Mtbl_TestgarbageCollector_Test_t
{ MtblHeadJc head;
  MT_createAndReturnInstance_TestgarbageCollector_Test* createAndReturnInstance;
  MT_testNewInstance_TestgarbageCollector_Test* testNewInstance;
  MT_test_TestgarbageCollector_Test* test;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_TestgarbageCollector_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class TestgarbageCollector_Test : private TestgarbageCollector_Test_s
{ public:

  virtual struct SimpleClass_Test_t* createAndReturnInstance(){  return createAndReturnInstance_TestgarbageCollector_Test_F(this,  null/*_thCxt*/); }

  TestgarbageCollector_Test(){ init_ObjectJc(&this->base.object, sizeof(TestgarbageCollector_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_TestgarbageCollector_Test_s, 0); ctorO_TestgarbageCollector_Test(&this->base.object,  null/*_thCxt*/); }

  virtual void testNewInstance(){ testNewInstance_TestgarbageCollector_Test_F(this,  null/*_thCxt*/); }

  virtual void test(){ test_TestgarbageCollector_Test_F(this,  null/*_thCxt*/); }

  void useCreatedInstanceInternal(){ useCreatedInstanceInternal_TestgarbageCollector_Test(this,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__TestgarbageCollector_Test_h__
