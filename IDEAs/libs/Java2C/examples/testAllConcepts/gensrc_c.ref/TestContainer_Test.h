/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __TestContainer_Test_h__
#define __TestContainer_Test_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/
#include "Jc/LinkedListJc.h"  //embedded type in class data
#include "Jc/ThreadJc.h"  //superclass
#include "SimpleClass_Test.h"  //embedded type in class data


/*@CLASS_C C_stressTest_TestContainer_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct C_stressTest_TestContainer_Test_t
{ 
  union { ObjectJc object; ThreadJc_s super;} base; 
  struct TestContainer_Test_t* outer;  //J2C: Reference to outer class, implicit in Java
} C_stressTest_TestContainer_Test_s;
  

#define sizeof_C_stressTest_TestContainer_Test_s sizeof(C_stressTest_TestContainer_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef C_stressTest_TestContainer_TestREFDEF
  #define C_stressTest_TestContainer_TestREFDEF
  typedef struct C_stressTest_TestContainer_TestREF_t { ObjectRefValuesJc refbase; struct C_stressTest_TestContainer_Test_t* ref; } C_stressTest_TestContainer_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct C_stressTest_TestContainer_Test_X_t { ObjectArrayJc head; C_stressTest_TestContainer_TestREF data[50]; } C_stressTest_TestContainer_Test_X;
typedef struct C_stressTest_TestContainer_Test_Y_t { ObjectArrayJc head; C_stressTest_TestContainer_Test_s data[50]; } C_stressTest_TestContainer_Test_Y;

 extern struct ClassJc_t const reflection_C_stressTest_TestContainer_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_C_stressTest_TestContainer_Test(OBJP) { CONST_ObjectJc(sizeof(C_stressTest_TestContainer_Test_s), OBJP, &reflection_C_stressTest_TestContainer_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_C_stressTest_TestContainer_Test_F(ObjectJc* othis, ThCxt* _thCxt);




/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void run_C_stressTest_TestContainer_Test_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void run_C_stressTest_TestContainer_Test(ObjectJc* ithis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_C_stressTest_TestContainer_Test[]; //marker for methodTable check
typedef struct Mtbl_C_stressTest_TestContainer_Test_t
{ MtblHeadJc head;
  Mtbl_ThreadJc ThreadJc;
} Mtbl_C_stressTest_TestContainer_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class C_stressTest_TestContainer_Test : private C_stressTest_TestContainer_Test_s
{ public:

  virtual void run(){ run_C_stressTest_TestContainer_Test_F(&this->base.super.base.RunnableJc.base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/


/**Default constructor. */
METHOD_C struct C_stressTest_TestContainer_Test_t* ctorO_C_stressTest_TestContainer_Test(struct TestContainer_Test_t* outer, ObjectJc* othis, char const* name, ThCxt* _thCxt);


/*@CLASS_C TestContainer_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct TestContainer_Test_t
{ 
  union { ObjectJc object; } base; 
  LinkedListJc linkedList; 
  SimpleClass_Test_s anObject; 
  C_stressTest_TestContainer_Test_s stressTest;   /*It adds and removes permanently, But the limit of the heap should be regarded.*/
} TestContainer_Test_s;
  

#define sizeof_TestContainer_Test_s sizeof(TestContainer_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef TestContainer_TestREFDEF
  #define TestContainer_TestREFDEF
  typedef struct TestContainer_TestREF_t { ObjectRefValuesJc refbase; struct TestContainer_Test_t* ref; } TestContainer_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct TestContainer_Test_X_t { ObjectArrayJc head; TestContainer_TestREF data[50]; } TestContainer_Test_X;
typedef struct TestContainer_Test_Y_t { ObjectArrayJc head; TestContainer_Test_s data[50]; } TestContainer_Test_Y;

 extern struct ClassJc_t const reflection_TestContainer_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_TestContainer_Test(OBJP) { CONST_ObjectJc(sizeof(TestContainer_Test_s), OBJP, &reflection_TestContainer_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_TestContainer_Test_F(ObjectJc* othis, ThCxt* _thCxt);




/**Default constructor. */
METHOD_C struct TestContainer_Test_t* ctorO_TestContainer_Test(ObjectJc* othis, ThCxt* _thCxt);

typedef void MT_addToList_TestContainer_Test(TestContainer_Test_s* ythis, struct ObjectJc_t* src, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void addToList_TestContainer_Test_F(TestContainer_Test_s* ythis, struct ObjectJc_t* src, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void addToList_TestContainer_Test(TestContainer_Test_s* ythis, struct ObjectJc_t* src, ThCxt* _thCxt);

typedef struct ObjectJc_t* MT_removeFirstfromLinkedList_TestContainer_Test(TestContainer_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct ObjectJc_t* removeFirstfromLinkedList_TestContainer_Test_F(TestContainer_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct ObjectJc_t* removeFirstfromLinkedList_TestContainer_Test(TestContainer_Test_s* ythis, ThCxt* _thCxt);

typedef void MT_addSomeData_TestContainer_Test(TestContainer_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void addSomeData_TestContainer_Test_F(TestContainer_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void addSomeData_TestContainer_Test(TestContainer_Test_s* ythis, ThCxt* _thCxt);

typedef void MT_getAndRemoveAllData_TestContainer_Test(TestContainer_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void getAndRemoveAllData_TestContainer_Test_F(TestContainer_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void getAndRemoveAllData_TestContainer_Test(TestContainer_Test_s* ythis, ThCxt* _thCxt);

typedef void MT_test_TestContainer_Test(TestContainer_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void test_TestContainer_Test_F(TestContainer_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void test_TestContainer_Test(TestContainer_Test_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_TestContainer_Test[]; //marker for methodTable check
typedef struct Mtbl_TestContainer_Test_t
{ MtblHeadJc head;
  MT_addToList_TestContainer_Test* addToList;
  MT_removeFirstfromLinkedList_TestContainer_Test* removeFirstfromLinkedList;
  MT_addSomeData_TestContainer_Test* addSomeData;
  MT_getAndRemoveAllData_TestContainer_Test* getAndRemoveAllData;
  MT_test_TestContainer_Test* test;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_TestContainer_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class TestContainer_Test : private TestContainer_Test_s
{ public:

  virtual void addSomeData(){ addSomeData_TestContainer_Test_F(this,  null/*_thCxt*/); }

  virtual void addToList(struct ObjectJc_t* src){ addToList_TestContainer_Test_F(this, src,  null/*_thCxt*/); }

  TestContainer_Test(char const* name){ init_ObjectJc(&this->base.object, sizeof(TestContainer_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_TestContainer_Test_s, 0); ctorO_C_stressTest_TestContainer_Test(&this->base.object, name,  null/*_thCxt*/); }

  TestContainer_Test(){ init_ObjectJc(&this->base.object, sizeof(TestContainer_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_TestContainer_Test_s, 0); ctorO_TestContainer_Test(&this->base.object,  null/*_thCxt*/); }

  virtual void getAndRemoveAllData(){ getAndRemoveAllData_TestContainer_Test_F(this,  null/*_thCxt*/); }

  virtual struct ObjectJc_t* removeFirstfromLinkedList(){  return removeFirstfromLinkedList_TestContainer_Test_F(this,  null/*_thCxt*/); }

  virtual void test(){ test_TestContainer_Test_F(this,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__TestContainer_Test_h__
