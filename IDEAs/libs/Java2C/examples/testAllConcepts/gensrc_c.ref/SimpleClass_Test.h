/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __SimpleClass_Test_h__
#define __SimpleClass_Test_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef ObjectJcREFDEF
  #define ObjectJcREFDEF
  typedef struct ObjectJcREF_t { ObjectRefValuesJc refbase; struct ObjectJc_t* ref; } ObjectJcREF;
#endif


/* J2C: includes *********************************************************/


/*@CLASS_C SimpleClass_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct SimpleClass_Test_t
{ 
  union { ObjectJc object; } base; 
  ObjectJcREF anyRef;   /*Any reference*/
  int32 x1;   /*A value stored in the class' instance. */
} SimpleClass_Test_s;
  

#define sizeof_SimpleClass_Test_s sizeof(SimpleClass_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef SimpleClass_TestREFDEF
  #define SimpleClass_TestREFDEF
  typedef struct SimpleClass_TestREF_t { ObjectRefValuesJc refbase; struct SimpleClass_Test_t* ref; } SimpleClass_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct SimpleClass_Test_X_t { ObjectArrayJc head; SimpleClass_TestREF data[50]; } SimpleClass_Test_X;
typedef struct SimpleClass_Test_Y_t { ObjectArrayJc head; SimpleClass_Test_s data[50]; } SimpleClass_Test_Y;

 extern struct ClassJc_t const reflection_SimpleClass_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_SimpleClass_Test(OBJP) { CONST_ObjectJc(sizeof(SimpleClass_Test_s), OBJP, &reflection_SimpleClass_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_SimpleClass_Test_F(ObjectJc* othis, ThCxt* _thCxt);




/**Parametrized constructor to set an initial value.*/
METHOD_C struct SimpleClass_Test_t* ctorO_i_SimpleClass_Test(ObjectJc* othis, int32 value, ThCxt* _thCxt);

/**Empty constructor: The variable x1 keeps its default value. */
METHOD_C struct SimpleClass_Test_t* ctorO_SimpleClass_Test(ObjectJc* othis, ThCxt* _thCxt);

/**Add something*/
typedef int32 MT_addValue_SimpleClass_Test(SimpleClass_Test_s* ythis, int32 value, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 addValue_SimpleClass_Test_F(SimpleClass_Test_s* ythis, int32 value, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 addValue_SimpleClass_Test(SimpleClass_Test_s* ythis, int32 value, ThCxt* _thCxt);

/**Returns the current value. */
typedef int32 MT_getValue_SimpleClass_Test(SimpleClass_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C int32 getValue_SimpleClass_Test_F(SimpleClass_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C int32 getValue_SimpleClass_Test(SimpleClass_Test_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_SimpleClass_Test[]; //marker for methodTable check
typedef struct Mtbl_SimpleClass_Test_t
{ MtblHeadJc head;
  MT_addValue_SimpleClass_Test* addValue;
  MT_getValue_SimpleClass_Test* getValue;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_SimpleClass_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class SimpleClass_Test : private SimpleClass_Test_s
{ public:

  virtual int32 addValue(int32 value){  return addValue_SimpleClass_Test_F(this, value,  null/*_thCxt*/); }

  SimpleClass_Test(){ init_ObjectJc(&this->base.object, sizeof(SimpleClass_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_SimpleClass_Test_s, 0); ctorO_SimpleClass_Test(&this->base.object,  null/*_thCxt*/); }

  SimpleClass_Test(int32 value){ init_ObjectJc(&this->base.object, sizeof(SimpleClass_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_SimpleClass_Test_s, 0); ctorO_i_SimpleClass_Test(&this->base.object, value,  null/*_thCxt*/); }

  virtual int32 getValue(){  return getValue_SimpleClass_Test_F(this,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__SimpleClass_Test_h__
