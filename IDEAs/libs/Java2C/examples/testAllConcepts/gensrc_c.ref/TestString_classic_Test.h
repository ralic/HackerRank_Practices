/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __TestString_classic_Test_h__
#define __TestString_classic_Test_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/


/*@CLASS_C TestString_classic_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct TestString_classic_Test_t
{ 
  union { ObjectJc object; } base; 
} TestString_classic_Test_s;
  

#define sizeof_TestString_classic_Test_s sizeof(TestString_classic_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef TestString_classic_TestREFDEF
  #define TestString_classic_TestREFDEF
  typedef struct TestString_classic_TestREF_t { ObjectRefValuesJc refbase; struct TestString_classic_Test_t* ref; } TestString_classic_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct TestString_classic_Test_X_t { ObjectArrayJc head; TestString_classic_TestREF data[50]; } TestString_classic_Test_X;
typedef struct TestString_classic_Test_Y_t { ObjectArrayJc head; TestString_classic_Test_s data[50]; } TestString_classic_Test_Y;

 extern struct ClassJc_t const reflection_TestString_classic_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_TestString_classic_Test(OBJP) { CONST_ObjectJc(sizeof(TestString_classic_Test_s), OBJP, &reflection_TestString_classic_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_TestString_classic_Test_F(ObjectJc* othis, ThCxt* _thCxt);




/**Default constructor. */
METHOD_C struct TestString_classic_Test_t* ctorO_TestString_classic_Test(ObjectJc* othis, ThCxt* _thCxt);

METHOD_C int32 concatenate_TestString_classic_Test(/*static*/ int32 value, float fValue, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_TestString_classic_Test[]; //marker for methodTable check
typedef struct Mtbl_TestString_classic_Test_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_TestString_classic_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class TestString_classic_Test : private TestString_classic_Test_s
{ public:

  int32 concatenate(int32 value, float fValue){  return concatenate_TestString_classic_Test(value, fValue,  null/*_thCxt*/); }

  TestString_classic_Test(){ init_ObjectJc(&this->base.object, sizeof(TestString_classic_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_TestString_classic_Test_s, 0); ctorO_TestString_classic_Test(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__TestString_classic_Test_h__
