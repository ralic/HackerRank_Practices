/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __TestVaArg_Test_h__
#define __TestVaArg_Test_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: includes *********************************************************/


/*@CLASS_C TestVaArg_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct TestVaArg_Test_t
{ 
  union { ObjectJc object; } base; 
  int32 dummy; 
} TestVaArg_Test_s;
  

#define sizeof_TestVaArg_Test_s sizeof(TestVaArg_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef TestVaArg_TestREFDEF
  #define TestVaArg_TestREFDEF
  typedef struct TestVaArg_TestREF_t { ObjectRefValuesJc refbase; struct TestVaArg_Test_t* ref; } TestVaArg_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct TestVaArg_Test_X_t { ObjectArrayJc head; TestVaArg_TestREF data[50]; } TestVaArg_Test_X;
typedef struct TestVaArg_Test_Y_t { ObjectArrayJc head; TestVaArg_Test_s data[50]; } TestVaArg_Test_Y;

 extern struct ClassJc_t const reflection_TestVaArg_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_TestVaArg_Test(OBJP) { CONST_ObjectJc(sizeof(TestVaArg_Test_s), OBJP, &reflection_TestVaArg_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_TestVaArg_Test_F(ObjectJc* othis, ThCxt* _thCxt);




/**Default constructor. */
METHOD_C struct TestVaArg_Test_t* ctorO_TestVaArg_Test(ObjectJc* othis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_TestVaArg_Test[]; //marker for methodTable check
typedef struct Mtbl_TestVaArg_Test_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_TestVaArg_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class TestVaArg_Test : private TestVaArg_Test_s
{ public:

  TestVaArg_Test(){ init_ObjectJc(&this->base.object, sizeof(TestVaArg_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_TestVaArg_Test_s, 0); ctorO_TestVaArg_Test(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__TestVaArg_Test_h__
