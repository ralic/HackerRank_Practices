/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __TestWaitNotify_Test_h__
#define __TestWaitNotify_Test_h__

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

#include "Fwc/fw_Exception.h"   //basic concept


/* J2C: Enhanced references *********************************************************
 * In this part all here used enhanced references are defined conditionally.
 * The inclusion of all that header files isn't necessary, to prevent circular inclusion.
 * It is adequate a struct pointer forward declaration.
 */
#ifndef WaitNotifyData_TestWaitNotify_TestREFDEF
  #define WaitNotifyData_TestWaitNotify_TestREFDEF
  typedef struct WaitNotifyData_TestWaitNotify_TestREF_t { ObjectRefValuesJc refbase; struct WaitNotifyData_TestWaitNotify_Test_t* ref; } WaitNotifyData_TestWaitNotify_TestREF;
#endif


/* J2C: includes *********************************************************/
#include "Jc/ThreadJc.h"  //superclass


/*@CLASS_C WaitNotifyData_TestWaitNotify_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct WaitNotifyData_TestWaitNotify_Test_t
{ 
  union { ObjectJc object; } base; 
  int32 x;   /*A value which is supplied with notify. */
  int32 ctNewData;   /*Sequence counter to detect a notify. It is incremented on any notify(). */
} WaitNotifyData_TestWaitNotify_Test_s;
  

#define sizeof_WaitNotifyData_TestWaitNotify_Test_s sizeof(WaitNotifyData_TestWaitNotify_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef WaitNotifyData_TestWaitNotify_TestREFDEF
  #define WaitNotifyData_TestWaitNotify_TestREFDEF
  typedef struct WaitNotifyData_TestWaitNotify_TestREF_t { ObjectRefValuesJc refbase; struct WaitNotifyData_TestWaitNotify_Test_t* ref; } WaitNotifyData_TestWaitNotify_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct WaitNotifyData_TestWaitNotify_Test_X_t { ObjectArrayJc head; WaitNotifyData_TestWaitNotify_TestREF data[50]; } WaitNotifyData_TestWaitNotify_Test_X;
typedef struct WaitNotifyData_TestWaitNotify_Test_Y_t { ObjectArrayJc head; WaitNotifyData_TestWaitNotify_Test_s data[50]; } WaitNotifyData_TestWaitNotify_Test_Y;

 extern struct ClassJc_t const reflection_WaitNotifyData_TestWaitNotify_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_WaitNotifyData_TestWaitNotify_Test(OBJP) { CONST_ObjectJc(sizeof(WaitNotifyData_TestWaitNotify_Test_s), OBJP, &reflection_WaitNotifyData_TestWaitNotify_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_WaitNotifyData_TestWaitNotify_Test_F(ObjectJc* othis, ThCxt* _thCxt);




/**Default constructor. */
METHOD_C struct WaitNotifyData_TestWaitNotify_Test_t* ctorO_WaitNotifyData_TestWaitNotify_Test(ObjectJc* othis, ThCxt* _thCxt);

/**Notify routine, it may be called from outside*/
METHOD_C void notify_WaitNotifyData_TestWaitNotify_Test(WaitNotifyData_TestWaitNotify_Test_s* ythis, int32 value, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_WaitNotifyData_TestWaitNotify_Test[]; //marker for methodTable check
typedef struct Mtbl_WaitNotifyData_TestWaitNotify_Test_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_WaitNotifyData_TestWaitNotify_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class WaitNotifyData_TestWaitNotify_Test : private WaitNotifyData_TestWaitNotify_Test_s
{ public:

  WaitNotifyData_TestWaitNotify_Test(){ init_ObjectJc(&this->base.object, sizeof(WaitNotifyData_TestWaitNotify_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_WaitNotifyData_TestWaitNotify_Test_s, 0); ctorO_WaitNotifyData_TestWaitNotify_Test(&this->base.object,  null/*_thCxt*/); }

  void notify(int32 value){ notify_WaitNotifyData_TestWaitNotify_Test(this, value,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C TestThreadLocalData_TestWaitNotify_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct TestThreadLocalData_TestWaitNotify_Test_t
{ 
  union { ObjectJc object; } base; 
  int32 x; 
  int32 y; 
  int32 seqCtLast;   /*A sequence counter which holds the last value of {@link WaitNotifyData#ctNewData} to check*/
  int32 seqCt;   /*A sequence counter which holds the last value of {@link WaitNotifyData#ctNewData} to check*/
  int32 testCtInterrupted;   /*This counter is used to test whether the interrupting of the thread works. */
  int32 testCtNothingReceived; 
  int32 testCtSuccessNotify; 
  int32 testCtMissNotify; 
  WaitNotifyData_TestWaitNotify_TestREF theAwaitingData;   /*Association to the data which are notifying from outside.*/
} TestThreadLocalData_TestWaitNotify_Test_s;
  

#define sizeof_TestThreadLocalData_TestWaitNotify_Test_s sizeof(TestThreadLocalData_TestWaitNotify_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef TestThreadLocalData_TestWaitNotify_TestREFDEF
  #define TestThreadLocalData_TestWaitNotify_TestREFDEF
  typedef struct TestThreadLocalData_TestWaitNotify_TestREF_t { ObjectRefValuesJc refbase; struct TestThreadLocalData_TestWaitNotify_Test_t* ref; } TestThreadLocalData_TestWaitNotify_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct TestThreadLocalData_TestWaitNotify_Test_X_t { ObjectArrayJc head; TestThreadLocalData_TestWaitNotify_TestREF data[50]; } TestThreadLocalData_TestWaitNotify_Test_X;
typedef struct TestThreadLocalData_TestWaitNotify_Test_Y_t { ObjectArrayJc head; TestThreadLocalData_TestWaitNotify_Test_s data[50]; } TestThreadLocalData_TestWaitNotify_Test_Y;

 extern struct ClassJc_t const reflection_TestThreadLocalData_TestWaitNotify_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_TestThreadLocalData_TestWaitNotify_Test(OBJP) { CONST_ObjectJc(sizeof(TestThreadLocalData_TestWaitNotify_Test_s), OBJP, &reflection_TestThreadLocalData_TestWaitNotify_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_TestThreadLocalData_TestWaitNotify_Test_F(ObjectJc* othis, ThCxt* _thCxt);




METHOD_C struct TestThreadLocalData_TestWaitNotify_Test_t* ctorO_TestThreadLocalData_TestWaitNotify_Test(ObjectJc* othis, struct WaitNotifyData_TestWaitNotify_Test_t* theAwaitingDataP, ThCxt* _thCxt);

/**In this routine the thread is waiting for data*/
METHOD_C void awaitData_TestThreadLocalData_TestWaitNotify_Test(TestThreadLocalData_TestWaitNotify_Test_s* ythis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_TestThreadLocalData_TestWaitNotify_Test[]; //marker for methodTable check
typedef struct Mtbl_TestThreadLocalData_TestWaitNotify_Test_t
{ MtblHeadJc head;
  Mtbl_ObjectJc ObjectJc;
} Mtbl_TestThreadLocalData_TestWaitNotify_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class TestThreadLocalData_TestWaitNotify_Test : private TestThreadLocalData_TestWaitNotify_Test_s
{ public:

  void awaitData(){ awaitData_TestThreadLocalData_TestWaitNotify_Test(this,  null/*_thCxt*/); }

  TestThreadLocalData_TestWaitNotify_Test(struct WaitNotifyData_TestWaitNotify_Test_t* theAwaitingDataP){ init_ObjectJc(&this->base.object, sizeof(TestThreadLocalData_TestWaitNotify_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_TestThreadLocalData_TestWaitNotify_Test_s, 0); ctorO_TestThreadLocalData_TestWaitNotify_Test(&this->base.object, theAwaitingDataP,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C TestWaitNotify_Test @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct TestWaitNotify_Test_t
{ 
  union { ObjectJc object; ThreadJc_s super;} base; 
  bool shouldRun;   /*This is a central thread-control variable. If it is set to false, the thread should finish. */
  WaitNotifyData_TestWaitNotify_TestREF theAwaitingData;   /*Aggregation to data to check wait/notify. */
} TestWaitNotify_Test_s;
  

#define sizeof_TestWaitNotify_Test_s sizeof(TestWaitNotify_Test_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef TestWaitNotify_TestREFDEF
  #define TestWaitNotify_TestREFDEF
  typedef struct TestWaitNotify_TestREF_t { ObjectRefValuesJc refbase; struct TestWaitNotify_Test_t* ref; } TestWaitNotify_TestREF;
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct TestWaitNotify_Test_X_t { ObjectArrayJc head; TestWaitNotify_TestREF data[50]; } TestWaitNotify_Test_X;
typedef struct TestWaitNotify_Test_Y_t { ObjectArrayJc head; TestWaitNotify_Test_s data[50]; } TestWaitNotify_Test_Y;

 extern struct ClassJc_t const reflection_TestWaitNotify_Test_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_TestWaitNotify_Test(OBJP) { CONST_ObjectJc(sizeof(TestWaitNotify_Test_s), OBJP, &reflection_TestWaitNotify_Test_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_TestWaitNotify_Test_F(ObjectJc* othis, ThCxt* _thCxt);




/**Constructor.*/
METHOD_C struct TestWaitNotify_Test_t* ctorO_TestWaitNotify_Test(ObjectJc* othis, struct WaitNotifyData_TestWaitNotify_Test_t* theAwaitingDataP, ThCxt* _thCxt);

/**This routine overrides <code>Thread.start()</code>, it's a facade*/
typedef void MT_start_TestWaitNotify_Test(TestWaitNotify_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void start_TestWaitNotify_Test_F(TestWaitNotify_Test_s* ythis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void start_TestWaitNotify_Test(TestWaitNotify_Test_s* ythis, ThCxt* _thCxt);

/**This is the thread main-routine complying the Java rules*/
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void run_TestWaitNotify_Test_F(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void run_TestWaitNotify_Test(ObjectJc* ithis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Mtbl_TestWaitNotify_Test[]; //marker for methodTable check
typedef struct Mtbl_TestWaitNotify_Test_t
{ MtblHeadJc head;
  MT_start_TestWaitNotify_Test* start;
  Mtbl_ThreadJc ThreadJc;
} Mtbl_TestWaitNotify_Test;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class TestWaitNotify_Test : private TestWaitNotify_Test_s
{ public:

  TestWaitNotify_Test(struct WaitNotifyData_TestWaitNotify_Test_t* theAwaitingDataP){ init_ObjectJc(&this->base.object, sizeof(TestWaitNotify_Test_s), 0); setReflection_ObjectJc(&this->base.object, &reflection_TestWaitNotify_Test_s, 0); ctorO_TestWaitNotify_Test(&this->base.object, theAwaitingDataP,  null/*_thCxt*/); }

  virtual void run(){ run_TestWaitNotify_Test_F(&this->base.super.base.RunnableJc.base.object,  null/*_thCxt*/); }

  virtual void start(){ start_TestWaitNotify_Test_F(this,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__TestWaitNotify_Test_h__
