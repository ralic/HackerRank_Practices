==Java2C==
@ident=Java2C
.


===Changes from 0.83 to 0.84===
@ident=changes083_084
The version 0.84 is under construction. You can download next versions under [[http://www.vishia.org/Java2C/sf/Java2C.zip]], see also [[http://www.vishia.org/indexDownload.html]].

Date: 2009-04-17

====Java2C - core====
The following features are implemented yet and first-time tested with the examples:

* The @java2c=tag is now useable also for parameter of methods. The syntax of parameter description detection is improved. 
* A @java2c=zeroTermString is supported. It produces char* instead StringJc. It may more opportune as paramter type of methods (simple use of "Stringliteral").

* The assignment to an enhanced reference is generated using Macro ,,ASSIGN_REFJc(REF, OBJP),, resp. ,,CLEAR_REFJc(REF),, instead generating the routine call ,,setBackRefJc(...),, etc. 
*+ Advantage: 
** a) It is better readable at C-Level (for code-review), 
** b) The same sources may also compiled in environments without using enhanced references, without Garbage Collections, to use Java2C-translated sources in foreign not so far Java-like oriented environments. The same is done using REFJc(REF) to access to enhanced references. 

* The extra file with definition of enhanced references (input.cfg keyword fileAllReferences) is now unneeded, hence it isn't a commonly file needed. The enhanced references are defined now in the header files. The reason of using an extra commonly file was: On compiling an objectfile this definitions should be given only one time, but they may be needed some times. The problem is detached now, by testing a define (#ifdef typeREFDEF) to prevent double definition of the typedef of the enhanced references. Now any headerfile, which uses an enhanced reference from any type, defines it self. The advantage is: In distributed files a commonly file is a problem. Now it is decentral.


* Using of prefix in input.cfg-file: Now it's possible to write the generated files in sub-folders (see example). A ,,#include "folder/file.h",, is generated also.

* Generating Reflection informations: The Reflections in C are necessary to access data in a running application in non-debugging-mode. There is a ''Inspector'' using this principle. But this Inspector isn't a part of open source. The sources using that are licensed with the second licence-model. But the principle of access to data via reflections is useable in open source, see ,,CRuntimeJavalike/reflectionJc.c,,.

* new: Erweiterungen wegen geändertem LogMessageFW.
* new: Erkennung von modeAccess bei Paramterzuweisung bei Methodenaufruf
* new: Bei Zuweisung wird auf Zieltyp gecastet. Das ist vorderhand wichtig bei Zugriff auf getypte Container, weil die Typerkennung dort nicht implementiert ist.
Diese Funktionaltät steckte schon in der Intialisierung von Variablen, aber nicht in der Zuweisung. Dort werden derzeit zwei ähnliche Algorithmen durchlaufen. TODO. Vereinigen.



All features are tested with the enclosed example, but not tested hardly.

====CRuntimeJavalike====

* Formatting with variable arguments: before any variable argument list in C  and before a va_list-argument a ,,char*,, typeArgs is added. It is the type of the arguments,
which are not safe otherwise in C. The implememtation of a special signification in the variable argument list in Version 0.83 isn't save, because this special pointer ,,&typedVaArg_VaArgBuffer,, can be also a contingently integer value. 

* Improvement of Reflection using.

====Examples====


* Some files are disposed in folders. It is to test this feature of Java2C.
* Improvement of the MsgDispatcher.java.

====Detect bugs and requirements====

* Bugfix: default-statements in switch-case were wrong.

* ,,(dst = method()).element,, doesn't work. reference may be also an assignment. 

====View to the near future====

* The next release should implement the algorithm of dynamic called routines (virtual methods)
including the interface concept of java.
* Working with multiple threads should be the implementation after the interface concept.
* LinkedList etc. should be implemented in the near future.
* for-loop-variant using iterator
* The garbage collector should be tested explicitely.


