==Java2C==
@ident=Java2C
.


===Changes from 0.82 to 0.83===
@ident=changes082_083
The version 0.83 is ready now. You can download next versions under [[http://www.vishia.org/Java2C/sf/Java2C.zip]], see also [[http://www.vishia.org/indexDownload.html]].

Date: Sunday, 2009-01-04

====Java2C - core====
The following features are implemented yet and first-time tested with the examples:

* String processing. The class org/vishia/util/StringPart.java is converted from Java2C and tested.
* Arrays with 1-dimension. There are some variants of using in C, see [[Java2C:array-handling]].
* Static methods, static fields.
* Parameter-sensitive methods (overloaded).
* try-throw-catch.
* for, but only the simple variant (not with iterator, Java 5)
* The ,,org/vishia/util/StringPart.java,, and ,,StringFormatter.java,, are classes with String processing, there are translated now in C.
* Intelligent make process: Using file.stc containing class informations if the file.java is not newer as translated file.c, file.h.
*+This concept isn't yet uptodate, because some enhancements in the inner structures. Use only full translation yet.  
* Documentation of java sources. 
* Revision of some data for inner organisation, especially ident and type informations.
* Implementation of interface routines (dynamic call, virtual methods): It is developted in the first state and tested with the LogMessageFile.java.
* LogMessage-Output while working garbage collection.

All features are tested with the enclosed example, but not tested hardly.

====Examples====

* A class ReadTargetFromText.java is created to test the parsing of text inputs at C-level.
In the example a list of positions and velocities may be given in text form and parsed at startup time.
* A concept of a message dispatcher is introduced. The message dispatcher is used as log output by this example, but the logs are adjustable. 
The ,,org/vishia/util/MsgDispatcher.java,, is written in java first, than translated to C.

====Detect bugs and requirements====

* Arrays with more as one dimensions are planned but not full implemented.
* Partially translation using *.stc-files isn't tested actually.
 

====View to the near future====

* The next release should implement the algorithm of dynamic called routines (virtual methods)
including the interface concept of java.
* Working with multiple threads should be the implementation after the interface concept.
* LinkedList etc. should be implemented in the near future.
* for-loop-variant using iterator
* The garbage collector should be tested explicitely.


